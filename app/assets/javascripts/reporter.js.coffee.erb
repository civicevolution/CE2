class Reporter

  create_report: (report_specs) ->
    #console.log "Reporter.create_report"
    status = this.initialize_report_canvas(report_specs, 1)
    #console.log "initialize_report_canvas status: #{status}"
    if status == "delay for canvas"
      return "delay for canvas"

    report_specs.include_header = if report_specs.header then true else false
    if report_specs.allocated_themes
      report_specs.num_of_themes = report_specs.allocated_themes.length
    else if report_specs.themes
      report_specs.num_of_themes = report_specs.themes.length
    report_specs.theme_start_num = 0
    report_specs.theme_end_num = report_specs.num_of_themes


    loop
      [last_theme_that_fit, actual_height] = this.fit_report(report_specs)

      if report_specs.theme_end_num < report_specs.num_of_themes
        #console.log "I have to add another canvas, actual_height: #{actual_height}"
        # add a new canvas and redefine this.canvas and this.ctx
        this.initialize_report_canvas(report_specs,0)
        report_specs.theme_start_num = last_theme_that_fit + 1
        report_specs.theme_end_num = report_specs.num_of_themes
        report_specs.include_header = false
        #console.log "Printed themes to number #{last_theme_that_fit} "
        #console.log "Create a new canvas starting at #{report_specs.theme_start_num}"
      else
        console.log "Convert the canvases in report images"
        report_images = []
        for canvas, index in document.getElementsByTagName("canvas")
          report_images.push( {id: index+1, dataURL: canvas.toDataURL("image/png") })
        report_specs.report_images = report_images
        report_specs.canvases = []
        return

  initialize_report_canvas: (report_specs, canvas_id) ->
    console.log "initialize_report_canvas for canvas_id: #{canvas_id}"
    if canvas_id == 1
      canvas = document.getElementById("report-canvas-#{canvas_id}")
      return "delay for canvas" if not canvas
    else
      canvas = document.getElementById("report-canvas-1")
      $scope = angular.element(canvas).scope()
      new_canvas_number = $scope.report_specs.canvases.length + 1
      console.log "add canvas #{new_canvas_number}"
      $scope.report_specs.canvases.push( {id: new_canvas_number} )
      $scope.$apply()
      canvas = document.getElementById("report-canvas-#{new_canvas_number}")
    G_vmlCanvasManager.initElement(canvas) if G_vmlCanvasManager?
    ctx = canvas.getContext('2d');
    canvas.width = report_specs.canvas_width
    ctx.width = canvas.width
    ctx.fillStyle = '#000';
    this.canvas = canvas
    this.ctx = ctx
    "canvas ready"

  fit_report: (report_specs) ->
    # Set initial height
    actual_height = canvas_height = 40
    # loop twice, first to determine needed height
    # second to redraw at the exact height
    loop
      canvas_height = actual_height
      [actual_height,last_theme_that_fit] = this.render_report(report_specs, canvas_height)
      console.log "last_theme_that_fit: #{last_theme_that_fit}, actual_height: #{actual_height}"
      if last_theme_that_fit < report_specs.theme_end_num
        report_specs.theme_end_num = last_theme_that_fit
        continue
      break if actual_height <= canvas_height
    [last_theme_that_fit, actual_height]



  render_report: (report_specs, canvas_height) ->
    console.log "Reporter.draw_graph with canvas_height: #{canvas_height}"

    this.canvas.height = canvas_height
    this.ctx.height = this.canvas.height
    this.ctx.clearRect( 0, 0, this.canvas.width, this.canvas.height )
    if report_specs.include_header
      y_offset = this.render_header(report_specs)
    else
      y_offset = 0

    if report_specs.allocated_themes
      report_specs.num_of_themes = report_specs.allocated_themes.length
      [y_offset,last_theme_that_fit] = this.render_prioritized_themes(report_specs, y_offset)
    else if report_specs.themes
      report_specs.num_of_themes = report_specs.themes.length
      [y_offset,last_theme_that_fit] = this.render_themes(report_specs, y_offset)
    return [y_offset,last_theme_that_fit]


  render_header: (report_specs) ->
    console.log "render_header: #{report_specs.header}"
    ctx = this.ctx
    font_height = report_specs.font_size*1.5
    ctx.font = "#{font_height}px #{report_specs.font_family}"
    line_height = font_height * 1.1
    ctx.textBaseline = "top"
    ctx.textAlign = "left"
    line_ctr = this.wrapText(report_specs.header, 0, 0, this.canvas.width-40, line_height);
    line_height*line_ctr + 32


  render_themes: (report_specs, y_offset) ->
    console.log "render_themes"
    width = this.canvas.width
    ctx = this.ctx
    theme_ctr = 0
    last_theme_that_fit = 0
    last_theme_that_fit_y_offset = 0

    for theme in report_specs.themes
      theme_ctr += 1
      continue if theme_ctr < report_specs.theme_start_num
      return [last_theme_that_fit_y_offset,last_theme_that_fit] if theme_ctr > report_specs.theme_end_num
      #console.log theme.text
      lineHeight = report_specs.font_size * 1.2
      ctx.textBaseline = "top"
      ctx.font = "#{report_specs.font_size *2}px #{report_specs.font_family}"
      ctx.textAlign = "center"
      ctx.fillText("#{theme.letter}", report_specs.font_size, y_offset);
      ctx.textAlign = "left"
      starting_height = y_offset
      for text_line in theme.text.replace(/\[quote/mg,"\n[quote").replace(/\/quote\]/mg,"/quote]\n").replace(/\n{2,}/mg,"\n\n").split(/\n/)
        #console.log "y_offset: #{y_offset}, #{theme.letter} text: #{text_line.substring(0,40)}"
        if text_line.match(/\[quote/)
          ctx.font = "italic #{report_specs.font_size}px #{report_specs.font_family}"
          text_line = text_line.replace(/\[quote[^\]]*\]/,'').replace(/\[\/quote[^\]]*\]/,'')
          x_offset = width*.15
          text_width = width * .85
          y_offset -= report_specs.font_size*.8
        else
          ctx.font = "#{report_specs.font_size}px #{report_specs.font_family}"
          x_offset = width*.1
          text_width = width * .9
        line_ctr = this.wrapText(text_line, x_offset, y_offset, text_width, lineHeight);
        y_offset += line_ctr * lineHeight
      theme_height = y_offset - starting_height
      if theme_height < lineHeight * 3
        y_offset += (lineHeight * 3 - theme_height)

      if y_offset < report_specs.max_canvas_height
        last_theme_that_fit = theme_ctr
        last_theme_that_fit_y_offset = y_offset
        #console.log "Found last_theme_that_fit: #{last_theme_that_fit}"
      else
        if last_theme_that_fit == 0
          last_theme_that_fit = theme_ctr
          last_theme_that_fit_y_offset = y_offset
        return [last_theme_that_fit_y_offset,last_theme_that_fit]
    [last_theme_that_fit_y_offset,last_theme_that_fit]


  render_prioritized_themes: (report_specs, y_offset) ->
    line_width = 24
    y_offset += 12
    width = this.canvas.width
    width_text = width*.8
    percent_width = width *.1
    ctx = this.ctx
    ctx.font = "#{report_specs.font_size}px #{report_specs.font_family}"

    for theme in report_specs.allocated_themes
      graph_width = theme.graph_percentage/100 * width_text
      ctx.strokeStyle = "#3D5B9C"
      ctx.lineWidth = line_width
      ctx.beginPath();
      ctx.moveTo(4,y_offset);
      ctx.lineTo(graph_width-4,y_offset);
      ctx.stroke();

      ctx.textBaseline = "top"
      ctx.textAlign = "left"
      ctx.fillText("#{theme.percentage}%", width_text + 10, y_offset - line_width/2);
      ctx.fillText("#{theme.points}pts", width_text + percent_width + 10, y_offset - line_width/2);

      y_offset += 32

      lineHeight = report_specs.font_size * 1.2
      ctx.textBaseline = "middle"

      line_ctr = this.wrapText(theme.text, 0, y_offset, width_text, lineHeight);
      y_offset += line_ctr * lineHeight + 32
    y_offset

  wrapText: (text, x, y, maxWidth, lineHeight) ->
    context = this.ctx
    line_ctr = 1
    words = text.split(' ')
    line = ''
    for word, index in words
      testLine = line + word + ' '
      metrics = context.measureText(testLine);
      testWidth = metrics.width
      if testWidth > maxWidth && index > 0
        context.fillText(line, x, y)
        line = word + ' '
        y += lineHeight
        line_ctr += 1
      else
        line = testLine;
    context.fillText(line, x, y)
    line_ctr

window.Reporter = Reporter