class Reporter

  create_report: (report_specs) ->
    #console.log "Reporter.create_report"
    status = this.initialize_report_canvas(report_specs, 1)
    #console.log "initialize_report_canvas status: #{status}"
    if status == "delay for canvas"
      return "delay for canvas"

    report_specs.include_header = if report_specs.header_text then true else false
    if report_specs.allocated_themes
      report_specs.num_of_themes = report_specs.allocated_themes.length
    else if report_specs.themes
      report_specs.num_of_themes = report_specs.themes.length
    report_specs.theme_start_num = 0
    report_specs.theme_end_num = report_specs.num_of_themes
    report_specs.max_canvas_height = report_specs.max_canvas_height_first_block

    loop
      [last_theme_that_fit, actual_height] = this.fit_report(report_specs)

      if report_specs.theme_end_num < report_specs.num_of_themes
        #console.log "I have to add another canvas, actual_height: #{actual_height}"
        # add a new canvas and redefine this.canvas and this.ctx
        report_specs.max_canvas_height = report_specs.max_canvas_height_addtl_blocks
        this.initialize_report_canvas(report_specs,0)
        report_specs.theme_start_num = last_theme_that_fit + 1
        report_specs.theme_end_num = report_specs.num_of_themes
        report_specs.include_header = false
        #console.log "Printed themes to number #{last_theme_that_fit} "
        #console.log "Create a new canvas starting at #{report_specs.theme_start_num}"
      else
        #console.log "Convert the canvases in report images"
        report_images = []
        for canvas, index in document.getElementsByTagName("canvas")
          report_images.push( {id: index+1, dataURL: canvas.toDataURL("image/png") })
        report_specs.report_images = report_images
        report_specs.canvases = []
        return

  initialize_report_canvas: (report_specs, canvas_id) ->
    #console.log "initialize_report_canvas for canvas_id: #{canvas_id}"
    if canvas_id == 1
      canvas = document.getElementById("report-canvas-#{canvas_id}")
      return "delay for canvas" if not canvas
    else
      canvas = document.getElementById("report-canvas-1")
      $scope = angular.element(canvas).scope()
      new_canvas_number = $scope.report_specs.canvases.length + 1
      #console.log "add canvas #{new_canvas_number}"
      $scope.report_specs.canvases.push( {id: new_canvas_number} )
      $scope.$apply()
      canvas = document.getElementById("report-canvas-#{new_canvas_number}")
    G_vmlCanvasManager.initElement(canvas) if G_vmlCanvasManager?
    ctx = canvas.getContext('2d');
    canvas.width = report_specs.canvas_width
    ctx.width = canvas.width
    ctx.fillStyle = '#000';
    this.canvas = canvas
    this.ctx = ctx
    "canvas ready"

  fit_report: (report_specs) ->
    # Set initial height
    actual_height = canvas_height = 40
    # loop twice, first to determine needed height
    # second to redraw at the exact height
    loop
      canvas_height = actual_height
      [actual_height,last_theme_that_fit] = this.render_report(report_specs, canvas_height)
      #console.log "last_theme_that_fit: #{last_theme_that_fit}, actual_height: #{actual_height}"
      if last_theme_that_fit < report_specs.theme_end_num
        report_specs.theme_end_num = last_theme_that_fit
        continue
      break if actual_height <= canvas_height
    [last_theme_that_fit, actual_height]



  render_report: (report_specs, canvas_height) ->
    #console.log "Reporter.draw_graph with canvas_height: #{canvas_height}"

    this.canvas.height = canvas_height
    this.ctx.height = this.canvas.height
    this.ctx.clearRect( 0, 0, this.canvas.width, this.canvas.height )
    if report_specs.include_header
      y_offset = this.render_header(report_specs)
    else
      y_offset = 0

    if report_specs.allocated_themes
      report_specs.num_of_themes = report_specs.allocated_themes.length
      [y_offset,last_theme_that_fit] = this.render_prioritized_themes(report_specs, y_offset)
    else if report_specs.themes
      report_specs.num_of_themes = report_specs.themes.length
      [y_offset,last_theme_that_fit] = this.render_themes(report_specs, y_offset)
    else if report_specs.worksheet_themes
      report_specs.num_of_themes = report_specs.worksheet_themes.length
      [y_offset,last_theme_that_fit] = this.render_worksheet_themes(report_specs, y_offset)
      if report_specs.layout.match(/alloc/i)
        report_specs.footer_text = "Total points"
        y_offset = this.render_worksheet_footer(report_specs, y_offset)
      y_offset += 1
    return [y_offset,last_theme_that_fit]


  render_header: (report_specs) ->
    #console.log "render_header: #{report_specs.header}"
    ctx = this.ctx
    font_height = report_specs.font_size*1.3
    ctx.font = "#{font_height}px #{report_specs.font_family}"
    line_height = font_height * 1.1
    ctx.textBaseline = "top"
    ctx.textAlign = "left"
    [line_ctr, new_y] = this.wrapText(report_specs.header_text, 0, 0, this.canvas.width-40, line_height);
    line_height*line_ctr + line_height*.5


  render_themes: (report_specs, y_offset) ->
    #console.log "render_themes"
    width = this.canvas.width
    ctx = this.ctx
    theme_ctr = 0
    last_theme_that_fit = 0
    last_theme_that_fit_y_offset = 0

    for theme in report_specs.themes
      theme_ctr += 1
      continue if theme_ctr < report_specs.theme_start_num
      return [last_theme_that_fit_y_offset,last_theme_that_fit] if theme_ctr > report_specs.theme_end_num
      #console.log theme.text
      lineHeight = report_specs.font_size * 1.2
      ctx.textBaseline = "top"
      ctx.font = "#{report_specs.font_size *2}px #{report_specs.font_family}"
      ctx.textAlign = "center"
      ctx.fillText("#{theme.letter}", report_specs.font_size, y_offset);
      ctx.textAlign = "left"
      starting_y_offset = y_offset
      theme_text = theme.text
      if report_specs.hide_examples == "true"
        theme_text = theme_text.replace(/\[quote.*\/quote\]/mg,'')
      for text_line in theme_text.replace(/\[quote/mg,"\n[quote").replace(/\/quote\]/mg,"/quote]\n").replace(/\n{2,}/mg,"\n\n").split(/\n/)
        continue if text_line.match(/^\s*$/)
        #console.log "#{theme.letter} in for text_line"
        #console.log "y_offset: #{y_offset}, #{theme.letter} text: #{text_line.substring(0,40)}"
        if text_line.match(/\[quote/)
          ctx.font = "italic #{report_specs.font_size}px #{report_specs.font_family}"
          text_line = text_line.replace(/\[quote[^\]]*\]/,'').replace(/\[\/quote[^\]]*\]/,'')
          x_offset = width*.15
          text_width = width * .85
          y_offset += report_specs.font_size*.4
        else
          ctx.font = "#{report_specs.font_size}px #{report_specs.font_family}"
          x_offset = width*.1
          text_width = width * .9
        [line_ctr, new_y] = this.wrapText(text_line, x_offset, y_offset, text_width, lineHeight);
        #console.log "line_ctr: #{line_ctr}, new_y: #{Math.round new_y}"
        y_offset = new_y
      theme_height = y_offset - starting_y_offset
      
      #console.log "theme: #{theme.letter}: starting_y_offset: #{Math.round starting_y_offset}, y_offset: #{Math.round y_offset}, line_ctr: #{line_ctr}, lineHeight: #{Math.round lineHeight}, theme_height: #{Math.round theme_height}"
      if theme_height < lineHeight * 2.6 && line_ctr < 3
        y_offset += (lineHeight * 2.6 - theme_height)
      else
        y_offset += lineHeight
      if y_offset < report_specs.max_canvas_height
        last_theme_that_fit = theme_ctr
        last_theme_that_fit_y_offset = y_offset
        #console.log "Found last_theme_that_fit: #{last_theme_that_fit}"
      else
        if last_theme_that_fit == 0
          last_theme_that_fit = theme_ctr
          last_theme_that_fit_y_offset = y_offset
        return [last_theme_that_fit_y_offset,last_theme_that_fit]
    [last_theme_that_fit_y_offset,last_theme_that_fit]


  render_prioritized_themes: (report_specs, y_offset) ->
    line_width = Number(report_specs.font_size)
    line_width = 24 if line_width > 24
    y_offset += 12
    width = this.canvas.width
    width_text = width*.8
    percent_width = width *.1
    ctx = this.ctx
    ctx.font = "#{report_specs.font_size}px #{report_specs.font_family}"
    theme_ctr = 0
    last_theme_that_fit = 0
    last_theme_that_fit_y_offset = 0

    for theme in report_specs.allocated_themes
      theme_ctr += 1
      continue if theme_ctr < report_specs.theme_start_num
      return [last_theme_that_fit_y_offset,last_theme_that_fit] if theme_ctr > report_specs.theme_end_num

      graph_width = theme.graph_percentage/100 * width_text
      ctx.strokeStyle = "#3D5B9C"
      ctx.lineWidth = line_width
      ctx.beginPath();
      ctx.moveTo(0,y_offset);
      ctx.lineTo(graph_width+1,y_offset);
      ctx.stroke();

      ctx.textBaseline = "top"
      ctx.textAlign = "left"
      ctx.fillText("#{theme.percentage}%", width_text + 10, y_offset - line_width/2);
      ctx.fillText("#{theme.count}", width_text + percent_width + 10, y_offset - line_width/2);

      y_offset += line_width * 1.25

      lineHeight = report_specs.font_size * 1.2
      ctx.textBaseline = "middle"

      theme_text = theme.text.replace(/\[quote.*\/quote\]/mg,'')

      [line_ctr, new_y] = this.wrapText(theme_text, 0, y_offset, width_text, lineHeight);
      y_offset = new_y + lineHeight * .9

      if y_offset < report_specs.max_canvas_height
        last_theme_that_fit = theme_ctr
        last_theme_that_fit_y_offset = y_offset
        #console.log "Found last_theme_that_fit: #{last_theme_that_fit}"
      else
        if last_theme_that_fit == 0
          last_theme_that_fit = theme_ctr
          last_theme_that_fit_y_offset = y_offset
        return [last_theme_that_fit_y_offset,last_theme_that_fit]
    [last_theme_that_fit_y_offset,last_theme_that_fit]

  render_worksheet_themes: (report_specs, y_offset) ->
    #console.log "render_themes"
    width = this.canvas.width
    ctx = this.ctx
    theme_ctr = 0
    last_theme_that_fit = 0
    last_theme_that_fit_y_offset = 0

    for theme in report_specs.worksheet_themes
      theme_ctr += 1
      continue if theme_ctr < report_specs.theme_start_num
      return [last_theme_that_fit_y_offset,last_theme_that_fit] if theme_ctr > report_specs.theme_end_num
      top_y_offset = y_offset
      #console.log theme.text
      lineHeight = report_specs.font_size * 1.2
      ctx.textBaseline = "top"
      ctx.font = "#{report_specs.font_size *2}px #{report_specs.font_family}"
      ctx.textAlign = "center"
      ctx.fillText("#{theme.letter}", report_specs.font_size, y_offset);
      ctx.textAlign = "left"
      starting_y_offset = y_offset
      theme_text = theme.text
      if report_specs.hide_examples == "true"
        theme_text = theme_text.replace(/\[quote.*\/quote\]/mg,'')
      for text_line in theme_text.replace(/\[quote/mg,"\n[quote").replace(/\/quote\]/mg,"/quote]\n").replace(/\n{2,}/mg,"\n\n").split(/\n/)
        continue if text_line.match(/^\s*$/)
        #console.log "y_offset: #{y_offset}, #{theme.letter} text: #{text_line.substring(0,40)}"
        if text_line.match(/\[quote/)
          ctx.font = "italic #{report_specs.font_size}px #{report_specs.font_family}"
          text_line = text_line.replace(/\[quote[^\]]*\]/,'').replace(/\[\/quote[^\]]*\]/,'')
          x_offset = width*.15
          text_width = width * .70
          y_offset += report_specs.font_size*.4
        else
          ctx.font = "#{report_specs.font_size}px #{report_specs.font_family}"
          x_offset = width*.1
          text_width = width * .75
        [line_ctr, new_y] = this.wrapText(text_line, x_offset, y_offset + 6, text_width, lineHeight);
        y_offset = new_y
      theme_height = y_offset - starting_y_offset
      if theme_height < lineHeight * 2.6 && line_ctr < 3
        y_offset += (lineHeight * 2.6 - theme_height)
      else
        y_offset += lineHeight

      this.draw_table_row(top_y_offset, y_offset, [0, .08, .9, 1])

      if y_offset < report_specs.max_canvas_height
        last_theme_that_fit = theme_ctr
        last_theme_that_fit_y_offset = y_offset
        #console.log "Found last_theme_that_fit: #{last_theme_that_fit}"
      else
        if last_theme_that_fit == 0
          last_theme_that_fit = theme_ctr
          last_theme_that_fit_y_offset = y_offset
        return [last_theme_that_fit_y_offset,last_theme_that_fit]
    [last_theme_that_fit_y_offset,last_theme_that_fit]

  render_worksheet_footer: (report_specs, y_offset) ->
    #console.log "render_worksheet_footer: #{report_specs.header}"
    top_y_offset = y_offset
    ctx = this.ctx
    width = this.canvas.width
    lineHeight = report_specs.font_size * 1.2
    font_height = report_specs.font_size
    ctx.font = "bold #{font_height}px #{report_specs.font_family}"
    line_height = font_height * 1.1
    ctx.textBaseline = "top"
    ctx.textAlign = "right"
    ctx.fillText(report_specs.footer_text, width*.88, y_offset + 6);
    y_offset += lineHeight * 1.4
    this.draw_table_row(top_y_offset, y_offset, [0, .9, 1])
    y_offset

  wrapText: (text, x, y, maxWidth, lineHeight) ->
    #console.log "wrapText for text: #{text}"
    context = this.ctx
    line_ctr = 1
    words = text.split(' ')
    line = ''
    for word, index in words
      testLine = line + word + ' '
      metrics = context.measureText(testLine);
      testWidth = metrics.width
      if testWidth > maxWidth && index > 0
        #console.log "AAA wrapText at y: #{Math.round y} write: #{line}"
        context.fillText(line, x, y)
        line = word + ' '
        y += lineHeight
        line_ctr += 1
      else
        line = testLine;
    #console.log "BBB wrapText at y: #{Math.round y} write: #{line}"
    if not line.match(/^\s*$/)
      context.fillText(line, x, y)
      y += lineHeight
    #console.log "XXX Return from wrapText with y: #{y}"
    [line_ctr, y]

  draw_table_row: (top, bottom, verticals ) ->
    # draw a box around the theme to make a table
    width = this.canvas.width
    left = width * verticals[0]
    right = width * verticals[ verticals.length-1]
    ctx = this.ctx
    ctx.strokeStyle = "#000000"
    ctx.lineWidth = 1
    ctx.beginPath()
    ctx.moveTo(left,top)
    ctx.lineTo(right,top)
    ctx.moveTo(left,bottom)
    ctx.lineTo(right,bottom)
    for vertical in verticals
      ctx.moveTo(width * vertical,top)
      ctx.lineTo(width * vertical,bottom)
    ctx.stroke();


window.Reporter = Reporter