# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/

bootstrap_CE2 = ->
	#console.log "In bootstrap_CE2"

  if typeof Markdown == 'undefined' || typeof Markdown.BBCode == 'undefined'
    setTimeout bootstrap_CE2, 50
  else
    try
      angular.bootstrap(document,["CE2"])
    catch error
      setTimeout bootstrap_CE2, 50

bootstrap_CE2()


ce2_app = angular.module("CE2", ["ngResource","CE2.services", 'CE2.directives', 'CE2.filters',
  'ui.bootstrap', 'ui.router', 'ngSanitize', 'ngGrid'] )
#  'ui.bootstrap', 'ui.router', 'ngGrid', 'ngSanitize'] )

ce2_app.config ($httpProvider) ->
	$httpProvider.defaults.headers.common["X-CSRF-TOKEN"] =
		document.querySelectorAll('meta[name="csrf-token"]')[0].getAttribute('content')

ce2_app.config ($httpProvider,$parseProvider) ->
  $parseProvider.unwrapPromises(true)

ce2_app.factory 'errorHttpInterceptor', ($q, $injector) ->
  (promise) ->
    promise.then (response) ->
      # do something on success
      #console.log "$httpProvider.responseInterceptors Success"
      promise # pass the promise on to the calling function
    , (response) ->
      # do something on error
      if (canRecover(response))
        return promise # let the response promise continue and be dealt with
      $dialog = $dialog || $injector.get("$dialog")
      switch response.data.class
        when "CanCan::AccessDenied"
          title = 'Access denied'
          msg = "Sorry, you are not authorized for this action [URL: #{response.config.url}, Controller: #{response.data.controller}, Action: #{response.data.action}]"
        else
          title = 'Server error'
          msg = "#{response.data.error} [URL: #{response.config.url}, Controller: #{response.data.controller}, Action: #{response.data.action}]"
      btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
      $dialog.messageBox(title, msg, btns)
      #console.log "XXX $httpProvider.responseInterceptors Error\n#{response.data.error}"
      return $q.reject(response)
canRecover = (response) ->
  #if response.data.class?.match(/CanCan/)
  #  return false
  switch
    when response.config.url.match(/guest_posts/) && response.data.class is "ActiveRecord::RecordNotFound" then true
    when response.data.class then false
    when response.data.errors then true
    else false



ce2_app.config ($httpProvider) ->
  $httpProvider.responseInterceptors.push('errorHttpInterceptor')

ce2_app.config ( [ '$stateProvider', '$urlRouterProvider',
  ($stateProvider, $urlRouterProvider) ->

    $urlRouterProvider
      # provides redirects
      .when('/c?id', '/contacts/:id')
      .otherwise('/home');
      #.otherwise('/iap2');

    $stateProvider
      # registers the urls with $urlRouterProvider
      .state('home', {
        url: '/home'
        templateUrl: '<%= path_to_asset "home.html" %>'

      })

      .state('events', {
        url: '/events'
        templateUrl: '<%= path_to_asset "events.html" %>'
        resolve:
          events: ["EventsData", (EventsData) ->
            EventsData.events().then(
              (response)->
                response.data
            )
          ]
        controller: [ "$scope", "events",
          ($scope, events) ->
            $scope.events = events
        ]
      })

      .state('conversations', {
        url: '/conversations',
        templateUrl: '<%= path_to_asset "conversations.html" %>'
        resolve:
          conversations: ["ConversationData", (ConversationData) ->
            ConversationData.conversations()
          ]
        controller: [ "$scope", "conversations", "ConversationData", "$state",
          ($scope, conversations, ConversationData, $state) ->
            #console.log "In home state controller"
            $scope.conversations = conversations
            $scope.create_conversation = ->
              #console.log "create a new conversation and nav to it or show error"
              ConversationData.create_new_conversation().then (response) ->
                #console.log "RoR response to ConversationData.create_new_conversation with code: #{response.data.code}"
                $state.transitionTo('conversation', {code: response.data.code, munged_title: "new"})
        ]
      })

    .state( 'agenda-admin',
        url: "/agenda-admin"
        templateUrl: '<%= path_to_asset "admin/agenda.html" %>'
        resolve:
          agendas: ["AgendaData", (AgendaData) ->
            AgendaData.list_agendas().then(
              (response)->
                response.data
            )
          ]
          agenda: ["$q", ($q) ->
            defer = $q.defer()
            defer.resolve({})
            defer.promise
          ]
          agenda_defaults: ["$q", ($q) ->
            defer = $q.defer()
            defer.resolve({})
            defer.promise
          ]
        controller: agenda_admin_controller
      )
    .state( 'agenda-admin-code',
        url: "/agenda-admin/{code}/{munged_title}"
        templateUrl: '<%= path_to_asset "admin/agenda.html" %>'
        resolve:
          agendas: ["AgendaData", (AgendaData) ->
            AgendaData.list_agendas().then (response)->
              response.data
          ]
          agenda: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.get_agenda_admin_details($stateParams.code).then (response) ->
              response.data
          ]
          agenda_defaults: ["AgendaData", (AgendaData) ->
            AgendaData.agenda_defaults().then (response)->
              response.data
          ]
        controller: agenda_admin_controller
      )
      .state( 'agenda',
        url: "/agenda/{code}/{munged_title}"
        #template: '<div ng-include="agenda_template_url"></div>'
        templateUrl: '<%= path_to_asset "custom/iap2.html" %>'
        resolve:
          agenda: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.agenda($stateParams.code).then(
              (response)->
                response.data
            )
          ]
        controller: agenda_controller
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')

      )

      .state( 'conversation',
        url: "/conversation/{code}/{munged_title}"
        #url: "/conversation/{code}/{munged_title:[^/]*}{path:.*}"
        templateUrl: '<%= path_to_asset "conversation.html" %>'
        resolve:
          conversation: ["ConversationData", "$stateParams", (ConversationData, $stateParams) ->
                         console.log "resolve get ConversationData.conversation"
                         ConversationData.conversation($stateParams.code)
            #console.log "conversation state with path: #{$stateParams.path}"
          ]
        controller: conversation_controller
      )

      .state( 'small-group-deliberation',
        url: "/cmp/{component_code}/sgd/{conversation_code}/{munged_title}"
        templateUrl: '<%= path_to_asset "live/group.html" %>'
        resolve:
          small_group_deliberation_data: ["ComponentData", "$stateParams", (ComponentData, $stateParams) ->
            console.log "resolve get ComponentData.small_group_deliberation_data"
            ComponentData.small_group_deliberation_data($stateParams.component_code, $stateParams.conversation_code )
          ]
        controller: conversation_group_controller
      )

      .state( 'small-group-deliberation-agenda',
        url: "/agenda/{agenda_code}-{link_code}/sgd/{munged_title}"
        templateUrl: '<%= path_to_asset "live/group.html" %>'
        resolve:
          small_group_deliberation_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('sgd', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: conversation_group_controller
      )

      .state( 'theme-small-group-deliberation',
        url: "/cmp/{component_code}/sgd_theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["ThemeData", "$stateParams", (ThemeData, $stateParams) ->
            console.log "resolve get ThemeData.theming_data"
            ThemeData.small_group_deliberation_theme_data($stateParams.component_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

      .state( 'theme-small-group-deliberation-agenda',
        url: "/agenda/{agenda_code}-{link_code}/sgd-theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('sgd-theme', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

      .state( 'coordinator-theme',
        url: "/cmp/{component_code}/themes_theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["ThemeData", "$stateParams", (ThemeData, $stateParams) ->
            ThemeData.small_group_themes_theme_data($stateParams.component_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

      .state( 'coordinator-theme-agenda',
        url: "/agenda/{agenda_code}-{link_code}/coord-theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('coord-theme', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

      .state( 'live-edit-agenda',
        url: "/agenda/{agenda_code}-{link_code}/live-edit/{munged_title}"
        templateUrl: '<%= path_to_asset "live/live-edit.html" %>'
        resolve:
          theming_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('coord-theme', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

      .state('display-themes-agenda',
        url: "/agenda/{agenda_code}-{link_code}/theme-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/themes.html" %>'
        resolve:
          themes_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('theme-results', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')

        controller: [ "$scope", "themes_data", "$location", "$compile", "$timeout",
          ($scope, themes_data, $location, $compile, $timeout) ->
            $scope.conversation_title = themes_data.title
            $scope.conversation_themes = add_letters( themes_data.themes )
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
            $scope.no_examples = true
            $scope.examples_link = "Show examples"
            examples_are_compiled = false

            $scope.toggle_examples = ->
              if $scope.examples_link.match(/Show/)
                $scope.no_examples = false
                $scope.examples_link = "Hide examples"
              else
                $scope.no_examples = true
                $scope.examples_link = "Show examples"

              if !$scope.no_examples && !examples_are_compiled
                $timeout ->
                  $scope.theme_display_only = true
                  examples_are_compiled = true
                  $compile(angular.element(document.body).find('blockquote'))($scope)
                ,100
        ]
      )

    .state( 'services-list',
      url: "/mca/{mca_id}/review/{phase}"
      templateUrl: '<%= path_to_asset "live/reports/details/services-list.html" %>'
      resolve:
        service_list: ["McaData", "$stateParams", (McaData, $stateParams) ->
                      McaData.service_list($stateParams.mca_id,$stateParams.phase)
        ]
      controller: [ "$scope", "$stateParams", "service_list", "$location",
        ($scope, $stateParams, service_list, $location ) ->
          console.log "show services list for action #{$stateParams.phase}"
          $scope.service_list = service_list.data
          $scope.show_service = (service_id) ->
            console.log "show_service id: #{service_id}"
            $location.url( "/mca/#{$stateParams.mca_id}/detailed-report/#{service_id}" )

        ]
      )

      .state( 'directions-vote',
        url: "/mca/{mca_id}/directions-vote"
        templateUrl: '<%= path_to_asset "live/reports/details/directions-vote.html" %>'
        resolve:
          direction_options: ["McaData", "$stateParams", (McaData, $stateParams) ->
            McaData.direction_options($stateParams.mca_id)
          ]
        controller: [ "$scope", "$stateParams", "direction_options", "McaData", "FayeService", "$timeout", "$dialog",
          ($scope, $stateParams, direction_options, McaData, FayeService, $timeout, $dialog ) ->
            console.log "show direction_options"
            $scope.direction_options = direction_options.data.options
            $scope.budget_directions = []
            $scope.service_ids = []
            $scope.page_options = {}
            for service in $scope.direction_options
              $scope.service_ids.push(service.id)
              for direction in service.direction_options
                $scope.budget_directions.push(direction)
            $scope.report_thresholds = direction_options.data.report_thresholds
            $scope.group_voters = direction_options.data.group_voters
            $scope.view = {report_mode: false}

            $scope.set_mode = ->
              $scope.page_options.mode = switch
                when $scope.user.first_name == 'Coordinator'
                  $timeout ->
                    $scope.set_direction_status()
                  ,3000

                  if $scope.page_options.plenary_id
                    'view_one_service'
                  else
                    'list_all_votes'

                when $scope.user.first_name == 'Group'
                  $timeout ->
                    $scope.check_for_vote_update()
                  ,6000

                  if $scope.page_options.plenary_id
                    'vote_one_service'
                  else
                    'enter_all_votes'

                else 'unknown'
              $scope.$$phase || $scope.$apply()

            if $scope.user
              $scope.page_options.num_voters = $scope.group_voters[$scope.user.last_name]
              $scope.set_mode()

            $scope.set_direction_status = ->
              return if $scope.page_options.mode != 'list_all_votes' && $scope.page_options.mode != 'view_one_service'
              split_high = 50 + (1 / $scope.report_thresholds['Voters'] * 100 )
              split_low = 50 - (1 / $scope.report_thresholds['Voters'] * 100)
              for budget_direction in $scope.budget_directions
                direction_votes = _.reduce budget_direction.all_votes, ((memo, vote) -> memo + Number(vote||0)), 0
                percent = budget_direction.percent = Math.round(direction_votes/ $scope.report_thresholds['Voters'] * 100)
                budget_direction.status = switch
                  when percent >= $scope.report_thresholds['Unanimous'] then 'Unanimous'
                  when $scope.report_thresholds['Unanimous'] > percent >= $scope.report_thresholds['2/3_majority'] then 'Two-thirds Majority'
                  when split_high >= percent >= split_low then 'Split'
                  when $scope.report_thresholds['2/3_majority'] > percent >= $scope.report_thresholds['Majority'] then 'Majority'
                  else 'Minority'
              $timeout ->
                $scope.set_direction_status()
              ,3000

            $scope.$on 'update-user-data', () ->
              $scope.page_options.num_voters = $scope.group_voters[$scope.user.last_name]
              $scope.set_mode()

            faye_channel =  "/mca/#{$stateParams.mca_id}/votes"
            FayeService.subscribe( faye_channel )
            # register the listeners for the realtime updates
            $scope.$on 'full_services_vote_update', (event, data) ->
              return unless $scope.page_options.mode == 'list_all_votes' || $scope.page_options.mode == 'view_one_service'
              #console.log "received broadcast full_services_vote_update"
              for option in $scope.direction_options
                for direction in option.direction_options
                  vote = _.findWhere(data.data.data, {opt_id: option.id, dir_id: direction.id})
                  if vote
                    direction.all_votes[Number(data.data.group_id) - 1] = vote.votes
              $scope.$$phase || $scope.$apply()

            $scope.$on 'set_plenary_id_update', (event, data) ->
              #console.log "set_plenary_id_update to id: #{data.data.id}"
              $scope.page_options.plenary_id = data.data.id
              $scope.set_mode()

            $scope.on_change = ->
              $scope = angular.element(event.currentTarget).scope()
              $scope.page_options.vote_changed = true
              if isNaN($scope.direction_option.pro_votes) || $scope.direction_option.pro_votes < 0
                $scope.direction_option.pro_votes = 0
              else
                $scope.direction_option.pro_votes = Number($scope.direction_option.pro_votes)
              num_voters = $scope.page_options.num_voters
              #console.log "update_votes id: #{$scope.direction_option.id}, #{$scope.direction_option.title}, votes: #{$scope.direction_option.pro_votes}"
              #console.log "#{num_voters}"
              service_votes = _.reduce $scope.option.direction_options, ((memo, opt) -> memo + Number(opt.pro_votes||0)), 0
              #$scope.option.service_votes = service_votes
              if service_votes > num_voters
                #console.log "Too many votes: service_votes: #{service_votes} > num_voters #{num_voters}"
                $scope.option.over_vote = true
              else
                $scope.option.over_vote = false

            $scope.on_blur = ->
              $scope = angular.element(event.currentTarget).scope()
              service_votes = _.reduce $scope.option.direction_options, ((memo, opt) -> memo + Number(opt.pro_votes||0)), 0
              if service_votes <= $scope.page_options.num_voters
                for direction in $scope.option.direction_options
                  if typeof direction.pro_votes == "undefined"
                    return
                console.log "All votes are set for this service: #{$scope.option.title}, transmit the votes for #{$scope.direction_option.title}"

            $scope.check_for_vote_update = ->
              return if $scope.page_options.mode != 'enter_all_votes' && $scope.page_options.mode != 'vote_one_service'
              if $scope.page_options.vote_changed
                $scope.page_options.vote_changed = false
                #console.log "periodic check_for_vote_update - send now"
                errors = $scope.check_votes_ok()
                if errors == null
                  $scope.send_all_votes()
                else 
                  services = (option.title for option in errors).join(', ')
                  #console.log "There are errors with the votes in service: #{services}"
                  $timeout ->
                    errors = $scope.check_votes_ok()
                    if errors != null
                      cur_services = (option.title for option in errors).join(', ')
                      if cur_services == services
                        $dialog.messageBoxOk("Error", "There is an error with the votes for service: #{services}")
                  ,15000

              else
                #console.log "votes didn't change, don't send them"
              $timeout ->
                $scope.check_for_vote_update()
              ,6000

            $scope.confirm_votes = ->
              $scope = angular.element(event.currentTarget).scope()
              errors = $scope.check_votes_ok()
              if errors == null
                $scope.send_all_votes()
              else
                services = (option.title for option in errors).join(', ')
                $dialog.messageBoxOk("Error", "There is an error with the votes for service: #{services}")

            $scope.send_all_votes = ->
              $scope.page_options.vote_changed = false
              #console.log "send_all_votes"
              direction_votes = []
              for opt in $scope.direction_options
                for dir in opt.direction_options
                  direction_votes.push(
                    opt_id: opt.id
                    dir_id: dir.id
                    votes: dir.pro_votes
                  )
              McaData.direction_votes($stateParams.mca_id, direction_votes)

            $scope.check_votes_ok = ->
              #console.log "$scope.check_votes_ok()"
              errors = (option for option in $scope.direction_options when option.over_vote is true)
              if errors.length == 0
                return null
              else
                console.log "The votes have an error"
                return errors
            
            $scope.show_plenary_page = (nav_id) ->
              $scope = angular.element(event.currentTarget).scope()
              #console.log "show_plenary_page for service id: #{$scope.option.id}"
              id = switch
                when nav_id is null then null
                when nav_id == 0 then $scope.option.id
                when nav_id == 1
                  ind = _.indexOf($scope.service_ids, $scope.option.id);
                  if ind < $scope.service_ids.length
                    $scope.service_ids[ind + 1]
                  else
                    $scope.service_ids[0]
                when nav_id == -1
                  ind = _.indexOf($scope.service_ids, $scope.option.id);
                  if ind > 0
                    $scope.service_ids[ind - 1]
                  else
                    $scope.service_ids[ $scope.service_ids.length - 1]
              data =
                action: "update"
                class: "set_plenary_id"
                data:
                  id: id
                source: "ng-cmd"
              FayeService.publish_to_channel( faye_channel, data )

            $scope.set_group_voters = ->
              McaData.set_group_voters($stateParams.mca_id, $scope.page_options.num_voters)

        ]
      )

      .state( 'mca-detailed-report',
        url: "/mca/{mca_id}/detailed-report/{option_id}"
        templateUrl: '<%= path_to_asset "live/reports/details/main-page.html" %>'
        resolve:
          report_data: ["McaData", "$stateParams", (McaData, $stateParams) ->
            McaData.report_data($stateParams.mca_id,$stateParams.option_id)
          ]
        controller: [ "$scope", "report_data", "McaData", "$stateParams", "$location", "$dialog", "$filter",
          ($scope, report_data, McaData, $stateParams, $location, $dialog, $filter) ->
            $scope.report_data = report_data.data
            $scope.page = {}
            $scope.page.id = Number($stateParams.option_id)
            if $scope.page.id != 0
              $scope.service = service for service in $scope.report_data.options when service.id == Number($stateParams.option_id)
              $scope.service.allow_edit_all = true


            reset_recommendation_form = (dir_package) ->
              dir_package.recommend_action.decrease = ""
              dir_package.recommend_action.increase = ''
              dir_package.recommend_action.reason = ''
              dir_package.recommend_action._id = null

            reset_suggestion_form = (dir_package) ->
              dir_package.suggestion =
                show_form: false
                text: ''
                _id: null

            set_form_name = (dir_package) ->
              switch dir_package.service_level_recommendation
                when "Pay more for more/better"
                  dir_package.recommend_action.form = "more"
                  dir_package.recommend_action.type = "More for More"
                when "Pay the same for the same"
                  dir_package.recommend_action.form = "same"
                  dir_package.recommend_action.type = "Same for Same"
                when "Pay the same with different mix"
                  dir_package.recommend_action.form = "mix"
                  dir_package.recommend_action.type = "Same with Mix"
                when "Pay less for less"
                  dir_package.recommend_action.form = "less"
                  dir_package.recommend_action.type = "Less for Less"

            init_recommendation_package = (recommendation_package) ->
              recommendation_package.recommend_action = {}
              reset_recommendation_form(recommendation_package)
              reset_suggestion_form(recommendation_package)
              set_form_name(recommendation_package)
              recommendation_package.service_recommendations = service_recommendations_hash[recommendation_package._id]
              recommendation_package.service_suggestions = service_suggestions_hash[recommendation_package._id]

            # Ensure that the extra select is displayed so groups can add another budget direction recommendation
            if $scope.service
              if not $scope.service.data
                $scope.service.data = {service_level_recommendations:[]}

              service_recommendations_hash = {}
              if $scope.service.data.service_recommendations
                for service_recommendation in $scope.service.data.service_recommendations
                  budget_dir_id = service_recommendation.budget_dir_id
                  service_recommendations_hash[budget_dir_id] = [] unless service_recommendations_hash[budget_dir_id]
                  service_recommendations_hash[budget_dir_id].push( service_recommendation )

              service_suggestions_hash = {}
              if $scope.service.data.service_suggestions
                for service_suggestion in $scope.service.data.service_suggestions
                  budget_dir_id = service_suggestion.budget_dir_id
                  service_suggestions_hash[budget_dir_id] = [] unless service_suggestions_hash[budget_dir_id]
                  service_suggestions_hash[budget_dir_id].push( service_suggestion )

              if $scope.service.data.service_level_recommendations
                $scope.service.data.service_level_recommendations.push( { service_level_recommendation: ''} )
              else
                $scope.service.data.service_level_recommendations = [ { service_level_recommendation: ''} ]

              for recommendation_package in $scope.service.data.service_level_recommendations
                init_recommendation_package(recommendation_package)

            else
              console.log "organize data for report table"
              report = []
              for service in $scope.report_data.options
                service_recommendations_hash = {}
                if service.data?.service_recommendations
                  for service_recommendation in service.data?.service_recommendations || []
                    budget_dir_id = service_recommendation.budget_dir_id
                    service_recommendations_hash[budget_dir_id] = [] unless service_recommendations_hash[budget_dir_id]
                    service_recommendations_hash[budget_dir_id].push( service_recommendation )

                service_suggestions_hash = {}
                if service.data?.service_suggestions
                  for service_suggestion in service.data?.service_suggestions || []
                    budget_dir_id = service_suggestion.budget_dir_id
                    service_suggestions_hash[budget_dir_id] = [] unless service_suggestions_hash[budget_dir_id]
                    service_suggestions_hash[budget_dir_id].push( service_suggestion )

                level_recommendations = service.data?.service_level_recommendations || [ {} ]
                for level in level_recommendations
                  actions = service_recommendations_hash[level?._id] || [  ]
                  for action in actions
                    row =
                      service_id: service.id
                      service_title: service.title
                      category: service.category
                      level: level?.service_level_recommendation
                      specific_action: if action then { form: action.form, increase: action.increase, decrease: action.decrease, reason: action.reason} else {}
                      group: if action then action.group else null
                    report.push(row)
                  suggestions = service_suggestions_hash[level?._id] || [ ]
                  for suggestion in suggestions
                    row =
                      service_id: service.id
                      service_title: service.title
                      category: service.category
                      level: level?.service_level_recommendation
                      suggestion: if suggestion then { form: suggestion.form, text: suggestion.text} else {}
                      group: if suggestion then suggestion.group else null
                    report.push(row)
                  if actions.length == 0 && suggestions.length == 0
                    row =
                      service_id: service.id
                      service_title: service.title
                      category: service.category
                      level: level?.service_level_recommendation
                    report.push(row)

              # iterate through the report table and mark Service and direction "As above" when they repeat
              service = ''
              level = ''
              for row in report
                if service != row.service_title
                  service = row.service_title
                  row.title = service
                  row.cat = row.category
                  level = ''
                else
                  row.title = 'As above'
                  row.cat = ''

                if level != row.level
                  level = row.level
                  row.level_r = level
                else
                  row.level_r = 'As above'



              $scope.report = report

            $scope.show_service = (service_id) ->
              console.log "show_service id: #{service_id}"
              $location.url( "/mca/#{$stateParams.mca_id}/detailed-report/#{service_id}" )

            $scope.recommendation_options = [
              "Pay more for more/better",
              "Pay the same for the same",
              "Pay the same with different mix",
              "Pay less for less"
            ]

            $scope.update_service_recommendation = ->
              $scope = angular.element(event.currentTarget).scope()
              # make sure this is a unique new service level
              for recommendation in $scope.service.data.service_level_recommendations when recommendation._id
                if recommendation._id != $scope.recommendation_package._id && recommendation.service_level_recommendation == $scope.recommendation_package.service_level_recommendation
                  $dialog.messageBoxOk("Warning","#{$scope.recommendation_package.service_level_recommendation} has already been selected. Please use the form above.")
                  $scope.recommendation_package.service_level_recommendation = ""
                  return
              set_form_name($scope.recommendation_package)

              data =
                id: $scope.service.id
                type: 'service_level_recommendation'
                data:
                  'push:service_level_recommendations': {service_level_recommendation: $scope.recommendation_package.service_level_recommendation}

              if $scope.recommendation_package._id
                data.data['push:service_level_recommendations']._id = $scope.recommendation_package._id
              McaData.update_option( data ).then(
                (response)->
                  console.log "update_service_recommendation return"
                  if response.data[0].key.match('push:')
                    key = response.data[0].key.split(':')[1]
                    angular.extend($scope.service.data[key][$scope.service.data[key].length-1], response.data[0].value)
                    $scope.service.data[key].push( { service_level_recommendation: ''} )
                    init_recommendation_package($scope.service.data[key][ $scope.service.data[key].length - 1])
              )

            $scope.set_tab = (tab_str) ->
              console.log "set_tab: #{tab_str}"

            $scope.recommend_action_form_incomplete = ->
              return false if not event
              $scope = angular.element(event.currentTarget).scope()
              #return false if not $scope
              recommend_action = $scope?.recommendation_package?.recommend_action
              return false if not recommend_action
              #console.log "check recommend_action.form: #{recommend_action.form}"
              switch recommend_action.form
                when "more"
                  recommend_action.increase.length < 5 || recommend_action.reason.length < 5
                when "less"
                  recommend_action.decrease.length < 5 || recommend_action.reason.length < 5
                when "mix"
                  recommend_action.increase.length < 5 || recommend_action.decrease.length < 5 || recommend_action.reason.length < 5
                else
                  true

            $scope.save_recommendation = () ->
              $scope = angular.element(event.currentTarget).scope()
              $scope.recommendation_package.recommend_action.budget_dir_id = $scope.recommendation_package._id
              data =
                id: $scope.service.id
                type: 'service_recommendation'
                data:
                  'push:service_recommendations': $scope.recommendation_package.recommend_action
              McaData.update_option( data ).then(
                (response)->
                  console.log "save_recommendation return"
                  if response.data[0].key.match('push:')
                    key = response.data[0].key.split(':')[1]
                    if not $scope.recommendation_package[key]
                      $scope.recommendation_package[key] = []
                    $scope.recommendation_package[key].push(response.data[0].value)
                  if response.data[0].key.match('replace:')
                    key = response.data[0].key.split(':')[1]
                    updated_id = Number(response.data[0].value._id)
                    for recommendation in $scope.recommendation_package[key] when Number(recommendation._id) == updated_id
                      angular.extend(recommendation, response.data[0].value)
                  reset_recommendation_form($scope.recommendation_package)
              )


            $scope.clear_recommendation = () ->
              reset_recommendation_form($scope.recommendation_package)

            $scope.show_suggestion_form = () ->
              if $scope.service.data.service_level_recommendation
                $scope.suggestion.show_form = true

            $scope.save_suggestion = ->
              $scope = angular.element(event.currentTarget).scope()
              data =
                id: $scope.service.id
                type: 'service_suggestion'
                data:
                  'push:service_suggestions':
                    _id:  $scope.recommendation_package.suggestion._id
                    text: $scope.recommendation_package.suggestion.text
                    type: $scope.recommendation_package.recommend_action.type
                    budget_dir_id: $scope.recommendation_package._id
                    form: 'suggestion'
              McaData.update_option( data ).then(
                (response)->
                  console.log "save_suggestion return"
                  if response.data[0].key.match('push:')
                    key = response.data[0].key.split(':')[1]
                    if not $scope.recommendation_package[key]
                      $scope.recommendation_package[key] = []
                    $scope.recommendation_package[key].push(response.data[0].value)
                  if response.data[0].key.match('replace:')
                    key = response.data[0].key.split(':')[1]
                    updated_id = Number(response.data[0].value._id)
                    for suggestion in $scope.recommendation_package[key] when Number(suggestion._id) == updated_id
                      angular.extend(suggestion, response.data[0].value)
                  reset_suggestion_form($scope.recommendation_package)
              )


            $scope.clear_suggestion = ->
              reset_suggestion_form($scope.recommendation_package)

            $scope.edit_recommendation = ->
              $scope = angular.element(event.currentTarget).scope();
              $scope.recommendation_package.recommend_action._id = $scope.recommendation._id
              $scope.recommendation_package.recommend_action.increase = $scope.recommendation.increase
              $scope.recommendation_package.recommend_action.decrease = $scope.recommendation.decrease
              $scope.recommendation_package.recommend_action.reason = $scope.recommendation.reason

            $scope.delete_recommendation = ->
              $scope = angular.element(event.currentTarget).scope();
              data =
                id: $scope.service.id
                type: 'delete_recommendation'
                data:
                  'delete:service_recommendations':
                    id: $scope.recommendation._id
              McaData.update_option( data ).then(
                (response)->
                  console.log "delete_recommendation return"
                  if response.data[0].key.match('delete:')
                    key = response.data[0].key.split(':')[1]
                  deleted_id = Number(response.data[0].value['id'])
                  $scope.recommendation_package[key] = $filter('filter')($scope.recommendation_package[key], (o) -> (Number(o._id) != deleted_id) )
              )

            $scope.edit_suggestion = ->
              $scope = angular.element(event.currentTarget).scope();
              $scope.recommendation_package.suggestion._id = $scope.recommendation._id
              $scope.recommendation_package.suggestion.text = $scope.recommendation.text

            $scope.delete_suggestion = ->
              $scope = angular.element(event.currentTarget).scope();
              data =
                id: $scope.service.id
                type: 'delete_suggestion'
                data:
                  'delete:service_suggestions':
                    id: $scope.recommendation._id
              McaData.update_option( data ).then(
                (response)->
                  console.log "delete_suggestion return"
                  if response.data[0].key.match('delete:')
                    key = response.data[0].key.split(':')[1]
                  deleted_id = Number(response.data[0].value['id'])
                  $scope.recommendation_package[key] = $filter('filter')($scope.recommendation_package[key], (o) -> (Number(o._id) != deleted_id) )
              )

            $scope.delete_budget_direction = ->
              console.log "delete_budget_direction"
              $scope = angular.element(event.currentTarget).scope();
              data =
                id: $scope.service.id
                type: 'delete_budget_direction'
                data:
                  'delete:service_level_recommendations':
                    id: $scope.recommendation_package._id
              McaData.update_option( data ).then(
                (response)->
                  if response.data[0].key.match('delete:')
                    key = response.data[0].key.split(':')[1]
                  deleted_id = Number(response.data[0].value['id'])
                  $scope.service.data[key] = $filter('filter')($scope.service.data[key], (o) -> (Number(o._id) != deleted_id) )
                  console.log "delete_budget_direction return"
              )

            #$scope.$on 'update-user-data', () ->
              #$scope.service.allow_edit_all = ($scope.user.first_name == 'Coordinator')
        ]
      )

      .state( 'coordinator-mca-table',
        url: "/agenda/{agenda_code}-{link_code}/coord-mca-table/{munged_title}"
        templateUrl: '<%= path_to_asset "live/coord-mca-table.html" %>'
        resolve:
          mca_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('mca-data', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: coord_mca_table
      )

      .state( 'group-mca-table',
        url: "/agenda/{agenda_code}-{link_code}/group-mca-table/{munged_title}"
        templateUrl: '<%= path_to_asset "live/group-mca-table.html" %>'
        resolve:
          mca_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('mca-data', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: group_mca_table
      )

      .state( 'allocate-to-themes',
        url: "/cmp/{component_code}/allocate/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate.html" %>'
        resolve:
          allocation_data: ["LiveAllocateData", "$stateParams", (LiveAllocateData, $stateParams) ->
            LiveAllocateData.allocation_data($stateParams.component_code)
          ]
        controller: live_allocate_controller
      )

      .state( 'allocate-to-themes-agenda',
        url: "/agenda/{agenda_code}-{link_code}/allocate/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate.html" %>'
        resolve:
          allocation_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('allocate', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: live_allocate_controller
      )

      .state('allocate-to-themes-results-agenda',
        url: "/agenda/{agenda_code}-{link_code}/allocate-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate-results.html" %>'
        resolve:
          allocation_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('allocate', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "allocation_data",
          ($scope, allocation_data) ->
                      $scope.allocated_points = allocation_data.allocated_themes
                      $scope.title = allocation_data.title
                      $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state('allocate-to-themes-results',
        url: "/cmp/{component_code}/allocate-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate-results.html" %>'
        resolve:
          allocation_data: ["LiveAllocateData", "$stateParams", (LiveAllocateData, $stateParams) ->
            LiveAllocateData.allocated_points($stateParams.component_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "allocation_data",
          ($scope, allocation_data) ->
            $scope.allocated_points = allocation_data.allocated_points
            $scope.title = allocation_data.title
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )


      .state( 'allocate-themes-worksheet',
        url: "/cmp/{component_code}/allocate-worksheet/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate-worksheet.html" %>'
        resolve:
          worksheet_data: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.participant_worksheet($stateParams.component_code)
          ]
        controller: [ "$scope", "worksheet_data",
          ($scope, worksheet_data) ->
            #$scope.conversations = worksheet_data
            #for conversation in $scope.conversations
            #  conversation.essential_themes = add_letters(conversation.essential_themes)
            essential_themes = add_letters(worksheet_data)
            $scope.conversations = [
              {essential_themes: essential_themes}
            ]
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state( 'select-themes',
        url: "/cmp/{component_code}/select/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select.html" %>'
        resolve:
          selection_data: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.selection_data($stateParams.component_code)
          ]
        controller: live_select_controller
      )

      .state( 'select-themes-agenda',
        url: "/agenda/{agenda_code}-{link_code}/select/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select.html" %>'
        resolve:
          selection_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('select', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: live_select_controller
      )

      .state( 'select-themes-results-agenda',
        url: "/agenda/{agenda_code}-{link_code}/select-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select-results.html" %>'
        resolve:
          selection_votes: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('themes-select-results', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "selection_votes",
          ($scope, selection_votes) ->
            $scope.selection_votes = selection_votes.allocated_themes
            $scope.title = selection_votes.title
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state( 'make-recommendation-count',
        url: "/agenda/{agenda_code}-{link_code}/recommend-count/{munged_title}"
        templateUrl: '<%= path_to_asset "live/record-recommendations-count.html" %>'
        resolve:
          recommendation_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('make-recommendation', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: live_recommend_controller_count
      )

      .state( 'recommendation-results',
        url: "/agenda/{agenda_code}-{link_code}/recommendation-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/recommendation-results.html" %>'
        resolve:
          options: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('recommendation-results', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "options",
          ($scope, options) ->
            $scope.option_votes = options.vote_options
            $scope.title = options.title
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
            $scope.tables = _.range(1, 9)
            $scope.table_votes = options.table_votes
            $scope.table_size = [ 3, 5, 4, 3, 4, 5, 4, 4]
            sums = [0,0,0,0,0,0,0,0]
            diffs = []
            for key, value of $scope.table_votes
              #console.log "#{key}: #{value}"
              group = Number(key.match(/g(\d)/)[1])
              #console.log "group: #{group}"
              sums[ group - 1 ] += value
            #console.log "sums: #{sums}"
            for sum, index in sums
              #console.log "index: #{index} is #{sum}"
              diffs[index] = sum - $scope.table_size[index]
              #console.log "diffs[index]: #{diffs[index]}"
            $scope.sums = sums
            $scope.diffs = diffs
            $scope.comp = (index) ->
              if $scope.diffs[index] > 0 then 1 else if $scope.diffs[index] < 0 then -1 else 0
        ]
      )

      .state( 'select-themes-worksheet',
        url: "/cmp/{component_code}/select-worksheet/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select-worksheet.html" %>'
        resolve:
          worksheet_data: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.participant_worksheet($stateParams.component_code)
          ]
        controller: [ "$scope", "worksheet_data",
          ($scope, worksheet_data) ->
            $scope.conversations = worksheet_data.conversations_list
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state('select-themes-results',
        url: "/cmp/{component_code}/select-results/{conversation_code}/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select-results.html" %>'
        resolve:
          selection_votes: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.selection_votes($stateParams.component_code, $stateParams.conversation_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "selection_votes",
          ($scope, selection_votes) ->
            $scope.selection_votes = selection_votes.votes
            $scope.title = selection_votes.title
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state('report-pdf',
        url: "/agenda/{agenda_code}/report-pdf/{munged_title}"
        templateUrl: '<%= path_to_asset "live/reports/report-pdf.html" %>'
        resolve:
          conversations: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.conversations($stateParams.agenda_code)
          ]
        controller: pdf_report_controller
      )

      .state('report-generator',
        url: "/agenda/{agenda_code}/report-generator/{munged_title}"
        templateUrl: '<%= path_to_asset "live/reports/report-canvas.html" %>'
        resolve:
          conversations: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.conversations($stateParams.agenda_code)
          ]
          report_data_sets: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.report_data_sets($stateParams.agenda_code)
          ]
          reports: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.reports($stateParams.agenda_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: report_generator_controller
      )

      .state('about', {
        url: '/about',
        templateProvider:
          [        '$timeout', ($timeout) ->
            $timeout ->
              "Hello <i>world</i>"
            , 100
          ]
      })

      .state('edit-profile', {
        url: '/edit-profile'
        templateUrl: '<%= path_to_asset "user/edit-profile.html" %>'
      })

])

ce2_app.run( ['$rootScope', '$state', '$stateParams', "$timeout", "$http", "$templateCache", "$modal", "$location",
  ($rootScope,   $state,   $stateParams, $timeout, $http, $templateCache, $modal, $location) ->
    $rootScope.dev_mode = if $location.host().match(/dev$/) then true else false
    $rootScope.$state = $state
    $rootScope.$stateParams = $stateParams
    $rootScope.CSRF = document.querySelectorAll('meta[name="csrf-token"]')[0].getAttribute('content')

    $rootScope.$on '$stateChangeError', (event, toState, toParams, fromState, fromParams, error) ->
      console.log "$stateChangeError tostate: #{toState.url}, fromState: #{fromState.url}"
    $rootScope.$on '$stateChangeStart', (event, toState, toParams, fromState, fromParams) ->
      console.log "$stateChangeStart tostate: #{toState.url}, fromState: #{fromState.url}"
    $rootScope.$on '$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) ->
      console.log "$stateChangeSuccess tostate: #{toState.url}, fromState: #{fromState.url}"

    $rootScope.$on '$viewContentLoaded', (obj) ->
      console.log "$viewContentLoaded"

    $rootScope.initialize_markdown_system = (options) ->
      #console.log "initialize_markdown_system"
      # which will call initialize_markdown_editor
      if Markdown
        initialize_markdown_converter( $timeout, $modal, $rootScope, options )
      else
        $timeout ->
          $rootScope.initialize_markdown_system(options)
        ,300
])

initialize_markdown_converter = ($timeout, $modal, $rootScope, options) ->
  quoteTemplate = null

  disable_editor = if options && options.disable_editor then true else false

  #converter = new Markdown.getSanitizingConverter()
  # Since I am using hooks, I will manually hook in sanitize at the end
  converter = new Markdown.Converter();
  editor = new Markdown.Editor(converter) unless disable_editor

  # Before cooking callbacks
  converter.hooks.chain "preConversion", (text) ->
    #Discourse.Markdown.trigger('beforeCook', { detail: text, opts: opts });
    #return Discourse.Markdown.textResult || text;
    return text

  # Extract quotes so their contents are not passed through markdown.
  converter.hooks.chain "preConversion", (text) ->
    extracted = Markdown.BBCode.extractQuotes(text)
    quoteTemplate = extracted.template;
    return extracted.text;

  converter.hooks.chain "postConversion", (text) ->
    # reapply quotes
    text = quoteTemplate(text) if quoteTemplate
    return Markdown.BBCode.format(text);

  Markdown.upload_dialog = (linkEnteredCallback) ->
    console.log "call the upload dialog"

    modal = $modal.open(
      backdrop: true
      keyboard: true
      backdropClick: true
      templateUrl: '<%= path_to_asset "comment/insert-image-form.html" %>'
      controller: ["$scope", "$timeout", ($scope, $timeout) ->
        debug = false
        $scope.type = 'local'
        $scope.image = {conversation_code: angular.element(document.getElementById('wmd-input')).scope().conversation.code }
        console.log "in modal, $scope.image.conversation_id: #{$scope.image.conversation_id} "

        $scope.show_tab = (str) ->
          if str is 'web'
            console.log "show web tab"
            $scope.type = 'web'
          else
            console.log "show local tab"
            $scope.type = 'local'
        $scope.submit = ->
          console.log "submit url: #{$scope.image.url}"
          linkEnteredCallback($scope.image.url)
          modal.close()

        $scope.upload = ->
          console.log "upload file"
          file_input = document.getElementById('filename-input')
          if file_input.files.length > 0
            file_name = file_input.files[0].name
            console.log "loading file: #{file_name}" if debug
            $scope.progress_bar_message = "<i class='fa fa-spinner fa-spin'></i><span>Loading #{file_name}</span>"
            image_upload_form.submit()

        $scope.iframe_loaded = (el) ->
          # have access to $scope here
          console.log "ceCommentForm: window.iframe_loaded, get the contents" if debug

          content = el.contentDocument.body.innerText
          if content
            attachment = angular.fromJson(content)
            console.log "in_page_url is #{attachment.in_page_url}"
            $timeout ->
              linkEnteredCallback(attachment.in_page_url, {width: attachment.image_width, height: attachment.image_height});
              modal.close()
              $scope.$root.$broadcast('update-new-comment-text')

        $scope.cancel = ->
          modal.close()
      ]
    )
    $rootScope.$$phase || $rootScope.$apply()
  unless disable_editor
    $timeout ->
      $rootScope.$broadcast 'initialize-markdown-editor', {editor: editor}
    , 1000
  $rootScope.converter = converter
  $rootScope.editor = editor unless disable_editor


conversation_controller = [ "$scope", "conversation", "FayeService", "$timeout", "ConversationData", "$modal", "RealtimeService",
  ($scope, conversation, FayeService, $timeout, ConversationData, $modal, RealtimeService) ->
    console.log "In conversation state controller at bottom"
    $scope.conversation = conversation
    $scope.$root.timestamp = conversation.current_timestamp

    $scope.name = 'ceConversation'
    # the data was resolved and attached to scope in the state definition
    
    $timeout ->
      if $scope.conversation.role == 'conversation_admin' && !$scope.conversation.published
        $scope.conversation.wizard_mode = true

      if $scope.conversation.can('show_participants')
        ConversationData.load_stats($scope.conversation.code).then(
          (response)->
            for key of response.data
              $scope.conversation[key] = response.data[key]
          )
    , 1000

    $scope.show_comment_form = (action) ->
      $scope.$root.$broadcast 'open-comment-form', {action: action}

    FayeService.subscribe( "/#{$scope.conversation.code}" )

    # register the listeners for the realtime updates
    $scope.$on 'ConversationComment_update', (event, data) ->
      #console.log "received broadcast ConversationComment_update"
      [original_rec, updated_rec] = RealtimeService.process_update($scope.conversation.conversation_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
        if updated_rec.purpose isnt original_rec.purpose
          console.log "update the graph to show new labels"
          element = angular.element(document.getElementById("com-#{updated_rec.id}"))
          canvas = element.find('canvas')
          canvas.scope().redraw_rating_graph( element )

    $scope.$on 'SummaryComment_update', (event, data) ->
      #console.log "received broadcast SummaryComment_update"
      [original_rec, updated_rec] = RealtimeService.process_update($scope.conversation.summary_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user

    $scope.$on 'RatingsCache_update', (event, data) ->
      #console.log "received broadcast RatingsCache_update"
      data = data.data
      item_array = switch data.type
        when "SummaryComment" then $scope.conversation.summary_comments
        when "ConversationComment" then $scope.conversation.conversation_comments
      if item_array
        for rec in item_array
          if rec.id == data.id
            comment = rec
            break
        if comment
          #console.log "Update the ratings on comment id: #{comment.id}"
          comment.number_of_votes = data.number_of_votes
          comment.ratings_cache = data.ratings_cache
          $scope.$$phase || $scope.$apply()


    $scope.$on 'CallToActionComment_update', (event, data) ->
      #console.log "received broadcast CallToActionComment_update"
      if not $scope.conversation.call_to_action_comment
        # is user the curator? must be as conversation cannot be pusblished without a cta
        $scope.conversation.call_to_action_comment = { editable_by_user: true }
      editable_by_user = $scope.conversation.call_to_action_comment.editable_by_user
      $scope.conversation.call_to_action_comment[prop] = data.data[prop] for prop of data.data when not prop.match(/^\$/)
      $scope.conversation.call_to_action_comment.editable_by_user = editable_by_user
      $scope.$$phase || $scope.$apply()

    $scope.ConversationCommentLength = 1500
    $scope.SummaryCommentLength = 0

    # register a listener for summary_comments ordered ids
    $scope.$on 'Conversation_update', (event, data) ->
      #console.log "received broadcast Conversation_update"

      # make sure it is the correct conversation_id
      # $scope.conversation.id
      if Number(data.data.conversation_id) is Number($scope.conversation.id)
        ordered_ids = data.data.ordered_ids
        # reorder $scope.conversation.summary_comments according to these ids
        if ordered_ids
          # update the order_id for the comments
          for comment in $scope.conversation.summary_comments
            comment.order_id = ordered_ids[comment.id]
          #resort the summary_comments according to order_id
          $scope.conversation.summary_comments.sort((a, b) -> return a.order_id > b.order_id )
        $scope.$$phase || $scope.$apply()

    $scope.edit_title = ->
      #console.log "edit the title"
      $scope.title_temp = $scope.conversation.title
      $scope.conversation.edit_title = true
      $scope.$root.$broadcast "user-event-notification", { action: 'open title edit'}

    $scope.save_title = ->
      ConversationData.save_title($scope.conversation.code, $scope.conversation.title).then (response) ->
        #console.log "return from save_title"
        $scope.conversation.title = response.data.text
        $scope.conversation.edit_title = false
        $scope.$root.$broadcast "user-event-notification", { action: 'save title edit'}

    $scope.cancel_title_edit = ->
      $scope.conversation.title = $scope.title_temp
      $scope.conversation.edit_title = false

    $scope.$on 'Publish conversation', (event, data) ->
      #console.log "publishConversation with code: #{data.conversation_code}"
      button_scope = data.button_scope
      button_scope.form_submit_status = 'Publishing <i class="fa fa-spinner fa-spin"></i>'
      ConversationData.publish_conversation(data.conversation_code).then (response)->
        #console.log "ConversationData.publish_conversation received response"
        button_scope.form_submit_status = 'Published'
        $timeout ->
          #button_scope.form_submit_status = 'Publish'
          $scope.$root.$broadcast "user-event-notification", { action: 'conversation published'}
        ,800


]

ce2_app.controller 'ActivityMonitorController', ($scope, User, $dialog) ->
  $scope.name = 'ActivityMonitor'
  $scope.$on 'user-clicked-dead-link', (event, data) ->
    console.log "'user-clicked-dead-link' for action: #{data.action}"
    #data.conversation_code = $scope.
    #{ action: 'Share'}
    title = "Sorry, this feature isn't quite ready yet"
    msg = "We are working on this feature now. Please click the \"Contact Us\" link on the right side of the page to share your ideas about how to make CivicEvolution better!"
    btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
    $dialog.messageBox(title, msg, btns)

    User.send_activity_report(data).then(
      (response)->
        #console.log "send_activity_report was successful"
      ,
      (reason) ->
        console.log "send_activity_report failed: #{reason.data.error}"
    )


small_group_deliberation_theme_controller = [ "$scope", "theming_data", "RealtimeService", "$timeout", "$dialog", "ThemeData", "FayeService",
  ($scope, theming_data, RealtimeService, $timeout, $dialog, ThemeData, FayeService) ->
    #console.log "In conversation state controller at bottom"

    if theming_data.data_set_state == 'sgd-theme'
      theming_data = process_team_theming_data(theming_data)
    else if theming_data.data_set_state == 'coord-theme'
      theming_data = process_coordinator_theming_data(theming_data)
      $scope.$on 'AutoTaggedTableComment_update', (event, data) ->
        update_table_comment_parents(event,data)
        
    $timeout ->
      $scope.$root.$broadcast 'update-user-data'
    , 1000

    $scope.conversation = theming_data
    $scope.$root.timestamp = theming_data.current_timestamp
    $scope.conversation.show_comment_type = if $scope.conversation.details?.comment_types then true else false
    $scope.purpose_filter = null

    $scope.name = 'ceConversationTheme'

    $scope.conversation.filters = $scope.conversation.details?.comment_types

    $timeout ->
      $scope.conversation.filter_mode = 'themes'
      $scope.change_themer($scope.user.name)
    , 500

    if FayeService.conversation_code
      FayeService.unsubscribe( "/#{FayeService.conversation_code}" )

    FayeService.conversation_code = $scope.conversation.code
    FayeService.subscribe( "/#{$scope.conversation.code}" )


    $scope.$on 'TableComment_update', (event, data) ->
      table_number = Number(data.data.table_number)
      return unless _.contains($scope.conversation.assigned_tables, table_number)

      data.data.parent_theme_ids = [] unless data.data.parent_theme_ids
      data.data.current_theme_ids = [] unless data.data.current_theme_ids
      [original_rec, updated_rec] = RealtimeService.process_update($scope.conversation.table_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
      # Does this id exist in $scope.conversation.comments?
      $scope.conversation.comments[updated_rec.id] = updated_rec
      $timeout ->
        $scope.$root.$broadcast 'calculate-tag-counts'
        $scope.$root.$broadcast 'update-comment-tags', updated_rec
        refilter_table_comments()
      , 500

    # register a listener for theme ordered ids
    $scope.$on 'Conversation_update', (event, data) ->
      # make sure it is the correct conversation_id
      if data.data.conversation_code is $scope.conversation.code
        ordered_ids = data.data.ordered_ids
        # reorder $scope.conversation.summary_comments according to these ids
        if ordered_ids
          # update the order_id for the comments
          for comment in $scope.conversation.theme_comments
            comment.order_id = ordered_ids[comment.id]
          #resort the summary_comments according to order_id
          $scope.conversation.theme_comments.sort((a, b) -> return a.order_id > b.order_id )
        $scope.$$phase || $scope.$apply()

    $scope.change_filter = (filter) ->
      console.log "filter on #{filter}"
      $scope.conversation.purpose_filter = filter
      refilter_table_comments()

    $scope.change_themer = (name) ->
      console.log "change theme page to show themer: #{name}"
      $scope.conversation.active_themer_name = name

      $scope.conversation.theme_themes_mode = if name?.match(/Coordinator/) then true else false

      $scope.conversation.theme_comments = (comment for comment in $scope.conversation.all_theme_comments when comment.name == $scope.conversation.active_themer_name)
      $scope.conversation.theme_tag_hash = {}
      theme_ids = []
      for comment in $scope.conversation.theme_comments
        $scope.conversation.theme_tag_hash[comment.id] = comment.tag_name
        theme_ids.push(comment.id)
      for comment in $scope.conversation.table_comments
        comment.parked = false
        comment.current_theme_ids = _.intersection(comment.parent_theme_ids, theme_ids)
      for comment in ($scope.conversation.team_theme_comments || [])
        comment.parked = false
        comment.current_theme_ids = angular.copy(comment.parent_theme_ids)
      ThemeData.parked_comments($scope.conversation.code).then(
        (response)->
          $scope.conversation.parked_comments = response.data
          parked_comment_ids = []
          for pc in response.data
            if name == "#{pc.first_name} #{pc.last_name}"
              parked_comment_ids = pc.parked_ids
          $scope.conversation.parked_comment_ids = parked_comment_ids
          console.log "$scope.conversation.parked_comment_ids: #{$scope.conversation.parked_comment_ids}"
          for id in parked_comment_ids
            $scope.conversation.comments[id]?.parked = true
          $scope.$root.$broadcast 'update-comment-tags'
          $scope.$root.$broadcast 'calculate-tag-counts'
      )
      $scope.conversation.filter_mode = "themes"
      $scope.conversation.purpose_filter = null
      refilter_table_comments()

    update_table_comment_parents = (event, data) ->
      #data.data {table_comment_id: 8906, old_theme_id: 1234, new_theme_id: 8904, id: "8"}
      # get the table comment by id
      table_comment_id = data.data.table_comment_id
      old_theme_id = data.data.old_theme_id
      new_theme_id = data.data.new_theme_id
      #console.log "update_table_comment_parents table_comment_id: #{table_comment_id}, old_theme_id: #{old_theme_id}, new_theme_id: #{new_theme_id}"
      table_comment = $scope.conversation.comments[table_comment_id]
      if !table_comment
        $timeout ->
          update_table_comment_parents(event, data)
        ,2000
        return
      if old_theme_id
        #remove from a theme
        theme = $scope.conversation.comments[old_theme_id]
        table_comment.parent_theme_ids = _.without(table_comment.parent_theme_ids, old_theme_id)
        table_comment.current_theme_ids = _.without(table_comment.current_theme_ids, old_theme_id)
        theme.ordered_child_ids = _.without(theme.ordered_child_ids, table_comment.id)
      if new_theme_id
        #Add to a theme
        theme = $scope.conversation.comments[new_theme_id]
        table_comment.parent_theme_ids.push new_theme_id
        table_comment.current_theme_ids.push new_theme_id
        theme.ordered_child_ids.push table_comment.id
      $timeout ->
        refilter_table_comments()
        $scope.$root.$broadcast 'calculate-tag-counts'
        $scope.$root.$broadcast 'update-comment-tags', table_comment

    $scope.filter_table_comments = (mode, id=null) ->
      #console.log "filter_table_comments mode: #{mode}, id: #{id}"
      $scope.conversation.filter_mode = mode
      $scope.conversation.filter_id = id
      $scope.conversation.purpose_filter = null
      refilter_table_comments()

    refilter_table_comments = () ->
      mode = $scope.conversation.filter_mode
      id = $scope.conversation.filter_id
      console.log "refilter_table_comments mode: #{mode}, id: #{id}"
      switch
        when mode is 'all_table_comments'
          $scope.conversation.filtered_comments = $scope.conversation.table_comments
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'untagged_comments'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.table_comments when comment.tag_bools && comment.tag_bools[0] && !comment.parked )
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'parked_comments'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.table_comments when comment.parked)
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'all_theme_comments'
          $scope.conversation.filtered_comments = $scope.conversation.team_theme_comments
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'untagged_themes'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.team_theme_comments when comment.tag_bools && comment.tag_bools[0] && !comment.parked )
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'parked_themes'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.team_theme_comments when comment.parked)
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'themes'
          if $scope.conversation.theme_comments?.length > 0
            $scope.conversation.filtered_comments = $scope.conversation.theme_comments.sort((a,b)-> a.order_id - b.order_id)
            add_letters($scope.conversation.theme_comments)
          else
            $scope.conversation.filtered_comments = []
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'theme'
          $scope.conversation.current_theme = _.findWhere($scope.conversation.theme_comments, {id: id})
          $scope.conversation.filtered_comments = []
          for id in $scope.conversation.current_theme.ordered_child_ids
            comment = $scope.conversation.comments[id]
            $scope.conversation.filtered_comments.push comment unless not comment
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

        when mode is 'table'
          $scope.conversation.filtered_comments = ( comment for comment in $scope.conversation.table_comments when Number(comment.table_number) is id)
          $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

      if $scope.conversation.purpose_filter
        console.log "apply purpose filter #{$scope.conversation.purpose_filter}"
        $scope.conversation.filtered_comments = ( comment for comment in $scope.conversation.filtered_comments when comment.purpose == $scope.conversation.purpose_filter )
        $scope.conversation.filtered_comments = make_unique($scope.conversation.filtered_comments)

    make_unique = (myArray) ->
      _.uniq(myArray, (item) ->
        return item.id;
        )

    $scope.$on 'ThemeComment_update', (event, data) ->
      #console.log "received broadcast ThemeComment_update"
      [original_rec, updated_rec] = RealtimeService.process_update($scope.conversation.all_theme_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
      if updated_rec.name.match(/team/i) && not original_rec && $scope.conversation.team_theme_comments
        new_theme_team = $scope.conversation.all_theme_comments[ $scope.conversation.all_theme_comments.length-1 ]
        new_theme_team.current_theme_ids = []
        new_theme_team.ordered_child_ids = []
        new_theme_team.parent_theme_ids = []
        new_theme_team.parked = false
        new_theme_team.show_tag_widget = true
        $scope.conversation.team_theme_comments.push( new_theme_team )

      $scope.conversation.comments[updated_rec.id] = updated_rec unless not updated_rec
      $scope.conversation.theme_comments = (comment for comment in $scope.conversation.all_theme_comments when comment.name == $scope.conversation.active_themer_name)
      $scope.conversation.theme_comments = add_letters($scope.conversation.theme_comments)

      themers = {}
      for comment in $scope.conversation.all_theme_comments
        if themers[comment.name]
          themers[comment.name]['cnt'] += 1
        else
          themers[comment.name] = {cnt: 1}

      tag_hash = {}
      for comment in $scope.conversation.theme_comments
        tag_hash[comment.id] = comment.tag_name
        if comment.text.match(/\[quote/)
          comment.popover = comment.text.split('[quot')[0]
        else
          comment.popover = comment.text

      $scope.conversation.theme_tag_hash = tag_hash
      $scope.conversation.themers = themers
      # Update the visible tag widgets
      $scope.$root.$broadcast 'update-comment-tags'
      $scope.$root.$broadcast 'calculate-tag-counts'
      $timeout ->
        refilter_table_comments()
      ,200

    $scope.edit = (action) ->
      #console.log "Edit with action: #{action} for  #{$scope.conversation.current_theme.tag_name}"
      $scope.$root.$broadcast 'open-comment-form', {action: action, comment: $scope.conversation.current_theme}

    $scope.$on 'text-select-add-example', (event, sel) ->
      #console.log "received broadcast message text-select-add-example"
      if sel.quote_data
        example_data = sel.quote_data
        sel.text = sel.text.replace(/^Table \d+:\s*/,'')
      else
        example_data =
          quote_type: "example"
          id: sel.comment.id
          name: sel.comment.name
          purpose: sel.comment.purpose
      example_insert = "[quote=#{ angular.toJson(example_data)}]#{sel.text}[/quote]"
      #console.log "Add this example to textarea: #{example_insert}"
      $scope.$root.$broadcast 'open-comment-form', {action: 'add-example-from-selected-text', quote_insert: example_insert, comment: $scope.conversation.current_theme, append_to_existing: true}

    $scope.$on 'text-select-add-theme', (event, sel) ->
      #console.log "received broadcast message text-select-add-example"
      if sel.quote_data
        sel.text = sel.text.replace(/^Table \d+:\s*/,'')
      #console.log "Add this example to textarea: #{example_insert}"
      $scope.$root.$broadcast 'open-comment-form', {action: 'add-example-from-selected-text', quote_insert: sel.text, comment: $scope.conversation.current_theme, append_to_existing: true}

    $scope.$on 'update-comment-tags', (event,comment) ->
      comments = if comment then [comment] else if $scope.conversation.theme_themes_mode then $scope.conversation.team_theme_comments else $scope.conversation.table_comments
      for comment in comments
        comment.tag_bools = new class then constructor: ->
          if comment.current_theme_ids.length is 0
            @[0] = true
          else
            @[id] = true for id in comment.current_theme_ids
        tags = ($scope.conversation.theme_tag_hash[id] for id in comment.current_theme_ids)
        tags.push 'Parked' if comment.parked
        comment.tags = tags.join(', ') || if $scope.conversation.theme_themes_mode then 'Tag this theme' else 'Tag this comment'

      # redo do tagging if theme mode so I can tag the table comments
      comments = if $scope.conversation.theme_themes_mode then $scope.conversation.table_comments else []
      for comment in comments
        comment.tag_bools = new class then constructor: ->
          if comment.current_theme_ids.length is 0
            @[0] = true
          else
            @[id] = true for id in comment.current_theme_ids
        tags = ($scope.conversation.theme_tag_hash[id] for id in comment.current_theme_ids)
        tags.push 'Parked' if comment.parked
        comment.tags = tags.join(', ') || if $scope.conversation.theme_themes_mode then 'Tag this theme' else 'Tag this comment'

    $scope.$on 'calculate-tag-counts', ->
      #console.log "calculate-tag-counts"
      counts =
        themes: 0
        all_comments: 0
        untagged_comments: 0
        parked_comments: 0
        all_themes: 0
        untagged_themes: 0
        parked_themes: 0
        table1: 0
        table2: 0
        table3: 0
        table4: 0
        table5: 0
        table6: 0
        table7: 0
        table8: 0

      for theme in $scope.conversation.theme_comments
        counts['themes'] += 1
        counts[theme.id] = 0

      #comments = if $scope.conversation.theme_themes_mode then $scope.conversation.team_theme_comments else $scope.conversation.table_comments
      comments = $scope.conversation.table_comments
      for comment in comments
        counts['all_comments'] += 1
        counts["table#{comment.table_number}"] += 1
        if comment.parked
          counts['parked_comments'] += 1
        if comment.current_theme_ids && comment.current_theme_ids.length == 0 && !comment.parked
          counts['untagged_comments'] += 1
        else
          for id in comment.current_theme_ids
            counts[id] += 1

      comments = if $scope.conversation.theme_themes_mode then $scope.conversation.team_theme_comments else []
      for comment in comments
        counts['all_themes'] += 1
        if comment.parked
          counts['parked_themes'] += 1
        if comment.current_theme_ids && comment.current_theme_ids.length == 0 && !comment.parked
          counts['untagged_themes'] += 1
        else
          for id in comment.current_theme_ids
            counts[id] += 1

      for theme in $scope.conversation.theme_comments
        theme.comments = counts[theme.id]

      $scope.conversation.comment_counts = counts
    
    $scope.$on 'theme-comment-delete', (event,data) ->
      theme = data.comment
      console.log "delete this theme comment: #{theme.tag_name}"
      if theme.comments > 0
        btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
        $dialog.messageBox('Sorry', "Theme can only be deleted if it has no comments", btns)
        $scope.$root.$$phase || $scope.$root.$apply()
      else
        console.log "Delete this theme"
        ThemeData.delete(theme).then(
          (response)->
            console.log "theme was deleted successfully"
            if response.data.type
              $scope.$root.$broadcast "#{response.data.type}_update", {
                action: 'delete'
                class: response.data.type
                data: response.data
                updated_at: new Date().getTime()
                source: "theme-comment-delete"
              }
            $timeout ->
              $scope.conversation.filter_mode = 'themes'
              refilter_table_comments()

        ,
        (reason) ->
          console.log "theme delete failed"
          title = 'Sorry'
          msg = "This theme was not deleted: #{reason.data.error}"
          btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
          $dialog.messageBox(title, msg, btns)
        )

    $scope.$on 'theme-comment-hide', (event,data) ->
      theme = data.comment
      console.log "hide this theme comment: #{theme.tag_name}"

      ThemeData.hide(theme).then (response)->
        console.log "theme was hidden successfully"
        if response.data.type
          $scope.$root.$broadcast "#{response.data.type}_update", {
            action: 'hide'
            class: response.data.type
            data: response.data
            updated_at: new Date().getTime()
            source: "theme-comment-hide"
          }
        $timeout ->
          $scope.conversation.filter_mode = 'themes'
          refilter_table_comments()

    $scope.$on 'theme-comment-show', (event,data) ->
      theme = data.comment
      console.log "show this theme comment: #{theme.tag_name}"

      ThemeData.show(theme).then (response)->
        console.log "theme was hidden successfully"
        if response.data.type
          $scope.$root.$broadcast "#{response.data.type}_update", {
            action: 'show'
            class: response.data.type
            data: response.data
            updated_at: new Date().getTime()
            source: "theme-comment-show"
          }
        $timeout ->
          $scope.conversation.filter_mode = 'themes'
          refilter_table_comments()

    $scope.$on 'show-theme-page', (event, data) ->
      theme = data.comment
      #console.log "show theme page for theme: #{theme.tag_name}"
      $scope.conversation.filter_mode = 'theme'
      $scope.conversation.filter_id = theme.id
      refilter_table_comments()


    $scope.$on 'update-user-data', () ->
      user_name = "#{$scope.user.first_name} #{$scope.user.last_name}"
      if $scope.conversation.can('edit_theme_comment') && not $scope.conversation.themers[ user_name ]
        $scope.conversation.themers[ user_name ] = {cnt: 0}
      if $scope.user.first_name == "Coordinator"
        table_ids = []
        for id of $scope.conversation.theme_map
          table_ids = table_ids.concat( $scope.conversation.theme_map[id] )
        $scope.conversation.assigned_tables = _.uniq(table_ids)
      else
        $scope.conversation.assigned_tables = $scope.conversation.theme_map[ $scope.user.last_name ]
      $scope.change_themer(user_name)
      console.log "$scope.conversation.assigned_tables: #{$scope.conversation.assigned_tables}"
]

process_small_group_deliberation_data = (data) ->
  sorted_table_comments = data.table_comments.sort((a,b)-> a.id - b.id)
  conversations_list: data.conversations_list
  table_comments: sorted_table_comments
  title: data.title
  code: data.code
  current_timestamp: data.current_timestamp
  privacy: data.privacy
  abilities: data.role.abilities
  can: (action) ->
    _.indexOf(this.abilities, action ) > -1


process_team_theming_data = (data) ->
  all_theme_comments = data.theme_comments
  table_comments = data.table_comments.sort((a,b)-> a.id - b.id)
  comments = {}
  for comment in table_comments
    comments[comment.id] = comment

  tag_hash = {}
  themers = {}
  for comment in all_theme_comments
    comments[comment.id] = comment
    tag_hash[comment.id] = comment.tag_name
    if comment.text.match(/\[quote/)
      comment.popover = comment.text.split('[quot')[0]
    else
      comment.popover = comment.text
    if themers[comment.name]
      themers[comment.name]['cnt'] += 1
    else
      themers[comment.name] = {cnt: 1}

  comments: comments
  table_comments: table_comments.sort((a,b)-> a.id - b.id)
  all_theme_comments: all_theme_comments.sort((a,b)-> a.id - b.id)
  theme_tag_hash: tag_hash
  themers: themers
  title: data.title
  code: data.code
  current_timestamp: data.current_timestamp
  privacy: data.privacy
  details: data.details
  abilities: data.role.abilities
  theme_map: data.theme_map
  can: (action) ->
    _.indexOf(this.abilities, action ) > -1

process_coordinator_theming_data = (data) ->
  table_comments = data.table_comments.sort((a,b)-> a.id - b.id)
  comments = {}
  for comment in table_comments
    comments[comment.id] = comment
  coordinator_theme_comments = data.coordinator_theme_comments
  team_theme_comments = data.theme_comments
  all_theme_comments = []
  for comment in coordinator_theme_comments
    comments[comment.id] = comment
    all_theme_comments.push(comment)
  for comment in team_theme_comments
    comments[comment.id] = comment
    all_theme_comments.push(comment)
    comment.show_tag_widget = true

  tag_hash = {}
  themers = {}
  for comment in all_theme_comments
    tag_hash[comment.id] = comment.tag_name
    if comment.text.match(/\[quote/)
      comment.popover = comment.text.split('[quot')[0]
    else
      comment.popover = comment.text
    if themers[comment.name]
      themers[comment.name]['cnt'] += 1
    else
      themers[comment.name] = {cnt: 1}

  comments: comments
  table_comments: table_comments.sort((a,b)-> a.id - b.id)
  all_theme_comments: all_theme_comments.sort((a,b)-> a.id - b.id)
  coordinator_theme_comments: add_letters(coordinator_theme_comments.sort((a,b)-> a.order_id - b.order_id))
  team_theme_comments: team_theme_comments.sort((a,b)-> a.id - b.id)
  theme_tag_hash: tag_hash
  themers: themers
  title: data.title
  code: data.code
  current_timestamp: data.current_timestamp
  privacy: data.privacy
  details: data.details
  abilities: data.role.abilities
  theme_map: data.theme_map
  can: (action) ->
    _.indexOf(this.abilities, action ) > -1

conversation_group_controller = [ "$scope", "small_group_deliberation_data", "RealtimeService", "$timeout", "$modal",
  ($scope, small_group_deliberation_data, RealtimeService, $timeout, $modal) ->
    console.log "In conversation state controller at bottom"

    if small_group_deliberation_data.data_set_state == 'sgd-theme'
      small_group_deliberation_data = process_small_group_deliberation_data(small_group_deliberation_data)


    $scope.conversation = small_group_deliberation_data
    $scope.conversations = small_group_deliberation_data.conversations_list
    $scope.$root.timestamp = small_group_deliberation_data.current_timestamp
    $scope.add_comment_button_label = $scope.conversation.details?.add_comment_button_label || 'Add a new comment'
    $scope.conversation.show_comment_type = if $scope.conversation.details?.comment_types then true else false

    $scope.name = 'ceConversationGroup'

    $scope.preview_template = "<%= path_to_asset "live/group-vote-insert.html" %>"

    $timeout ->
      $scope.conversation.filter_mode = 'table'
      $scope.conversation.filter_id = Number($scope.$root.user.last_name)
      refilter_table_comments()
      #$scope.$root.$broadcast 'calculate-tag-counts'
    , 500

    refilter_table_comments = () ->
      mode = $scope.conversation.filter_mode
      id = $scope.conversation.filter_id
      console.log "refilter_table_comments mode: #{mode}, id: #{id}"
      switch
        when mode is 'table'
          $scope.conversation.filtered_comments = ( comment for comment in $scope.conversation.table_comments when Number(comment.table_number) is id)
        else
          console.log "XXXXXXXXXXX undefined filter mode: #{mode}"

    $scope.$on 'TableComment_update', (event, data) ->
      [original_rec, updated_rec] = RealtimeService.process_update($scope.conversation.table_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
      if data.action is 'save'
        refilter_table_comments()
]

live_select_controller = [ "$scope", "selection_data", "LiveSelectData", "$timeout", "$dialog",
  ($scope, selection_data, LiveSelectData, $timeout, $dialog) ->

    $scope.conversations_list = selection_data.conversations_list
    $scope.agenda_code = selection_data.agenda_code
    $scope.conversations_list = [ selection_data ]
    $scope.all_selection_themes = []
    for conversation in $scope.conversations_list
      for theme in conversation.final_themes
        $scope.all_selection_themes.push(theme)


    set_current_conversation = (arg) ->
      index = switch arg
        when 'first' then 0
        when 'next' then $scope.conversation_ptr + 1
        when 'back' then $scope.conversation_ptr - 1
      index = 0 if index < 0
      index = $scope.conversations_list.length -1 if index > $scope.conversations_list.length - 1

      $scope.conversation_ptr = index
      $scope.current_selection_themes = $scope.conversations_list[index].final_themes
      $scope.title = $scope.conversations_list[index].title
      $scope.code = $scope.conversations_list[index].code

      $scope.show_next = if $scope.conversations_list.length > $scope.conversation_ptr + 1 then true else false
      $scope.show_back = if $scope.conversation_ptr >  0 then true else false

    set_current_conversation('first')
    $scope.participant_votes = selection_data.votes
    $scope.number_of_voters = (k for own k of $scope.participant_votes).length
    $scope.voter_id = Number($scope.number_of_voters) + 1
    for at in $scope.all_selection_themes
      at.value = false
    $scope.combined_votes = {}
    $timeout ->
      update_combined_votes()

    $scope.out_of_range = false

    $scope.count_selected = ->
      cnt = 0
      for a in $scope.current_selection_themes
        if a.selected
          cnt += 1
      $scope.out_of_range = if 0 < cnt < 4 then false else true
      cnt

    $scope.next = ->
      set_current_conversation('next')

    $scope.back = ->
      set_current_conversation('back')

    $scope.save = (confirmed_edit=false) ->
      if !confirmed_edit && $scope.edit_vote_mode
        msg = "Are you sure you want to update this voter's selection?"
        btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
        cb = (result) ->
          if result is "yes"
            $scope.edit_confirmed = true
            $scope.save(true)
        $dialog.messageBox("Confirm", msg, btns, cb)
        return false
      if $scope.count_selected() == 0 && !$scope.edit_vote_mode
        title = "Warning"
        msg = "You must enter points before submitting"
        btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
        $dialog.messageBox(title, msg, btns)
        return

      selected_ids = ( {theme_id: at.id} for at in $scope.all_selection_themes when at.selected)

      data =
        voter_id: $scope.voter_id
        selected_ids: selected_ids

      LiveSelectData.record_selection($scope.agenda_code, data).then(
        (response)->
          $scope.participant_votes[$scope.voter_id] = selected_ids
          for at in $scope.all_selection_themes
            at.selected = false
          update_combined_votes()
          $scope.voter_id = Number($scope.number_of_voters) + 1
          $scope.edit_vote_mode = false
          set_current_conversation('first')
      )

    $scope.edit_vote = (voter_id) ->
      $scope.voter_id = voter_id
      votes = {}
      for vote in $scope.participant_votes[voter_id]
        votes[vote.theme_id] = true
      for at in $scope.all_selection_themes
        at.selected = votes[at.id] || false
      $scope.edit_vote_mode = true

    $scope.start_new_vote = ->
      $scope.voter_id = Number((k for own k of $scope.participant_votes).length) + 1
      for at in $scope.all_selection_themes
        at.selected = false
      $scope.edit_vote_mode = false

    update_combined_votes = ->
      $scope.number_of_voters = (k for own k of $scope.participant_votes).length
      $scope.conversations_combined_votes = []
      for conversation in $scope.conversations_list
        combined_votes = {}
        total_votes = 0
        totals_array = []
        for theme in conversation.final_themes
          #combined_votes[theme.id] = [ 0, 0, 0, 0, 0, 0, 0, 0 ]
          combined_votes[theme.id] = new Array( $scope.number_of_voters + 1).join("x").split("x").map(-> return ' ' )
        for voter of $scope.participant_votes
          voter_total = 0
          votes = $scope.participant_votes[voter]
          #console.log "votes: #{votes}"
          for vote in votes  # theme_id in [theme_ids]
            if combined_votes[vote.theme_id]
              combined_votes[vote.theme_id][ voter ] = 1
              voter_total += Number(1)
              total_votes += Number(1)
          totals_array.push( [voter_total] )
        totals_array.push( [total_votes] )

        pcent_total = 0
        for theme_id of combined_votes
          #console.log "theme_id: #{theme_id}"
          rec = combined_votes[theme_id]
          #rec.splice(0,1)
          sum = _.reduce(rec, ( (memo, num) -> Number(memo) + num;), 0)
          rec.splice(0,1)
          rec.push(sum)
          pcent = Math.round(sum/total_votes*100)
          pcent_total += pcent
          rec.push(pcent)
          #combined_votes[theme_id] = ([val] for val in rec)
          combined_votes[theme_id] = ([val] for val in rec)
        totals_array.push( [pcent_total] )

        combined_votes['totals'] = totals_array
        #console.log "total_votes: #{total_votes}"
        $scope.conversations_combined_votes.push( { title: conversation.title, final_themes: conversation.final_themes, combined_votes: combined_votes} )



]

live_recommend_controller_count = [ "$scope", "recommendation_data", "LiveRecommendData", "$timeout", "$dialog",
  ($scope, recommendation_data, LiveRecommendData, $timeout, $dialog) ->

    $scope.agenda_code = recommendation_data.agenda_code
    $scope.conversation = recommendation_data
    $scope.all_selection_themes = []

    $scope.recommendation = {}
    $scope.vote_status = "Your current vote"
    $scope.btn_lbl = "Save vote"

    $scope.vote_options = ( { text: option, key: index + 1} for option, index in $scope.conversation.vote_options )
    for option in $scope.vote_options
      option.vote_count = $scope.conversation.votes[option.key] || 0

    $scope.save = (confirmed_edit=false) ->
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      data = ( {vote_key: option.key, num_votes: option.vote_count} for option in $scope.vote_options)
      console.log "Save data: #{JSON.stringify(data)} for conversation code: #{$scope.conversation.code}"
      LiveRecommendData.record_recommendation($scope.conversation.code, data).then(
        (response)->
          $scope.vote_status = 'Vote saved'
          $scope.btn_lbl = "Update vote"
          btn.removeClass('busy')
      )
]

live_allocate_controller = [ "$scope", "allocation_data", "LiveAllocateData", "$dialog", "$timeout",
  ($scope, allocation_data, LiveAllocateData, $dialog, $timeout) ->
    $scope.allocation_themes = allocation_data.allocation_themes
    for theme in $scope.allocation_themes
      theme.text = theme.text.split(/\n/)[0]

    $scope.name = 'live_allocate_controller'
    $scope.code = allocation_data.code
    $scope.participant_votes = allocation_data.votes
    $scope.number_of_voters = (k for own k of $scope.participant_votes).length
    $scope.voter_id = Number($scope.number_of_voters) + 1
    for at in $scope.allocation_themes
      at.value = 0
    $scope.combined_votes = {}
    $timeout ->
      update_combined_votes()

    $scope.over100 = false

    $scope.total = ->
      tot = 0
      for a in $scope.allocation_themes
        num = a.value
        if num == null || isNaN(num)
          num = 0
        else
          num = Number(a.value)
          if num < 0
            num = 0
          if num > 30
            num = 30
          tot += num
        a.value = num
      if tot > 100
        $scope.over100 = true
      else
        $scope.over100 = false

      tot

    $scope.save = (confirmed_edit=false) ->
      if !confirmed_edit && $scope.edit_vote_mode
        msg = "Are you sure you want to update this voter's allocation?"
        btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
        cb = (result) ->
          if result is "yes"
            $scope.edit_confirmed = true
            $scope.save(true)
        $dialog.messageBox("Confirm", msg, btns, cb)
        return false
      if $scope.total() == 0 && !$scope.edit_vote_mode
        title = "Warning"
        msg = "You must enter points before submitting"
        btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
        $dialog.messageBox(title, msg, btns)
        return

      vote_points = ( {theme_id: at.id, points: at.value} for at in $scope.allocation_themes)
      data =
        voter_id: $scope.voter_id
        vote_points: vote_points

      LiveAllocateData.record_allocation($scope.code, data).then(
        (response)->
          $scope.participant_votes[$scope.voter_id] = vote_points
          for at in $scope.allocation_themes
            at.value = 0
          update_combined_votes()
          $scope.voter_id = Number($scope.number_of_voters) + 1
          $scope.edit_vote_mode = false
      )

    $scope.edit_vote = (voter_id) ->
      $scope.voter_id = voter_id
      votes = {}
      for vote in $scope.participant_votes[voter_id]
        votes[vote.theme_id] = vote.points
      for at in $scope.allocation_themes
        at.value = votes[at.id] || 0
      $scope.edit_vote_mode = true

    $scope.start_new_vote = ->
      $scope.voter_id = Number((k for own k of $scope.participant_votes).length) + 1
      for at in $scope.allocation_themes
        at.value = ""
      $scope.edit_vote_mode = false

    update_combined_votes = ->
      combined_votes = {}
      total_votes = 0
      totals_array = []
      for theme in $scope.allocation_themes
        combined_votes[theme.id] = [ 0 ]
      for voter of $scope.participant_votes
        voter_total = 0
        votes = $scope.participant_votes[voter]
        for vote in votes
          combined_votes[vote.theme_id][ voter ] = vote.points
          voter_total += vote.points
          total_votes += vote.points
        totals_array.push( [voter_total] )
      totals_array.push( [total_votes] )

      pcent_total = 0
      for theme_id of combined_votes
        console.log "theme_id: #{theme_id}"
        rec = combined_votes[theme_id]
        rec.splice(0,1)
        sum = _.reduce(rec, ( (memo, num) -> memo + num;), 0)
        rec.push(sum)
        pcent = Math.round(sum/total_votes*100)
        pcent_total += pcent
        rec.push(pcent)
        combined_votes[theme_id] = ([val] for val in rec)
      totals_array.push( [pcent_total] )

      combined_votes['totals'] = totals_array
      console.log "total_votes: #{total_votes}"
      $scope.combined_votes = combined_votes

      $scope.number_of_voters = (k for own k of $scope.participant_votes).length

    console.log "End of live_allocate_controller"
]


add_letters = (items)->
  letter_ctr = 0;
  for item in items
    if item.published != false
      item.letter = String.fromCharCode('A'.charCodeAt() + letter_ctr)
      letter_ctr += 1
  items


agenda_controller = [ "$scope", "agenda", "AgendaData", "$timeout", "$window", "$location",
  ($scope, agenda, AgendaData, $timeout, $window, $location) ->
    console.log "agenda controller agenda.template_name: #{agenda.template_name}"
    #$scope.agenda_template_url = "/assets/custom/#{agenda.template_name}.html";
    $scope.agenda_template_url = "/assets/custom/#{agenda.template_name}.html";
    $scope.agenda = agenda

    link_group_id = null
    $scope.menu_groups = []
    for link in agenda.menu_data
      if link.group_id == link_group_id
        group.push( link )
      else
        group = new Array(link)
        $scope.menu_groups.push(group)
        link_group_id = link.group_id

    if $location.$$path.match(/\/agenda\/code:.*/)
      # set the url to the actual agenda url
      new_url = "/agenda/#{agenda.code}/#{agenda.munged_title}"
      #console.log "new_url: #{new_url}"
      $location.path( new_url)

    $scope.$root.initialize_markdown_system( {disable_editor: true} )

    $scope.agenda.roles = [
      #{value: 'agenda_admin', key: 'Agenda admin'},
      {value: 'coordinator', key: 'Coordinator'},
      {value: 'themer', key: 'Themer'},
      {value: 'group', key: 'Group scribe'},
      {value: 'reporter', key: 'Reporter'}
    ]

    $scope.agenda.active_role =
      name: "undefined"
      role: "undefined"
      identifier: ""

    $scope.update_role = () ->
      console.log " update_role to #{$scope.agenda.select_role}"

    $scope.accept_role = () ->
      console.log "accept_role #{$scope.agenda.active_role.role} with identifier: #{$scope.agenda.active_role.identifier} and code: #{agenda.active_role.access_code}"
      AgendaData.sign_in($scope.agenda.code, $scope.agenda.active_role).then(
        (response) ->
          console.log "AgendaData.sign_in success"
          #if $scope.user.id
          $timeout ->
            $window.location.reload()

          $scope.$root.user = response.data.user
          $scope.agenda_template_url = "/assets/custom/#{response.data.template_name}.html";
          $scope.agenda[prop] = response.data[prop] for prop of response.data when not prop.match(/^\$/)
          $scope.$root.$broadcast 'update-user-data'
          $scope.agenda.active_role.name = "#{$scope.agenda.active_role.role} #{$scope.agenda.active_role.identifier}"
        , (reason) ->
          console.log "AgendaData.sign_in FAIL"
      )

    $scope.signout_role = () ->
      $scope.$root.$broadcast 'user-sign-out'
      #AgendaData.sign_out($scope.agenda.code).then (response) ->
        #console.log "AgendaData.sign_out success"
        #$scope.agenda.active_role =
        #  name: "undefined"
        #  role: "undefined"
        #  identifier: ""
        #$scope.$root.user = {}
        #$scope.$root.$broadcast 'update-user-data'
        #$window.location.reload()

    $scope.$on 'update-user-data', () ->
      if $scope.user.email && $scope.menu_groups.length > 0
        pcs = $scope.user.email.match(/-\d+-(\w+)-(\d+)/)
        $scope.agenda.active_role.role = pcs[1]
        $scope.agenda.active_role.identifier = pcs[2]
        $scope.agenda.active_role.name = "#{$scope.agenda.active_role.role} #{$scope.agenda.active_role.identifier}"

    $scope.$on 'user-sign-out', () ->
      AgendaData.sign_out($scope.agenda.code).then (response) ->
        $timeout ->
          new_hash = "#/agenda/#{$scope.agenda.code}/#{$scope.agenda.munged_title}"
          if new_hash == $window.location.hash
            $window.location.reload()
          else
            $window.location.replace("/#{new_hash}")
        , 20


]

pdf_report_controller = [ "$scope", "$timeout", "$state", "AgendaData", "conversations", "$dialog",
  ($scope, $timeout, $state, AgendaData, conversations, $dialog) ->
    $scope.$root.initialize_markdown_system( {disable_editor: true} )

    $scope.report = {}
    $scope.report.options = []
    for conversation in conversations.data
      if conversation.links
        for link in conversation.links
          $scope.report.options.push {value: "#{conversation.code}-#{link}", key: "#{link} for #{conversation.title.substring(0,50)}" }
    $scope.report.options.push {value: "xyz-Services report", key: "Services report" }

    $scope.build_report = ->
      btn = angular.element(event.currentTarget)
      return if btn.hasClass('busy')
      #console.log "build_report #{$scope.report.selected}"
      if !$scope.report.selected
        title = "Select a report"
        msg = "You must select a report to continue"
        btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
        $dialog.messageBox(title, msg, btns)
        return
      else
        #console.log "construct the url and send to server $state.params.agenda_code: #{$state.params.agenda_code}"
        conversation_code = $scope.report.selected.match(/^([^-]*)-/)[1]
        report_type = if $scope.report.selected.match(/Key themes/)
                        'key_themes'
                      else if $scope.report.selected.match(/Recommendation graph/)
                        'results-graph'
                      else if $scope.report.selected.match(/Suggestions report/)
                        'comments'
                      else if $scope.report.selected.match(/Services report/)
                        'options-review-report'
                      else
                        null
        if report_type
          btn.addClass('busy')
          AgendaData.build_reports($state.params.agenda_code, conversation_code, report_type).then (response) ->
            #console.log "build_reports was successful"
            #console.log "response:\n#{JSON.stringify(response.data)}"
            $scope.report.report_images = []
            $scope.report.pdf = ''
            for file in response.data
              if file.match(/pdf$/)
                $scope.report.pdf = file
              else if file.match(/jpg$/)
                #console.log "push file: #{file}"
                $scope.report.report_images.push(file)
            #console.log "reports have been recorded"
            btn.removeClass('busy')
]

report_generator_controller = [ "$scope", "$timeout", "$state", "AgendaData", "conversations", "reports", "report_data_sets",
  ($scope, $timeout, $state, AgendaData, conversations, reports, report_data_sets) ->
    $scope.$root.initialize_markdown_system( {disable_editor: true} )

    $scope.report_specs = {}

    reporter = new window.Reporter()

    $scope.setup = {}
    $scope.setup.conversations = ( {value: conversation.code, key: conversation.title.substring(0,50)} for conversation in conversations.data )
    for data_set in report_data_sets.data
      $scope.setup.conversations.push( {value: data_set.key, key: data_set.title} )

    $scope.setup.saved_reports = reports.data

    $scope.report_specs.report_title = ''
    $scope.report_specs.canvas_width = 800
    $scope.report_specs.max_canvas_height_first_block = 1200
    $scope.report_specs.max_canvas_height_addtl_blocks = 1200
    $scope.report_specs.hide_examples = "true"
    $scope.report_specs.font_family = "Times New Roman"
    $scope.setup.font_families = [
      {value: 'Times New Roman', key: 'Times New Roman'},
      {value: 'Arial', key: 'Arial'}
    ]
    $scope.report_specs.font_size = "24"
    $scope.setup.font_sizes = [
      {value: '12', key: '12'},
      {value: '14', key: '14'},
      {value: '16', key: '16'},
      {value: '18', key: '18'},
      {value: '20', key: '20'},
      {value: '22', key: '22'},
      {value: '24', key: '24'},
      {value: '26', key: '26'},
      {value: '28', key: '28'},
      {value: '30', key: '30'},
      {value: '32', key: '32'}
      {value: '36', key: '36'}
      {value: '40', key: '40'}
      {value: '44', key: '44'}
      {value: '48', key: '48'}
    ]
    $scope.setup.layouts = [
      {value: 'key-themes', key: 'Key themes'},
      {value: 'select-worksheet', key: 'Select Worksheet'},
      {value: 'select-results', key: 'Prioritized Select results'},
      {value: 'allocation-worksheet', key: 'Allocation worksheet'},
      {value: 'allocation-results', key: 'Prioritized Allocation results'},
      {value: 'recommendation-results', key: 'Recommendation results'}
    ]

    $scope.update_data_set = ->
      if $scope.report_specs.conversation_code && $scope.report_specs.layout
        #console.log "update_data_set with conversation_code: #{$scope.report_specs.conversation_code} in layout: #{$scope.report_specs.layout}"
        AgendaData.participant_report_data($state.params.agenda_code,$scope.report_specs.conversation_code,$scope.report_specs.layout).then(
          (response)->
            $scope.report_specs.header_text = response.data.title
            $scope.report_specs.allocated_themes = response.data.allocated_themes
            $scope.report_specs.themes = response.data.themes
            $scope.report_specs.worksheet_themes = response.data.worksheet_themes
            $timeout ->
              $scope.update_setup()
            ,200
        )
      else
        console.log "no update yet"

    $scope.update_setup = ->
      $scope.report_specs.canvases = [{id: 1}]
      start_report($scope.report_specs)

    start_report = (report_specs) ->
      #console.log "start_report"
      status = reporter.create_report(report_specs)
      if status == "delay for canvas"
        $timeout ->
          start_report(report_specs)
        ,200

    $scope.save_report = (event) ->
      event = event || window.event;
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      payload = new FormData()
      report_images = document.getElementById('report-images').getElementsByTagName('img')
      for image, index in report_images
        payload.append("report-image-#{index}", image.src)
      for report_field in ['report_title', 'conversation_code', 'layout', 'hide_examples', 'header_text', 'font_family', 'font_size', 'canvas_width', 'max_canvas_height_first_block', 'max_canvas_height_addtl_blocks']
        payload.append(report_field, $scope.report_specs[report_field])
      payload.append('agenda_code', $state.params.agenda_code)
      AgendaData.upload_reports(payload).then(
        (response)->
          btn.removeClass('busy')
          $scope.setup.saved_reports.push(response.data)
      )

    $scope.edit_report = (id) ->
      console.log "edit the report #{id}"
      # get the report data and populate the #scope
      AgendaData.read_report_setup(id).then(
        (response)->
          data = response.data
          $scope.report_specs.report_title = data.title
          $scope.report_specs.conversation_code = data.source_code
          $scope.report_specs.layout = data.layout
          $scope.report_specs.hide_examples = data.settings.hide_examples
          $scope.report_specs.header_text = data.header
          $scope.report_specs.font_family = data.settings.font_family
          $scope.report_specs.font_size = data.settings.font_size
          $scope.report_specs.canvas_width = data.settings.canvas_width
          $scope.report_specs.max_canvas_height_first_block = data.settings.max_canvas_height_first_block
          $scope.report_specs.max_canvas_height_addtl_blocks = data.settings.max_canvas_height_addtl_blocks
          $timeout ->
            $scope.update_data_set()
          ,200
      )

    $scope.delete_report = (id) ->
      AgendaData.delete_report(id).then(
        (response)->
          for report, index in $scope.setup.saved_reports
            if report.id == response.data.report_destroyed_id
              $scope.setup.saved_reports.splice(index,1)
              return
      )
]
coord_mca_table = [ "$scope", "$timeout", "mca_data", "McaData", "FayeService", "$modal",
  ($scope, $timeout, mca_data, McaData, FayeService, $modal) ->

    $scope.criteria = mca_data.criteria
    $scope.options = mca_data.options
    $scope.page_title = mca_data.page_title
    $scope.$root.timestamp = mca_data.current_timestamp
    $scope.mca_id = mca_data.id

    FayeService.subscribe( "/mca/#{$scope.mca_id}/rating" )

    $scope.mca =
      panel_weight: mca_data.details?.panel_weight || 50
      exec_weight: 100 - ( mca_data.details?.panel_weight || 50 )
      exec: false
      weighted: false
      hide_avg: false
      assign: true

    $scope.assignInPopup = '<button id="editBtn" type="button" class="btn btn-primary btn-xs" ng-click="option_assignment(row)" >Assign</button>'

    select_columns = ->
      data_cols = []
      data_cols.push(
        field: 'group'
        displayName: 'Grp'
        width: 40
      )
      #data_cols.push(
      #  field: 'project_id'
      #  displayName: 'Id'
      #  width: 40
      #)
      data_cols.push(
        field: 'title'
        displayName: 'Project'
        width: 300
      )
      data_cols.push(
        field: 'visibility'
        displayName: 'V'
        width: 0
      )
      for criteria in $scope.criteria
        data_cols.push(
          field: "cri_#{criteria.id}"
          displayName: "#{criteria.title}"
          width: 40
        )
      data_cols.push(
        field: "score"
        displayName: 'Score'
        cellClass: 'panel-score'
        width: 50
      )
      if $scope.mca.exec || $scope.mca.weighted
        data_cols.push(
          field: 'score_pct'
          displayName: 'P%'
          cellClass: 'panel-score'
          width: 50
        )
      if $scope.mca.exec || $scope.mca.weighted
        data_cols.push(
          field: 'exec_pct'
          displayName: 'E%'
          cellClass: 'exec-score'
          width: 50
        )
      if $scope.mca.exec || $scope.mca.weighted
        data_cols.push(
          field: 'variance'
          displayName: 'V%'
          cellClass: 'variance'
          width: 60
        )
      if $scope.mca.weighted
        data_cols.push(
          field: 'score_wt_pct'
          displayName: 'PW%'
          cellClass: 'panel-score'
          width: 50
        )
      if $scope.mca.weighted
        data_cols.push(
          field: 'exec_wt_pct'
          displayName: 'EW%'
          cellClass: 'exec-score'
          width: 50
        )
      if $scope.mca.weighted
        data_cols.push(
          field: 'total_pct'
          displayName: 'T%'
          cellClass: 'total-score'
          width: 50
        )
      if $scope.mca.assign
        data_cols.push(
          displayName: 'Assign'
          cellTemplate: $scope.assignInPopup
          width: 70
        )

      data_cols
    $scope.data_cols = select_columns()

    crunch_data = ->
      my_data = []
      for option in $scope.options
        title = option.title
        option_id = option.id
        #project_id = option.details.project_id
        #city_rating = option.details.city_rating
        if option.evaluations.length == 0
          option.evaluations = [ {category: 'unassigned', last_name: 'U', ratings: [] }]
        for evaluation in option.evaluations
          data =
            #project_id: project_id
            title: title
            option_id: option_id
            group: evaluation.last_name
            user_id: evaluation.user_id
            type: evaluation.category
            evaluation_id: evaluation.id
            visibility: 'S'
          sum_of_scores = 0
          for criteria in $scope.criteria
            data["cri_#{criteria.id}"] = rating = evaluation.ratings[criteria.id]*1 || ""
            sum_of_scores += rating*1
          data["score"] = sum_of_scores
          data["score_pct"] = Math.round(sum_of_scores/30 * 100 )+'%'
          data["score_wt_pct"] = Math.round(sum_of_scores/30 * $scope.mca.panel_weight)+'%'
          #data["city_rating"] = city_rating
          #data["exec_pct"] = Math.round(city_rating/25 *100)+'%'
          #data["variance"] = Math.round( (sum_of_scores/30 - city_rating/25)/(city_rating/25) *100)+'%'
          #data["exec_wt_pct"] = Math.round(city_rating/25 * $scope.mca.exec_weight)+'%'
          #data["total_pct"] = Math.round(sum_of_scores/30 * $scope.mca.panel_weight + city_rating/25 * $scope.mca.exec_weight )+'%'
          my_data.push(data)
      my_data

    $scope.myData = crunch_data()

    $scope.myData_evaluations_map = {}
    for evaluation in $scope.myData
      $scope.myData_evaluations_map[evaluation.evaluation_id] = evaluation

    sort_evaluations = (a,b) ->
      if a.title > b.title
        return 1
      else if b.title > a.title
        return -1
      else
        if a.type > b.type
          return 1
        else if b.type > a.type
          return -1
        else
          if a.group > b.group
            return 1
          else if b.group > a.group
            return -1
          else
            return 0


    # iterate through each row looking for multiple records for the same option_id -
    # these need to be averaged
    $scope.myData_averages_map = {}
    insert_average_rows = (data) ->
      average_rows_data = []
      last_option_id = -1
      add_average_option_id = null
      last_row = null
      for row, index in data when row.type != 'group_average'
        #console.log "index: #{index}: option_id: #{row.option_id}, type: #{row.type}, group: #{row.group}"
        if last_option_id == row.option_id
          add_average_option_id = row.option_id
          row.averaged_assessment = true
          row.visibility = 'H'
          data[index-1].visibility = 'H'
          # add the criteria to the las row and keep count of number of records
          for key,value of row when key.match(/cri_/)
            last_row["#{key}_values"][row.evaluation_id] = value

        else
          last_option_id = row.option_id
          if add_average_option_id != null
            average_rows_data.push( {option_id: add_average_option_id, index: index, last_row: last_row})
          add_average_option_id = null
          # create a copy of the latest new record, in case I need to determine an average
          last_row = angular.copy(row)
          last_row.group = "A"
          last_row.visibility = 'S'
          last_row.type = "group_average"
          last_row.user_id = 0
          last_row.assessments_average = true
          for key, value of last_row when key.match(/cri_/)
            last_row["#{key}_values"] = {}
            last_row["#{key}_values"][last_row.evaluation_id] = value

      if add_average_option_id != null
        average_rows_data.push( {option_id: add_average_option_id, index: index, last_row: last_row})

      #console.log "Insert the average rows now, starting from the end"
      while (ins_row = average_rows_data.pop() )
        avg_row = ins_row.last_row
        $scope.myData.splice(ins_row.index,0,avg_row)
        $scope.myData_averages_map[avg_row.option_id] = avg_row
      calculate_averages()

    calculate_averages = (option_id) ->
      options = if option_id
        [ $scope.myData_averages_map[option_id] ]
      else
        (option for id, option of $scope.myData_averages_map)
      for option in options
        #console.log "%%%%%%%%%%%% calculate_average for project_id: #{option.project_id}"
        score = 0
        for key, ratings of option when key.match(/cri_\d+_values/)
          #console.log "found match with key #{key} and ratings: #{ratings}"
          sum = 0
          cnt = 0
          for evaluation_id, rating of ratings
            #console.log "rating: #{evaluation_id} is #{rating}"
            if rating > 0
              sum += rating*1
              cnt += 1
          if sum > 0
            option[ key.match(/cri_\d+/) ] = Math.round(sum/cnt*10)/10
            score += Math.round(sum/cnt*10)/10
            #console.log "sum: #{sum}, cnt: #{cnt}, avg: #{Math.round(sum/cnt*10)/10}"

        sum_of_scores = score
        option["score"] = Math.round(sum_of_scores*10)/10

        option["score_pct"] = Math.round(sum_of_scores/30 * 100 )+'%'
        option["score_wt_pct"] = Math.round(sum_of_scores/30 * $scope.mca.panel_weight)+'%'
        #option["exec_pct"] = Math.round(city_rating/25 *100)+'%'
        city_rating = option["city_rating"]
        option["variance"] = Math.round( (sum_of_scores/30 - city_rating/25)/(city_rating/25) *100)+'%'
        option["exec_wt_pct"] = Math.round(city_rating/25 * $scope.mca.exec_weight)+'%'
        option["total_pct"] = Math.round(sum_of_scores/30 * $scope.mca.panel_weight + city_rating/25 * $scope.mca.exec_weight )+'%'
      $scope.$$phase || $scope.$apply()


    $scope.myData = $scope.myData.sort(sort_evaluations)
    insert_average_rows($scope.myData)

    rowTemplate =   '<div style="height: 100%" ng-class="getClasses(row)">' +
                      '<div ng-style="{ \'cursor\': row.cursor }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngCell {{col.cellClass}}">' +
                        '<div class="ngVerticalBar" ng-style="{height: rowHeight}" ng-class="{ ngVerticalBarVisible: !$last }">&nbsp;</div>' +
                        '<div ng-cell></div>' +
                      '</div>' +
                    '</div>'

    $scope.getClasses = (row) ->
      #console.log "getClasses"
      classes = []
      if row.entity.group == "A"
        classes.push 'avg-row-green'
      else if $scope.myData_averages_map[row.entity.option_id]
        classes.push 'averaged-row'
      if $scope.mca.hide_avg && row.entity.averaged_assessment
        classes.push 'hide'
      classes.join(' ')

    $scope.filterOptions =
      filterText: ''

    $scope.gridOptions =
      data: 'myData'
      columnDefs: 'data_cols'
      rowTemplate: rowTemplate
      enableCellSelection: true
      enableCellEdit: false
      filterOptions: $scope.filterOptions
      showFilter: false
      plugins: [new ngGridCsvExportPlugin(), new ngGridFlexibleHeightPlugin()]
      showFooter: true


    $scope.$on 'McaRating_update', (event, data) ->
      #console.log "update McaRating_update rating: mca_option_evaluation_id: #{data.data.mca_option_evaluation_id}, mca_criteria_id: #{data.data.mca_criteria_id}, rating: #{data.data.rating}"
      evaluation_id = data.data.mca_option_evaluation_id
      criteria_id = data.data.mca_criteria_id
      data.data.rating
      evaluation = $scope.myData_evaluations_map[evaluation_id]
      evaluation["cri_#{criteria_id}"] = data.data.rating
      # update the row's score
      score = 0
      for criteria, rating of evaluation when criteria.match(/cri_/)
        score += rating*1
        #console.log "McaRating_update rating: #{rating}, score: #{score}"
      evaluation["score"] = score

      # update the ratings hash in average row, if any
      avg_row = $scope.myData_averages_map[ evaluation.option_id ]
      if avg_row
        #console.log "update the criteria value"
        avg_row["cri_#{criteria_id}_values"][evaluation_id] = data.data.rating
        #then recalculate the average row
        calculate_averages()
      $scope.$$phase || $scope.$apply()


    $scope.adjust_weight = () ->
      console.log "change adjust_weight"
      $scope.mca.panel_weight = 0 if $scope.mca.panel_weight<0
      $scope.mca.panel_weight = 100 if $scope.mca.panel_weight > 100
      $scope.mca.exec_weight = 100 - $scope.mca.panel_weight
      McaData.store_panel_weight($scope.mca_id, $scope.mca.panel_weight )
      $scope.myData = crunch_data()

    $scope.adjust_exec_view = () ->
      console.log "change on adjust_exec_view"
      $scope.data_cols = select_columns()
      $scope.myData = crunch_data()
      $scope.myData = $scope.myData.sort(sort_evaluations)
      insert_average_rows($scope.myData)


    $scope.adjust_weighted_view = ->
      console.log "change on adjust_weighted_view"
      $scope.data_cols = select_columns()
      $scope.myData = crunch_data()
      $scope.myData = $scope.myData.sort(sort_evaluations)
      insert_average_rows($scope.myData)


    $scope.adjust_avg_view = ->
      console.log "adjust_avg_view"
      $scope.filterOptions.filterText = if $scope.mca.hide_avg then 'visibility:S' else ''

    $scope.option_assignment = (row) ->
      McaData.project_assignments(row.entity.option_id).then (response) ->
        modal = $modal.open(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "live/assign-project-modal.html" %>'
          controller: ["$scope",
            ($scope) ->
              $scope.button_text = "Select Group"
              $scope.btn_disabled = true
              $scope.title = response.data.title
              $scope.groups = response.data.participants
              $scope.evaluators = response.data.evaluators
              $scope.evaluator_ids = (evaluator.user_id for evaluator in response.data.evaluators)
              $scope.cancel = ->
                modal.close()
              $scope.check_if_disabled = (user_id) ->
                if _.contains($scope.evaluator_ids, user_id)
                  'disabled'
              $scope.note_choice = ->
                if !angular.element(event.srcElement).parent().hasClass('disabled')
                  $scope.button_text = event.srcElement.text
                  $scope.group_user_id = event.srcElement.id
                  $scope.btn_disabled = false
              $scope.assign_now = ->
                #console.log "assign this project id: #{response.data.id} to user_id: #{$scope.group_user_id}"
                McaData.assign_project_evaluation(response.data.id, $scope.group_user_id).then (response) ->
                  modal.close()
              $scope.remove_assignment = (evaluation_id,user_id) ->
                #console.log "remove_assigment for evaluation_id: #{evaluation_id}, user_id: #{user_id}"
                McaData.remove_evaluation_assignment(evaluation_id).then (response) ->
                  modal.close()
          ]
        )
        #modal.open()
]

group_mca_table = [ "$scope", "$timeout", "mca_data", "McaData", "FayeService",
  ($scope, $timeout, mca_data, McaData, FayeService) ->

    $scope.criteria = mca_data.criteria
    $scope.evaluations = mca_data.evaluations
    $scope.page_title = mca_data.page_title
    $scope.$root.timestamp = mca_data.current_timestamp

    mca_id = mca_data.id
    FayeService.subscribe( "/mca/#{mca_id}/assignments" )

    $scope.$on 'McaOptionEvaluation_update', (event, data) ->
      if data.data.user_id is $scope.user.id
        $scope.$root.$broadcast('display_alert', {type: 'info', msg: 'We have assigned a new project for evaluation by your group. Please <a onclick="document.location.reload()">refresh</a> this page to start working on it.'})
        $scope.$$phase || $scope.$apply()

    data_cols = []
    #data_cols.push(
    #  field: 'project_id'
    #  displayName: 'Id'
    #  width: 40
    #  enableCellEdit: false
    #)
    data_cols.push(
      field: 'title'
      displayName: 'Project'
      width: 300
      enableCellEdit: false
    )
    for criteria in $scope.criteria
      cellEditableTemplate = "<input ng-class=\"'colt' + col.index\" ng-input=\"COL_FIELD\" ng-focus= \"startEdit(row, col)\" ng-blur=\"endEdit(row, col)\" ng-model=\"COL_FIELD\"/>";
      data_cols.push(
        field: "cri_#{criteria.id}"
        displayName: "#{criteria.title}"
        width: 40
        editableCellTemplate: cellEditableTemplate
      )
    data_cols.push(
      field: "score"
      displayName: 'Score'
      width: 50
      enableCellEdit: false
    )

    $scope.myData = []
    for evaluation in $scope.evaluations
      data =
        title: evaluation.title
        #project_id: evaluation.project_id
        type: "panel"
        evaluation_id: evaluation.id
      sum_of_scores = 0
      for criteria in $scope.criteria
        data["cri_#{criteria.id}"] = rating = evaluation.ratings[criteria.id]*1 || ""
        sum_of_scores += rating*1 unless isNaN(rating)
      data["score"] = sum_of_scores
      $scope.myData.push(data)

    $scope.myData_evaluations_map = {}
    for evaluation in $scope.myData
      $scope.myData_evaluations_map[evaluation.evaluation_id] = evaluation


    $scope.gridOptions =
      data: 'myData'
      columnDefs: data_cols
      enableCellEditOnFocus: true
      enableCellSelection: true
      enableCellEdit: true

    $scope.startEdit = (row, column) ->
      #console.log "startEdit"
      cell = angular.element(row.elm.children()[column.index])
      cell.removeClass("warn")
      cell.attr('_ce_init_val', cell.find('input').val())
      #console.log "startEdit set init_rating: #{cell.find('input').val()}"
      $timeout ->
        #console.log "Cancel this edit"
        angular.element(cell).find('input').blur()
      , 8000

    $scope.endEdit = (row, column) ->
      #console.log "endEdit"
      mca_option_evaluation_id = row.entity.evaluation_id
      mca_criteria_id = column.field.match(/\d+/)
      cell = angular.element(row.elm.children()[column.index])
      init_rating = cell.attr('_ce_init_val')*1
      rating = row.entity[column.field]*1
      #console.log "endEdit init_raiting: #{init_rating}, rating: #{rating}"
      return unless rating != init_rating
      if 1 <= rating <= 5
        rating = row.entity[column.field] = Math.round(rating)
        #console.log "Save rating: mca_option_evaluation_id: #{mca_option_evaluation_id}, mca_criteria_id: #{mca_criteria_id}, rating: #{rating}"
        McaData.update_rating(mca_option_evaluation_id, mca_criteria_id, rating)
      else
        #console.log "Warning, out of range"
        cell.addClass("warn")
        row.entity[column.field] = "1..5"
      # recalculate the score
      new_score = 0
      for col, value of row.entity when col.match(/^cri_/) && not isNaN(value)
        #console.log "#{col}: #{value}"
        new_score += value*1
      #console.log "X new_score is #{new_score}"
      #console.log "new_score is #{new_score}"
      row.entity.score = new_score
]

ce2_app.controller('AlertCtrl', ['$scope',
  ($scope) ->
    $scope.alerts = []

    $scope.$on 'display_alert', (event, data) ->
      console.log "display_alert"
      $scope.alerts.push({type: data.type, msg: data.msg});

    $scope.closeAlert = (index) ->
      $scope.alerts.splice(index, 1);
] )

agenda_admin_controller = ["$scope", "agendas", "agenda", "agenda_defaults", "AgendaData", "$dialog", "$location", "McaData", "$filter",
  ($scope, agendas, agenda, agenda_defaults, AgendaData, $dialog, $location, McaData, $filter) ->
    agenda.url = "#{document.location.origin}/#/agenda/#{agenda.code}/#{agenda.munged_title}"
    $scope.agendas = agendas
    $scope.admin= {}
    $scope.$root.initialize_markdown_system( {disable_editor: true} )
    $scope.placeholder= {x: 0, y: 0, w: 0, h: 0}
    $scope.placeholder_lower= {x: 0, y: 0, w: 0, h: 0}
    $scope.placeholder_upper= {x: 0, y: 0, w: 0, h: 0}
    $scope.pos = {sY: 0, iMY: 0, mY: 0, dragY: 0}
    $scope.new_agenda = {title: null}
    $scope.agenda = agenda
    $scope.agenda.defaults = agenda_defaults
    $scope.agenda.labels = {}
    $scope.new_conversation = {title: null}
    $scope.new_mca = {title: null}
    $scope.mca_details = {}
    if $scope.agenda.themers
      $scope.agenda.themers = ( "#{p.first_name} #{p.last_name}" for p in $scope.agenda.participants when p.first_name is "Theme team" )
    $scope.create_agenda = () ->
      #console.log "create_agenda with title: #{$scope.new_agenda.title}"
      AgendaData.create_new_agenda($scope.new_agenda.title).then(
        (response)->
          # add the new agenda to the select set and activate it
          $scope.agendas.push(response.data)
          $scope.select_agenda = response.data
          $scope.edit_agenda()
      )
    $scope.edit_agenda = () ->
      if $scope.select_agenda
        #console.log "edit_agenda: #{$scope.select_agenda.title}"
        $location.url( "/agenda-admin/#{$scope.select_agenda.code}/#{$scope.select_agenda.munged_title}" )
      else
        $dialog.messageBoxOk('Warning','You must select an agenda from the drop down list')

    $scope.refresh_agenda = ->
      #console.log "refresh_agenda"
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      AgendaData.refresh_agenda($scope.agenda.code).then(
        (response)->
          btn.removeClass('busy')
      )

    $scope.reset_agenda = ->
      btn = angular.element(event.currentTarget)
      msg = "Are you sure you want to RESET this agenda?"
      btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
      cb = (result) ->
        if result is "yes"
          btn.addClass('busy')
          AgendaData.reset_agenda($scope.agenda.code).then(
            (response)->
              btn.removeClass('busy')
              $dialog.messageBoxOk("Agenda has been reset - all data has been cleared", response.data.ack)
          )
        else
          btn.removeClass('busy')
      $dialog.messageBox("Confirm", msg, btns, cb)

    $scope.delete_agenda = ->
      #console.log "delete_agenda"
      btn = angular.element(event.currentTarget)
      msg = "Are you sure you want to DELETE this agenda?"
      btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
      cb = (result) ->
        if result is "yes"
          btn.addClass('busy')
          AgendaData.delete_agenda($scope.agenda.code).then(
            (response)->
              btn.removeClass('busy')
              btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
              cb = (result) ->
                $location.path('/agenda-admin')
              $dialog.messageBox("Agenda deleted", response.data.ack, btns, cb)
          )
        else
          btn.removeClass('busy')
      $dialog.messageBox("Confirm", msg, btns, cb)


    $scope.add_conversation = ->
      #console.log "add_conversation, title: #{$scope.new_conversation.title}"
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      AgendaData.add_conversation($scope.agenda.code, $scope.new_conversation.title).then(
        (response)->
          btn.removeClass('busy')
          $scope.agenda.conversations.push(response.data)
          $scope.new_conversation.title =  ''
      )

    $scope.update_agenda = (code, key, value) ->
      data = {}
      data[key] = value
      AgendaData.update_agenda(code, data).then(
       (response)->
         response.data[0].value
      )

    $scope.update_conversation = (code, key, value) ->
      data = {}
      data[key] = value
      AgendaData.update_conversation(code, data ).then(
        (response)->
          response.data[0].value
      )
      
    $scope.update_conversations_order = (code, ids) ->
      console.log "update_conversations_order with code: #{code} and ids: #{ids}"
      AgendaData.update_agenda(code, {conversation_ids: ids}).then(
        (response)->
          response.data.ids
      )

    $scope.add_mca = ->
      console.log "add_mca"
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      AgendaData.add_mca($scope.agenda.code, $scope.new_mca.title).then(
        (response)->
          btn.removeClass('busy')
          $scope.agenda.mcas.push(response.data)
          $scope.new_mca.title =  ''
      )

    $scope.edit_mca_details = (mca_id) ->
      console.log "edit_mca_details"
      if $scope.mca_details.id == mca_id
        $scope.mca_details = {}
        return
      $scope.mca_details = mca for mca in $scope.agenda.mcas when mca.id == mca_id
      
    $scope.update_mca = (type, mca_id, value) ->
      McaData.update_mca(mca_id, type, value).then(
        (response)->
          response.data
      )

    $scope.add_criteria = ->
      console.log "add_criteria"
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      McaData.add_mca_criteria($scope.mca_details.id, $scope.new_mca.criteria).then(
        (response)->
          btn.removeClass('busy')
          for criteria in response.data
            $scope.mca_details.criteria.push(criteria)
          $scope.new_mca.criteria =  ''
      )

    $scope.update_criteria = (key, criteria_id, value) ->
      if value is "~delete~"
        console.log "delete_criteria NOW"
        McaData.delete_mca_criteria(criteria_id).then(
          (response)->
            console.log "deleted criteria, remove option id: #{response.data.id}"
            $scope.mca_details.criteria = $filter('filter')($scope.mca_details.criteria, (o) -> (o.id != response.data.id) )
        )
      else
        McaData.update_mca_criteria(criteria_id, {key: key, value: value}).then(
          (response)->
            response.data[response.data.key]
        )

    $scope.delete_criteria = () ->
      console.log "delete_criteria"
      McaData.delete_mca_criteria(criteria_id)

    $scope.add_option = ->
      console.log "add_option"
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      McaData.add_mca_option($scope.mca_details.id, $scope.new_mca.option).then(
        (response)->
          btn.removeClass('busy')
          for option in response.data
            $scope.mca_details.options.push(option)
          $scope.new_mca.option =  ''
      )

    $scope.update_option = (key, option_id, value) ->
      if value is "~delete~"
        console.log "delete_option NOW"
        McaData.delete_mca_option(option_id).then(
          (response)->
            console.log "deleted option, remove option id: #{response.data.id}"
            #response.data[response.data.key]
            $scope.mca_details.options = $filter('filter')($scope.mca_details.options, (o) -> (o.id != response.data.id) )
            #$filter('filter')($scope.mca_details.options, {id: response.data.id})
        )
      else
        McaData.update_mca_option(option_id, {key: key, value: value}).then(
          (response)->
            response.data[response.data.key]
        )

]