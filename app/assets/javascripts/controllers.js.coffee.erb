# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/

bootstrap_CE2 = ->
	#console.log "In bootstrap_CE2"

  if typeof Firebase == 'undefined'
    setTimeout bootstrap_CE2, 50
  else
    try
      angular.bootstrap(document,["CE2"])
    catch error
      setTimeout bootstrap_CE2, 50

bootstrap_CE2()


ce2_app = angular.module("CE2", ["ngResource","CE2.services", 'CE2.directives', 'CE2.filters',
  'ui.compat', 'ui.bootstrap'] )

ce2_app.config ($httpProvider) ->
	$httpProvider.defaults.headers.common["X-CSRF-TOKEN"] =
		document.querySelectorAll('meta[name="csrf-token"]')[0].getAttribute('content')

ce2_app.value('Firebase', Firebase);

ce2_app.config ( [ '$stateProvider', '$urlRouterProvider',
  ($stateProvider, $urlRouterProvider) ->

    $urlRouterProvider
      # provides redirects
      .when('/c?id', '/contacts/:id')
      .otherwise('/');

    $stateProvider
      # registers the urls with $urlRouterProvider
      .state('initiative',
        url: '/initiative/:munged_title'
        templateUrl: '<%= path_to_asset "initiative.html" %>'
        resolve:
          issues: ["Issue", "$stateParams", (Issue, $stateParams) ->
            Issue.all_issues($stateParams.munged_title)
          ]
        controller:  [ "$scope", "issues", "$stateParams", ($scope, issues, $stateParams) ->
          console.log "In initiative state controller"
          $scope.initiative = issues.data
          $scope.$root.initiative_munged_title = issues.data.munged_title
          $scope.test = ->
            console.log "test in initiative state controller"  
          $scope.addIssue = ->
            console.log "initiative addIssue"
        ]
      )

      .state('add-an-issue',
        url: '/add-an-issue'
        templateUrl: '<%= path_to_asset "add-an-issue.html" %>'
        controller: [ "$scope","Issue", ($scope, Issue) ->
          console.log "In add-an-issue state controller"
          $scope.submit_issue = ->
            console.log "add-an-issue:submit_issue"
        ]

      )

      .state( 'issue',
        url: "/issue/{munged_title}"
        templateUrl: '<%= path_to_asset "issue.html" %>'
        resolve:
          issue: ["Issue", "$stateParams", (Issue, $stateParams) ->
            Issue.issue_data($stateParams.munged_title)
          ]
        controller: [ "$scope", "issue", ($scope, issue) ->
          console.log "In issue state controller"
          $scope.issue = issue
        ]
      )

      .state('about', {
        url: '/about',
        templateProvider:
          [        '$timeout', ($timeout) ->
            $timeout ->
              "Hello <i>world</i>"
            , 100
          ]
      })

      .state('edit-profile', {
        url: '/edit-profile'
        templateUrl: '<%= path_to_asset "edit-profile.html" %>'
      })

      .state('state_temp_prov', {
          url: '/state_temp_prov',
          templateProvider:
            [        '$timeout', ($timeout) ->
              $timeout ->
                "I am now in state1"
              , 100
            ]
        })


      .state('state1', {
          url: '/state1',
          templateUrl: '<%= path_to_asset "test/state1.html" %>'
          data:
            custom_id: 10
            custom_desc: 'circle'
          controller: ($state) ->
            console.log "$state.current.data.custom_desc: #{$state.current.data.custom_desc}"
        })

      .state('state2', {
        url: '/state2',
        templateUrl: '<%= path_to_asset "test/state2.html" %>'
      })
      .state('state3', {
        url: '/state3',
        templateUrl: '<%= path_to_asset "test/state3.html" %>'
        controller:  [ "$scope", "$state", "$timeout", ($scope, $state, $timeout) ->
          $scope.user = 'Brian Sullivan'
          $scope.goto_state1 = ->
            console.log "hey, I want to go to state1"
            $state.transitionTo('state1')
            $timeout ->
              $state.transitionTo('state2')
            , 2000
        ]
      })
      .state('state4', {
        url: '/state4/{userID}',
        views:
          "":
            templateUrl: '<%= path_to_asset "test/state4.html" %>'
            resolve: { resolved_data: ->
              title: 'My Contacts'
              duration: '1 hour'
              weight: '5 pounds'
              height: '22 inches'
            }
            controller: [ "$scope", "$state", "$timeout", "resolved_data", "$stateParams", "$routeParams", "$location",
              ($scope, $state, $timeout, resolved_data, $stateParams, $routeParams, $location) ->
                $scope.user = 'Brian Sullivan'
                $scope.data = resolved_data
                $scope.goto_state1 = ->
                  console.log "hey, I want to go to state4"
                  $state.transitionTo('state1')
                  $timeout ->
                    $state.transitionTo('state2')
                  , 2000
            ]

          "footer":
            template: "The footer"
      })

      .state('test-autogrow', {
        url: '/test-autogrow'
        templateUrl: '<%= path_to_asset "test/autogrow.html" %>'
        controller: [ "$scope", ($scope) ->
          console.log "controller for test-autogrow"
          $scope.autoGrow = (oField) ->
            if oField.scrollHeight > oField.clientHeight
              oField.style.height = oField.scrollHeight + "px"
        ]
      })

      .state('test-animation', {
        url: '/test-animation'
        templateUrl: '<%= path_to_asset "test/animation.html" %>'
        controller: [ "$scope", ($scope) ->
          console.log "controller for test-animation"
          $scope.adjust = ->
            console.log "test-animation:adjust"
            $scope.step = not $scope.step
        ]
      })

      .state('test-sortable', {
        url: '/test-sortable'
        templateUrl: "<%= path_to_asset "test/sortable.html" %>"
        controller: [ "$scope", ($scope) ->
          #console.log "controller for test-sortable"
          $scope.items = [
            {id: 1, order_id: 1, text: 'item 1'},
            {id: 2, order_id: 2, text: 'item 2'},
            {id: 3, order_id: 3, text: 'item 3'},
            {id: 4, order_id: 4, text: 'item 4'},
            {id: 5, order_id: 5, text: 'item 5'}
          ]
          $scope.test = ->
            console.log "test in sortable"
        ]
      })

])

ce2_app.run( ['$rootScope', '$state', '$stateParams', "Issue", "$timeout", "TemplateEngine", "$http", "$templateCache", "$dialog",
  ($rootScope,   $state,   $stateParams, Issue, $timeout, TemplateEngine, $http, $templateCache, $dialog) ->
    $rootScope.$state = $state
    $rootScope.$stateParams = $stateParams
    $rootScope.CSRF = document.querySelectorAll('meta[name="csrf-token"]')[0].getAttribute('content')

    $rootScope.autoGrow = (oField) ->
      if oField.scrollHeight > oField.clientHeight
        oField.style.height = oField.scrollHeight + "px"

    $rootScope.text_select_by_mouse = ->
      #console.log "text_select_by_mouse"
      try
        [text, id, type, name, photo, coords] = capture_selection()

        $rootScope.selection =
          text: text
          id: id
          type: type
          name:name
          photo: photo

        if text
          #console.log "use this string in form:\n#{str}"
          #console.log "found select_reference: #{select_reference}"
          body = document.documentElement || document.body
          scrollX = window.pageXOffset || body.scrollLeft
          scrollY = window.pageYOffset || body.scrollTop
          $rootScope.show_add_quote_to_reply_style =
            display: 'block'
            position: 'absolute'
            top: "#{coords.top + scrollY}px"
            left: "#{coords.left + scrollX}px"

          $timeout ->
            angular.element(document).bind('mouseup', clear_capture_selection_button)
          ,100

        else
          $rootScope.show_add_quote_to_reply_style =
            display: "none"

        $rootScope.$$phase || $rootScope.$apply()

      catch error
        console.log "conversation_select had an error: #{error}"

    $rootScope.add_quote_to_reply = ->
      sel = $rootScope.selection
      quote_insert = "[quote=#{sel.name}~#{sel.type}~#{sel.id}~#{sel.photo}]#{sel.text}[/quote]"
      #console.log "Add this quote to textarea: #{quote_insert}"
      $rootScope.$broadcast('conversation-comment-edit')
      textarea = document.getElementById('reply-control').getElementsByTagName('textarea')[0]
      textarea.value += "\n" + quote_insert
      $rootScope.show_add_quote_to_reply_style =
        display: "none"
      $rootScope.$$phase || $rootScope.$apply()

    [converter,editor] = initialize_markdown_converter( TemplateEngine, $timeout, $dialog, $rootScope )
    $rootScope.converter = converter
    $rootScope.editor = editor

    init_ctr = 1
    init_editor = ->
      #console.log "check init_editor, attempt # #{init_ctr}"
      edit_input = document.getElementById('wmd-input')
      if edit_input && editor && editor.run
        #console.log "init_editor now"
        editor.run()
      else if (init_ctr += 1 ) < 10
        #console.log "try to init editor in 1 sec"
        $timeout ->
          init_editor()
        , 1000

    $timeout ->
      init_editor()
    , 2000

    $http.get("<%= path_to_asset "quote.html" %>", {cache:$templateCache};)

])

capture_selection = ->
  #console.log "capture_selection"
  if document.all
    # get the selection for IE
    sel = document.selection
    range = sel.createRange()
    # IE's selection gives the text with linefeeds automatically
    str = range.text
    #console.log "use this string in form:\n#{str}"
    # get a node in the selection so I can find the parent comment
    node = range.parentElement()

    range.collapse(true);
    coords =
      left: range.boundingLeft
      top:  range.boundingTop;

  else
    # get the selection for other browsers
    sel = document.getSelection()
    # the text from the selection doesn't respect linefeeds, so I must manually respect linefeeds
    #console.log "conversation_select text: #{sel.toString() }"
    # turn the selection into a range
    range = sel.getRangeAt(0)
    # now get the string while respecting the linefeeds
    frag = range.cloneContents()
    child_nodes = frag.childNodes
    # get the text for each of the nodes, without formatting
    strs = ( (if node.innerHTML then node.innerHTML else node.textContent).replace(/^\s*/,'').replace(/\s*$/,'') for node in child_nodes)

    str = strs.join('\n\n').replace(/<br[^>]*>/ig, '\n')

    # get a node of the range in the selection so I can find the parent comment
    node = range.startContainer

    # get the selection coordinates
    range = range.cloneRange()
    range.collapse(true);
    coords = range.getClientRects()[0];
    #console.log "coords top: #{coords.top}, left: #{coords.left}"

  if str
    # now find the parent with comment_id attr
    #node = node.parentNode until node.attributes && node.attributes.select_reference
    #select_reference = node.attributes.select_reference.value
    com_scope = angular.element(node).scope()
    img_code = com_scope.comment.sm1.match(/\/([^\/]+)\/sm\d\//)[1]
    name = "#{com_scope.comment.first_name} #{com_scope.comment.last_name}"
    [str, com_scope.comment.id, com_scope.comment.type, name, img_code, coords]
  else
    [null,null,null,null,null,null]

clear_capture_selection_button = ->
  #console.log "clear_capture_selection_button mouseup, then clear"
  doc = angular.element(document)

  rootScope = doc.scope().$root
  rootScope.show_add_quote_to_reply_style =
    display: "none"
  rootScope.$$phase || rootScope.$apply()

  doc.unbind('mouseup', clear_capture_selection_button)

initialize_markdown_converter = (TemplateEngine, $timeout, $dialog, $rootScope) ->
  opts = { TemplateEngine: TemplateEngine } # unless opts
  quoteTemplate = null

  #converter = new Markdown.getSanitizingConverter()
  # Since I am using hooks, I will manually hook in sanitize at the end
  converter = new Markdown.Converter();
  editor = new Markdown.Editor converter

  # Before cooking callbacks
  converter.hooks.chain "preConversion", (text) ->
    #Discourse.Markdown.trigger('beforeCook', { detail: text, opts: opts });
    #return Discourse.Markdown.textResult || text;
    return text

  # Extract quotes so their contents are not passed through markdown.
  converter.hooks.chain "preConversion", (text) ->
    extracted = Markdown.BBCode.extractQuotes(text)
    quoteTemplate = extracted.template;
    return extracted.text;

  converter.hooks.chain "postConversion", (text) ->
    # reapply quotes
    text = quoteTemplate(text) if quoteTemplate
    return Markdown.BBCode.format(text, opts);

  Markdown.upload_dialog = (linkEnteredCallback) ->
    console.log "call the upload dialog"

    dialog = $dialog.dialog(
      backdrop: true
      keyboard: true
      backdropClick: true
      templateUrl: '<%= path_to_asset "insert-image-form.html" %>'
      controller: ["$scope", "$timeout", ($scope, $timeout) ->
        debug = false
        $scope.type = 'local'
        #$scope.image = {conversation_id: angular.element(document.getElementById('wmd-input')).scope().newComment.conversation_id}
        $scope.image = {conversation_id: angular.element(document.getElementById('wmd-input')).scope().conversation.id }

        console.log "in dialog, $scope.image.conversation_id: #{$scope.image.conversation_id} "

        $scope.show_tab = (str) ->
          if str is 'web'
            console.log "show web tab"
            $scope.type = 'web'
          else
            console.log "show local tab"
            $scope.type = 'local'
        $scope.submit = ->
          console.log "submit url: #{$scope.image.url}"
          linkEnteredCallback($scope.image.url)
          dialog.close()

        $scope.upload = ->
          console.log "upload file"
          file_input = document.getElementById('filename-input')
          if file_input.files.length > 0
            file_name = file_input.files[0].name
            console.log "loading file: #{file_name}" if debug
            $scope.progress_bar_message = "<i class='icon-spinner icon-spin'></i><span>Loading #{file_name}</span>"
            image_upload_form.submit()

        $scope.iframe_loaded = (el) ->
          # have access to $scope here
          console.log "ceCommentForm: window.iframe_loaded, get the contents" if debug

          content = el.contentDocument.body.innerText
          if content
            attachment = angular.fromJson(content)
            console.log "in_page_url is #{attachment.in_page_url}"
            $timeout ->
              linkEnteredCallback(attachment.in_page_url, {width: attachment.image_width, height: attachment.image_height});
              dialog.close()
              $scope.$root.$broadcast('update-new-comment-text')

        $scope.cancel = ->
          dialog.close()
      ]
    )
    dialog.open()
    $rootScope.$$phase || $rootScope.$apply()




  return [converter,editor]
