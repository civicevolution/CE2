# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://jashkenas.github.com/coffee-script/

bootstrap_CE2 = ->
	#console.log "In bootstrap_CE2"

  if typeof Firebase == 'undefined' || typeof Markdown == 'undefined' || typeof Markdown.BBCode == 'undefined'
    setTimeout bootstrap_CE2, 50
  else
    try
      angular.bootstrap(document,["CE2"])
    catch error
      setTimeout bootstrap_CE2, 50

bootstrap_CE2()


ce2_app = angular.module("CE2", ["ngResource","CE2.services", 'CE2.directives', 'CE2.filters',
  'ui.compat', 'ui.bootstrap'] )

ce2_app.config ($httpProvider) ->
	$httpProvider.defaults.headers.common["X-CSRF-TOKEN"] =
		document.querySelectorAll('meta[name="csrf-token"]')[0].getAttribute('content')


ce2_app.factory 'errorHttpInterceptor', ($q, $injector) ->
  (promise) ->
    promise.then (response) ->
      # do something on success
      #console.log "$httpProvider.responseInterceptors Success"
      promise # pass the promise on to the calling function
    , (response) ->
      # do something on error
      if (canRecover(response))
        return promise # let the response promise continue and be dealt with
      $dialog = $dialog || $injector.get("$dialog")
      switch response.data.class
        when "CanCan::AccessDenied"
          title = 'Access denied'
          msg = "Sorry, you are not authorized for this action [URL: #{response.config.url}, Controller: #{response.data.controller}, Action: #{response.data.action}]"
        else
          title = 'Server error'
          msg = "#{response.data.error} [URL: #{response.config.url}, Controller: #{response.data.controller}, Action: #{response.data.action}]"
      btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
      $dialog.messageBox(title, msg, btns).open()
      #console.log "XXX $httpProvider.responseInterceptors Error\n#{response.data.error}"
      return $q.reject(response)
canRecover = (response) ->
  #if response.data.class?.match(/CanCan/)
  #  return false
  switch
    when response.config.url.match(/guest_posts/) && response.data.class is "ActiveRecord::RecordNotFound" then true
    when response.data.class then false
    when response.data.errors then true
    else false



ce2_app.config ($httpProvider) ->
  $httpProvider.responseInterceptors.push('errorHttpInterceptor')

ce2_app.value('Firebase', Firebase);

ce2_app.config ( [ '$stateProvider', '$urlRouterProvider',
  ($stateProvider, $urlRouterProvider) ->

    $urlRouterProvider
      # provides redirects
      .when('/c?id', '/contacts/:id')
      .otherwise('/home');
      #.otherwise('/iap2');

    $stateProvider
      # registers the urls with $urlRouterProvider
      .state('home', {
        url: '/home'
        templateUrl: '<%= path_to_asset "home.html" %>'

      })

      .state('events', {
        url: '/events'
        templateUrl: '<%= path_to_asset "events.html" %>'
        resolve:
          events: ["EventsData", (EventsData) ->
            EventsData.events().then(
              (response)->
                response.data
            )
          ]
        controller: [ "$scope", "events",
          ($scope, events) ->
            $scope.events = events
        ]
      })

      .state('conversations', {
        url: '/conversations',
        templateUrl: '<%= path_to_asset "conversations.html" %>'
        resolve:
          conversations: ["ConversationData", (ConversationData) ->
            ConversationData.conversations()
          ]
        controller: [ "$scope", "conversations", "ConversationData", "$state",
          ($scope, conversations, ConversationData, $state) ->
            #console.log "In home state controller"
            $scope.conversations = conversations
            $scope.create_conversation = ->
              #console.log "create a new conversation and nav to it or show error"
              ConversationData.create_new_conversation().then (response) ->
                #console.log "RoR response to ConversationData.create_new_conversation with code: #{response.data.code}"
                $state.transitionTo('conversation', {code: response.data.code, munged_title: "new"})
        ]
      })

      .state( 'agenda',
        url: "/agenda/{code}/{munged_title}"
        #template: '<div ng-include="agenda_template_url"></div>'
        templateUrl: '<%= path_to_asset "custom/iap2.html" %>'
        resolve:
          agenda: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.agenda($stateParams.code).then(
              (response)->
                response.data
            )
          ]
        controller: agenda_controller
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')

      )

      .state( 'conversation',
        url: "/conversation/{code}/{munged_title}"
        #url: "/conversation/{code}/{munged_title:[^/]*}{path:.*}"
        templateUrl: '<%= path_to_asset "conversation.html" %>'
        resolve:
          conversation: ["ConversationData", "$stateParams", (ConversationData, $stateParams) ->
                         console.log "resolve get ConversationData.conversation"
                         ConversationData.conversation($stateParams.code)
            #console.log "conversation state with path: #{$stateParams.path}"
          ]
        controller: conversation_controller
      )

    .state( 'small-group-deliberation',
        url: "/cmp/{component_code}/sgd/{conversation_code}/{munged_title}"
        templateUrl: '<%= path_to_asset "live/group.html" %>'
        resolve:
          small_group_deliberation_data: ["ComponentData", "$stateParams", (ComponentData, $stateParams) ->
            console.log "resolve get ComponentData.small_group_deliberation_data"
            ComponentData.small_group_deliberation_data($stateParams.component_code, $stateParams.conversation_code )
          ]
        controller: conversation_group_controller
      )

    .state( 'small-group-deliberation-agenda',
        url: "/agenda/{agenda_code}-{link_code}/sgd/{munged_title}"
        templateUrl: '<%= path_to_asset "live/group.html" %>'
        resolve:
          small_group_deliberation_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('sgd', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: conversation_group_controller
      )

    .state( 'theme-small-group-deliberation',
        url: "/cmp/{component_code}/sgd_theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["ThemeData", "$stateParams", (ThemeData, $stateParams) ->
            console.log "resolve get ThemeData.theming_data"
            ThemeData.small_group_deliberation_theme_data($stateParams.component_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

      .state( 'theme-small-group-deliberation-agenda',
        url: "/agenda/{agenda_code}-{link_code}/sgd-theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('sgd-theme', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

      .state( 'coordinator-theme',
        url: "/cmp/{component_code}/themes_theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["ThemeData", "$stateParams", (ThemeData, $stateParams) ->
            ThemeData.small_group_themes_theme_data($stateParams.component_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

    .state( 'coordinator-theme-agenda',
        url: "/agenda/{agenda_code}-{link_code}/coord-theme/{munged_title}"
        templateUrl: '<%= path_to_asset "live/theme.html" %>'
        resolve:
          theming_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('coord-theme', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: small_group_deliberation_theme_controller
      )

    .state('display-themes-agenda',
        url: "/agenda/{agenda_code}-{link_code}/theme-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/themes.html" %>'
        resolve:
          themes_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('theme-results', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')

        controller: [ "$scope", "themes_data", "$location", "$compile", "$timeout",
          ($scope, themes_data, $location, $compile, $timeout) ->
            $scope.conversation_title = themes_data.title
            $scope.conversation_themes = add_letters( themes_data.themes )
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
            $scope.no_examples = true
            $scope.examples_link = "Show examples"
            examples_are_compiled = false

            $scope.toggle_examples = ->
              if $scope.examples_link.match(/Show/)
                $scope.no_examples = false
                $scope.examples_link = "Hide examples"
              else
                $scope.no_examples = true
                $scope.examples_link = "Show examples"

              if !$scope.no_examples && !examples_are_compiled
                $timeout ->
                  $scope.theme_display_only = true
                  examples_are_compiled = true
                  $compile(angular.element(document.body).find('blockquote'))($scope)
                ,100
        ]
      )
    .state( 'allocate-to-themes',
        url: "/cmp/{component_code}/allocate/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate.html" %>'
        resolve:
          allocation_data: ["LiveAllocateData", "$stateParams", (LiveAllocateData, $stateParams) ->
            LiveAllocateData.allocation_data($stateParams.component_code)
          ]
        controller: live_allocate_controller
      )

    .state( 'allocate-to-themes-agenda',
        url: "/agenda/{agenda_code}-{link_code}/allocate/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate.html" %>'
        resolve:
          allocation_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('allocate', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: live_allocate_controller
      )

      .state('allocate-to-themes-results-agenda',
        url: "/agenda/{agenda_code}-{link_code}/allocate-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate-results.html" %>'
        resolve:
          allocation_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('allocate', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "allocation_data",
          ($scope, allocation_data) ->
                      $scope.allocated_points = allocation_data.allocated_themes
                      $scope.title = allocation_data.title
                      $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state('allocate-to-themes-results',
        url: "/cmp/{component_code}/allocate-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate-results.html" %>'
        resolve:
          allocation_data: ["LiveAllocateData", "$stateParams", (LiveAllocateData, $stateParams) ->
            LiveAllocateData.allocated_points($stateParams.component_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "allocation_data",
          ($scope, allocation_data) ->
            $scope.allocated_points = allocation_data.allocated_points
            $scope.title = allocation_data.title
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )


      .state( 'allocate-themes-worksheet',
        url: "/cmp/{component_code}/allocate-worksheet/{munged_title}"
        templateUrl: '<%= path_to_asset "live/allocate-worksheet.html" %>'
        resolve:
          worksheet_data: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.participant_worksheet($stateParams.component_code)
          ]
        controller: [ "$scope", "worksheet_data",
          ($scope, worksheet_data) ->
            #$scope.conversations = worksheet_data
            #for conversation in $scope.conversations
            #  conversation.essential_themes = add_letters(conversation.essential_themes)
            essential_themes = add_letters(worksheet_data)
            $scope.conversations = [
              {essential_themes: essential_themes}
            ]
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

    .state( 'select-themes',
        url: "/cmp/{component_code}/select/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select.html" %>'
        resolve:
          selection_data: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.selection_data($stateParams.component_code)
          ]
        controller: live_select_controller
      )

    .state( 'select-themes-agenda',
        url: "/agenda/{agenda_code}-{link_code}/select/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select.html" %>'
        resolve:
          selection_data: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('select', $stateParams.agenda_code, $stateParams.link_code)
          ]
        controller: live_select_controller
      )

      .state( 'select-themes-results-agenda',
        url: "/agenda/{agenda_code}-{link_code}/select-results/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select-results.html" %>'
        resolve:
          selection_votes: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.data_set('themes-select-results', $stateParams.agenda_code, $stateParams.link_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "selection_votes",
          ($scope, selection_votes) ->
            $scope.selection_votes = selection_votes.allocated_themes
            $scope.title = selection_votes.title
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state( 'select-themes-worksheet',
        url: "/cmp/{component_code}/select-worksheet/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select-worksheet.html" %>'
        resolve:
          worksheet_data: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.participant_worksheet($stateParams.component_code)
          ]
        controller: [ "$scope", "worksheet_data",
          ($scope, worksheet_data) ->
            $scope.conversations = worksheet_data.conversations_list
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )

      .state('select-themes-results',
        url: "/cmp/{component_code}/select-results/{conversation_code}/{munged_title}"
        templateUrl: '<%= path_to_asset "live/select-results.html" %>'
        resolve:
          selection_votes: ["LiveSelectData", "$stateParams", (LiveSelectData, $stateParams) ->
            LiveSelectData.selection_votes($stateParams.component_code, $stateParams.conversation_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: [ "$scope", "selection_votes",
          ($scope, selection_votes) ->
            $scope.selection_votes = selection_votes.votes
            $scope.title = selection_votes.title
            $scope.$root.initialize_markdown_system( {disable_editor: true} )
        ]
      )



      .state('report-generator',
        url: "/agenda/{agenda_code}/report-generator/{munged_title}"
        templateUrl: '<%= path_to_asset "live/reports/report-canvas.html" %>'
        resolve:
          conversations: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.conversations($stateParams.agenda_code)
          ]
          report_data_sets: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.report_data_sets($stateParams.agenda_code)
          ]
          reports: ["AgendaData", "$stateParams", (AgendaData, $stateParams) ->
            AgendaData.reports($stateParams.agenda_code)
          ]
        onEnter: ->
          angular.element(document.body).addClass('display-page')
        onExit: ->
          angular.element(document.body).removeClass('display-page')
        controller: report_generator_controller
      )

      .state('about', {
        url: '/about',
        templateProvider:
          [        '$timeout', ($timeout) ->
            $timeout ->
              "Hello <i>world</i>"
            , 100
          ]
      })

      .state('edit-profile', {
        url: '/edit-profile'
        templateUrl: '<%= path_to_asset "user/edit-profile.html" %>'
      })

])

ce2_app.run( ['$rootScope', '$state', '$stateParams', "$timeout", "$http", "$templateCache", "$dialog", "$location",
  ($rootScope,   $state,   $stateParams, $timeout, $http, $templateCache, $dialog, $location) ->
    $rootScope.dev_mode = if $location.host().match(/dev$/) then true else false
    $rootScope.$state = $state
    $rootScope.$stateParams = $stateParams
    $rootScope.CSRF = document.querySelectorAll('meta[name="csrf-token"]')[0].getAttribute('content')

    $rootScope.$on '$stateChangeError', (event, toState, toParams, fromState, fromParams, error) ->
      console.log "$stateChangeError tostate: #{toState.url}, fromState: #{fromState.url}"
    $rootScope.$on '$stateChangeStart', (event, toState, toParams, fromState, fromParams) ->
      console.log "$stateChangeStart tostate: #{toState.url}, fromState: #{fromState.url}"
    $rootScope.$on '$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) ->
      console.log "$stateChangeSuccess tostate: #{toState.url}, fromState: #{fromState.url}"

    $rootScope.$on '$viewContentLoaded', (obj) ->
      console.log "$viewContentLoaded"

    $rootScope.initialize_markdown_system = (options) ->
      #console.log "initialize_markdown_system"
      # which will call initialize_markdown_editor
      if Markdown
        initialize_markdown_converter( $timeout, $dialog, $rootScope, options )
      else
        $timeout ->
          $rootScope.initialize_markdown_system(options)
        ,300
])

initialize_markdown_converter = ($timeout, $dialog, $rootScope, options) ->
  quoteTemplate = null

  disable_editor = if options && options.disable_editor then true else false

  #converter = new Markdown.getSanitizingConverter()
  # Since I am using hooks, I will manually hook in sanitize at the end
  converter = new Markdown.Converter();
  editor = new Markdown.Editor(converter) unless disable_editor

  # Before cooking callbacks
  converter.hooks.chain "preConversion", (text) ->
    #Discourse.Markdown.trigger('beforeCook', { detail: text, opts: opts });
    #return Discourse.Markdown.textResult || text;
    return text

  # Extract quotes so their contents are not passed through markdown.
  converter.hooks.chain "preConversion", (text) ->
    extracted = Markdown.BBCode.extractQuotes(text)
    quoteTemplate = extracted.template;
    return extracted.text;

  converter.hooks.chain "postConversion", (text) ->
    # reapply quotes
    text = quoteTemplate(text) if quoteTemplate
    return Markdown.BBCode.format(text);

  Markdown.upload_dialog = (linkEnteredCallback) ->
    console.log "call the upload dialog"

    dialog = $dialog.dialog(
      backdrop: true
      keyboard: true
      backdropClick: true
      templateUrl: '<%= path_to_asset "comment/insert-image-form.html" %>'
      controller: ["$scope", "$timeout", ($scope, $timeout) ->
        debug = false
        $scope.type = 'local'
        $scope.image = {conversation_code: angular.element(document.getElementById('wmd-input')).scope().conversation.code }

        console.log "in dialog, $scope.image.conversation_id: #{$scope.image.conversation_id} "

        $scope.show_tab = (str) ->
          if str is 'web'
            console.log "show web tab"
            $scope.type = 'web'
          else
            console.log "show local tab"
            $scope.type = 'local'
        $scope.submit = ->
          console.log "submit url: #{$scope.image.url}"
          linkEnteredCallback($scope.image.url)
          dialog.close()

        $scope.upload = ->
          console.log "upload file"
          file_input = document.getElementById('filename-input')
          if file_input.files.length > 0
            file_name = file_input.files[0].name
            console.log "loading file: #{file_name}" if debug
            $scope.progress_bar_message = "<i class='icon-spinner icon-spin'></i><span>Loading #{file_name}</span>"
            image_upload_form.submit()

        $scope.iframe_loaded = (el) ->
          # have access to $scope here
          console.log "ceCommentForm: window.iframe_loaded, get the contents" if debug

          content = el.contentDocument.body.innerText
          if content
            attachment = angular.fromJson(content)
            console.log "in_page_url is #{attachment.in_page_url}"
            $timeout ->
              linkEnteredCallback(attachment.in_page_url, {width: attachment.image_width, height: attachment.image_height});
              dialog.close()
              $scope.$root.$broadcast('update-new-comment-text')

        $scope.cancel = ->
          dialog.close()
      ]
    )
    dialog.open()
    $rootScope.$$phase || $rootScope.$apply()
  unless disable_editor
    $timeout ->
      $rootScope.$broadcast 'initialize-markdown-editor', {editor: editor}
    , 1000
  $rootScope.converter = converter
  $rootScope.editor = editor unless disable_editor


conversation_controller = [ "$scope", "conversation", "FirebaseService", "$timeout", "ConversationData", "$dialog",
  ($scope, conversation, FirebaseService, $timeout, ConversationData, $dialog) ->
    console.log "In conversation state controller at bottom"
    $scope.conversation = conversation
    $scope.$root.timestamp = conversation.current_timestamp

    $scope.name = 'ceConversation'
    # the data was resolved and attached to scope in the state definition
    
    $timeout ->
      if $scope.conversation.role == 'conversation_admin' && !$scope.conversation.published
        $scope.conversation.wizard_mode = true

      if $scope.conversation.can('show_participants')
        ConversationData.load_stats($scope.conversation.code).then(
          (response)->
            for key of response.data
              $scope.conversation[key] = response.data[key]
          )
    , 1000

    $scope.show_comment_form = (action) ->
      $scope.$root.$broadcast 'open-comment-form', {action: action}

    # Subscribe to updates for this data
    url = "https://civicevolution.firebaseio.com/conversations/#{$scope.conversation.code}/updates/"
    #console.log "firebase url: #{url}"
    FirebaseService.initialize_source(url, $scope.conversation.firebase_token)

    # register the listeners for the firebase updates
    $scope.$on 'ConversationComment_update', (event, data) ->
      #console.log "received broadcast ConversationComment_update"
      [original_rec, updated_rec] = FirebaseService.process_update($scope.conversation.conversation_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
        if updated_rec.purpose isnt original_rec.purpose
          console.log "update the graph to show new labels"
          element = angular.element(document.getElementById("com-#{updated_rec.id}"))
          canvas = element.find('canvas')
          canvas.scope().redraw_rating_graph( element )

    $scope.$on 'SummaryComment_update', (event, data) ->
      #console.log "received broadcast SummaryComment_update"
      [original_rec, updated_rec] = FirebaseService.process_update($scope.conversation.summary_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user

    $scope.$on 'RatingsCache_update', (event, data) ->
      #console.log "received broadcast RatingsCache_update"
      data = data.data
      item_array = switch data.type
        when "SummaryComment" then $scope.conversation.summary_comments
        when "ConversationComment" then $scope.conversation.conversation_comments
      if item_array
        for rec in item_array
          if rec.id == data.id
            comment = rec
            break
        if comment
          #console.log "Update the ratings on comment id: #{comment.id}"
          comment.number_of_votes = data.number_of_votes
          comment.ratings_cache = data.ratings_cache
          $scope.$$phase || $scope.$apply()


    $scope.$on 'CallToActionComment_update', (event, data) ->
      #console.log "received broadcast CallToActionComment_update"
      if not $scope.conversation.call_to_action_comment
        # is user the curator? must be as conversation cannot be pusblished without a cta
        $scope.conversation.call_to_action_comment = { editable_by_user: true }
      editable_by_user = $scope.conversation.call_to_action_comment.editable_by_user
      $scope.conversation.call_to_action_comment[prop] = data.data[prop] for prop of data.data when not prop.match(/^\$/)
      $scope.conversation.call_to_action_comment.editable_by_user = editable_by_user
      $scope.$$phase || $scope.$apply()

    $scope.ConversationCommentLength = 1500
    $scope.SummaryCommentLength = 0

    # register a listener for summary_comments ordered ids
    $scope.$on 'Conversation_update', (event, data) ->
      #console.log "received broadcast Conversation_update"

      # make sure it is the correct conversation_id
      # $scope.conversation.id
      if Number(data.data.conversation_id) is Number($scope.conversation.id)
        ordered_ids = data.data.ordered_ids
        # reorder $scope.conversation.summary_comments according to these ids
        if ordered_ids
          # update the order_id for the comments
          for comment in $scope.conversation.summary_comments
            comment.order_id = ordered_ids[comment.id]
          #resort the summary_comments according to order_id
          $scope.conversation.summary_comments.sort((a, b) -> return a.order_id > b.order_id )
        $scope.$$phase || $scope.$apply()

    $scope.edit_title = ->
      #console.log "edit the title"
      $scope.title_temp = $scope.conversation.title
      $scope.conversation.edit_title = true
      $scope.$root.$broadcast "user-event-notification", { action: 'open title edit'}

    $scope.save_title = ->
      ConversationData.save_title($scope.conversation.code, $scope.conversation.title).then (response) ->
        #console.log "return from save_title"
        $scope.conversation.title = response.data.text
        $scope.conversation.edit_title = false
        $scope.$root.$broadcast "user-event-notification", { action: 'save title edit'}

    $scope.cancel_title_edit = ->
      $scope.conversation.title = $scope.title_temp
      $scope.conversation.edit_title = false

    $scope.$on 'Publish conversation', (event, data) ->
      #console.log "publishConversation with code: #{data.conversation_code}"
      button_scope = data.button_scope
      button_scope.form_submit_status = 'Publishing <i class="icon-spinner icon-spin"></i>'
      ConversationData.publish_conversation(data.conversation_code).then (response)->
        #console.log "ConversationData.publish_conversation received response"
        button_scope.form_submit_status = 'Published'
        $timeout ->
          #button_scope.form_submit_status = 'Publish'
          $scope.$root.$broadcast "user-event-notification", { action: 'conversation published'}
        ,800


]

ce2_app.controller 'ActivityMonitorController', ($scope, User, $dialog) ->
  $scope.name = 'ActivityMonitor'
  $scope.$on 'user-clicked-dead-link', (event, data) ->
    console.log "'user-clicked-dead-link' for action: #{data.action}"
    #data.conversation_code = $scope.
    #{ action: 'Share'}
    title = "Sorry, this feature isn't quite ready yet"
    msg = "We are working on this feature now. Please click the \"Contact Us\" link on the right side of the page to share your ideas about how to make CivicEvolution better!"
    btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
    $dialog.messageBox(title, msg, btns).open()

    User.send_activity_report(data).then(
      (response)->
        #console.log "send_activity_report was successful"
      ,
      (reason) ->
        console.log "send_activity_report failed: #{reason.data.error}"
    )


small_group_deliberation_theme_controller = [ "$scope", "theming_data", "FirebaseService", "$timeout", "$dialog", "ThemeData",
  ($scope, theming_data, FirebaseService, $timeout, $dialog, ThemeData) ->
    #console.log "In conversation state controller at bottom"

    if theming_data.data_set_state == 'sgd-theme'
      theming_data = process_team_theming_data(theming_data)
    else if theming_data.data_set_state == 'coord-theme'
      theming_data = process_coordinator_theming_data(theming_data)
    $timeout ->
      $scope.$root.$broadcast 'update-user-data'
    , 1000


    $scope.conversation = theming_data
    $scope.$root.timestamp = theming_data.current_timestamp

    $scope.name = 'ceConversationTheme'

    $timeout ->
      $scope.conversation.filter_mode = 'themes'
      $scope.change_themer($scope.user.name)
    , 500

    ThemeData.firebase_token($scope.conversation.code).then(
      (response)->
        url = "https://civicevolution.firebaseio.com/conversations/#{$scope.conversation.code}/updates/"
        FirebaseService.initialize_source(url, response.data.firebase_token)
    )

    $scope.$on 'TableComment_update', (event, data) ->
      table_number = Number(data.data.table_number)
      switch $scope.user.last_name
        when "1"
          return unless _.contains([1, 2, 7, 10], table_number)
        when "2"
          return unless _.contains([3, 4, 8], table_number)
        when "3"
          return unless _.contains([5, 6, 9], table_number)

      data.data.parent_theme_ids = [] unless data.data.parent_theme_ids
      data.data.current_theme_ids = [] unless data.data.current_theme_ids
      [original_rec, updated_rec] = FirebaseService.process_update($scope.conversation.table_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
      # Does this id exist in $scope.conversation.comments?
      if not $scope.conversation.comments[updated_rec.id]
        $timeout ->
          $scope.conversation.comments[updated_rec.id] = updated_rec
          $scope.$root.$broadcast 'calculate-tag-counts'
          $scope.$root.$broadcast 'update-comment-tags', updated_rec
          refilter_table_comments()
    , 500


    $scope.change_themer = (name) ->
      console.log "change theme page to show themer: #{name}"
      $scope.conversation.active_themer_name = name

      $scope.conversation.theme_themes_mode = if name?.match(/Coordinator/) then true else false

      $scope.conversation.theme_comments = (comment for comment in $scope.conversation.all_theme_comments when comment.name == $scope.conversation.active_themer_name)
      $scope.conversation.theme_tag_hash = {}
      theme_ids = []
      for comment in $scope.conversation.theme_comments
        $scope.conversation.theme_tag_hash[comment.id] = comment.tag_name
        theme_ids.push(comment.id)
      for comment in $scope.conversation.table_comments
        comment.parked = false
        comment.current_theme_ids = _.intersection(comment.parent_theme_ids, theme_ids)
      for comment in ($scope.conversation.team_theme_comments || [])
        comment.parked = false
        comment.current_theme_ids = angular.copy(comment.parent_theme_ids)
      ThemeData.parked_comments($scope.conversation.code).then(
        (response)->
          $scope.conversation.parked_comments = response.data
          parked_comment_ids = []
          for pc in response.data
            if name == "#{pc.first_name} #{pc.last_name}"
              parked_comment_ids = pc.parked_ids
          $scope.conversation.parked_comment_ids = parked_comment_ids
          console.log "$scope.conversation.parked_comment_ids: #{$scope.conversation.parked_comment_ids}"
          for id in parked_comment_ids
            $scope.conversation.comments[id]?.parked = true
          $scope.$root.$broadcast 'update-comment-tags'
          $scope.$root.$broadcast 'calculate-tag-counts'
      )
      $scope.conversation.filter_mode = "themes"
      refilter_table_comments()


    $scope.filter_table_comments = (mode, id=null) ->
      #console.log "filter_table_comments mode: #{mode}, id: #{id}"
      $scope.conversation.filter_mode = mode
      $scope.conversation.filter_id = id
      refilter_table_comments()

    refilter_table_comments = () ->
      mode = $scope.conversation.filter_mode
      id = $scope.conversation.filter_id
      console.log "refilter_table_comments mode: #{mode}, id: #{id}"
      switch
        when mode is 'all_table_comments'
          $scope.conversation.filtered_comments = $scope.conversation.table_comments

        when mode is 'untagged_comments'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.table_comments when comment.tag_bools && comment.tag_bools[0] && !comment.parked )

        when mode is 'parked_comments'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.table_comments when comment.parked)

        when mode is 'all_theme_comments'
          $scope.conversation.filtered_comments = $scope.conversation.team_theme_comments

        when mode is 'untagged_themes'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.team_theme_comments when comment.tag_bools && comment.tag_bools[0] && !comment.parked )

        when mode is 'parked_themes'
          $scope.conversation.filtered_comments = (comment for comment in $scope.conversation.team_theme_comments when comment.parked)

        when mode is 'themes'
          if $scope.conversation.theme_comments?.length > 0
            $scope.conversation.filtered_comments = $scope.conversation.theme_comments.sort((a,b)-> a.order_id - b.order_id)
          else
            $scope.conversation.filtered_comments = []

        when mode is 'theme'
          $scope.conversation.current_theme = _.findWhere($scope.conversation.theme_comments, {id: id})
          $scope.conversation.filtered_comments = []
          for id in $scope.conversation.current_theme.ordered_child_ids
            comment = $scope.conversation.comments[id]
            $scope.conversation.filtered_comments.push comment unless not comment

        when mode is 'table'
          $scope.conversation.filtered_comments = ( comment for comment in $scope.conversation.table_comments when Number(comment.table_number) is id)

    $scope.$on 'ThemeComment_update', (event, data) ->
      #console.log "received broadcast ThemeComment_update"
      [original_rec, updated_rec] = FirebaseService.process_update($scope.conversation.all_theme_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
      $scope.conversation.comments[updated_rec.id] = updated_rec unless not updated_rec
      $scope.conversation.theme_comments = (comment for comment in $scope.conversation.all_theme_comments when comment.name == $scope.conversation.active_themer_name)

      themers = {}
      for comment in $scope.conversation.all_theme_comments
        if themers[comment.name]
          themers[comment.name]['cnt'] += 1
        else
          themers[comment.name] = {cnt: 1}

      tag_hash = {}
      for comment in $scope.conversation.theme_comments
        tag_hash[comment.id] = comment.tag_name
        if comment.text.match(/\[quote/)
          comment.popover = comment.text.split('[quot')[0]
        else
          comment.popover = comment.text

      $scope.conversation.theme_tag_hash = tag_hash
      $scope.conversation.themers = themers
      # Update the visible tag widgets
      $scope.$root.$broadcast 'update-comment-tags'
      $scope.$root.$broadcast 'calculate-tag-counts'
      
    $scope.edit = (action) ->
      #console.log "Edit with action: #{action} for  #{$scope.conversation.current_theme.tag_name}"
      $scope.$root.$broadcast 'open-comment-form', {action: action, comment: $scope.conversation.current_theme}

    $scope.$on 'text-select-add-example', (event, sel) ->
      #console.log "received broadcast message text-select-add-example"
      if sel.quote_data
        example_data = sel.quote_data
        sel.text = sel.text.replace(/^Table \d+:\s*/,'')
      else
        example_data =
          quote_type: "example"
          id: sel.comment.id
          name: sel.comment.name
          purpose: sel.comment.purpose
      example_insert = "[quote=#{ angular.toJson(example_data)}]#{sel.text}[/quote]"
      #console.log "Add this example to textarea: #{example_insert}"
      $scope.$root.$broadcast 'open-comment-form', {action: 'add-example-from-selected-text', quote_insert: example_insert, comment: $scope.conversation.current_theme, append_to_existing: true}

    $scope.$on 'update-comment-tags', (event,comment) ->
      comments = if comment then [comment] else if $scope.conversation.theme_themes_mode then $scope.conversation.team_theme_comments else $scope.conversation.table_comments
      for comment in comments
        comment.tag_bools = new class then constructor: ->
          if comment.current_theme_ids.length is 0
            @[0] = true
          else
            @[id] = true for id in comment.current_theme_ids
        tags = ($scope.conversation.theme_tag_hash[id] for id in comment.current_theme_ids)
        tags.push 'Parked' if comment.parked
        comment.tags = tags.join(', ') || if $scope.conversation.theme_themes_mode then 'Tag this theme' else 'Tag this comment'


    $scope.$on 'calculate-tag-counts', ->
      #console.log "calculate-tag-counts"
      counts =
        themes: 0
        all: 0
        untagged: 0
        parked: 0
        table1: 0
        table2: 0
        table3: 0
        table4: 0

      for theme in $scope.conversation.theme_comments
        counts['themes'] += 1
        counts[theme.id] = 0

      comments = if $scope.conversation.theme_themes_mode then $scope.conversation.team_theme_comments else $scope.conversation.table_comments
      for comment in comments
        counts['all'] += 1
        counts["table#{comment.table_number}"] += 1
        if comment.parked
          counts['parked'] += 1
        if comment.current_theme_ids && comment.current_theme_ids.length == 0 && !comment.parked
          counts['untagged'] += 1
        else
          for id in comment.current_theme_ids
            counts[id] += 1

      for theme in $scope.conversation.theme_comments
        theme.comments = counts[theme.id]

      $scope.conversation.comment_counts = counts
    
    $scope.$on 'theme-comment-delete', (event,data) ->
      theme = data.comment
      console.log "delete this theme comment: #{theme.tag_name}"
      if theme.comments > 0
        btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
        $dialog.messageBox('Sorry', "Theme can only be deleted if it has no comments", btns).open()
        $scope.$root.$$phase || $scope.$root.$apply()
      else
        console.log "Delete this theme"
        ThemeData.delete(theme).then(
          (response)->
            console.log "theme was deleted successfully"
            if response.data.type
              $scope.$root.$broadcast "#{response.data.type}_update", {
                action: 'delete'
                class: response.data.type
                data: response.data
                updated_at: new Date().getTime()
                source: "theme-comment-delete"
              }
            $timeout ->
              $scope.conversation.filter_mode = 'themes'
              refilter_table_comments()

        ,
        (reason) ->
          console.log "theme delete failed"
          title = 'Sorry'
          msg = "This theme was not deleted: #{reason.data.error}"
          btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
          $dialog.messageBox(title, msg, btns).open()
        )
        
    $scope.$on 'show-theme-page', (event, data) ->
      theme = data.comment
      #console.log "show theme page for theme: #{theme.tag_name}"
      $scope.conversation.filter_mode = 'theme'
      $scope.conversation.filter_id = theme.id
      refilter_table_comments()


    $scope.$on 'update-user-data', () ->
      user_name = "#{$scope.user.first_name} #{$scope.user.last_name}"
      if $scope.conversation.can('edit_theme_comment') && not $scope.conversation.themers[ user_name ]
        $scope.conversation.themers[ user_name ] = {cnt: 0}
      $scope.change_themer(user_name)

]

process_small_group_deliberation_data = (data) ->
  sorted_table_comments = data.table_comments.sort((a,b)-> a.id - b.id)
  conversations_list: data.conversations_list
  table_comments: sorted_table_comments
  title: data.title
  code: data.code
  current_timestamp: data.current_timestamp
  privacy: data.privacy
  abilities: data.role.abilities
  can: (action) ->
    _.indexOf(this.abilities, action ) > -1


process_team_theming_data = (data) ->
  all_theme_comments = data.theme_comments
  table_comments = data.table_comments.sort((a,b)-> a.id - b.id)
  comments = {}
  for comment in table_comments
    comments[comment.id] = comment

  tag_hash = {}
  themers = {}
  for comment in all_theme_comments
    comments[comment.id] = comment
    tag_hash[comment.id] = comment.tag_name
    if comment.text.match(/\[quote/)
      comment.popover = comment.text.split('[quot')[0]
    else
      comment.popover = comment.text
    if themers[comment.name]
      themers[comment.name]['cnt'] += 1
    else
      themers[comment.name] = {cnt: 1}

  comments: comments
  table_comments: table_comments.sort((a,b)-> a.id - b.id)
  all_theme_comments: all_theme_comments.sort((a,b)-> a.id - b.id)
  theme_tag_hash: tag_hash
  themers: themers
  title: data.title
  code: data.code
  current_timestamp: data.current_timestamp
  privacy: data.privacy
  abilities: data.role.abilities
  can: (action) ->
    _.indexOf(this.abilities, action ) > -1

process_coordinator_theming_data = (data) ->
  table_comments = []
  coordinator_theme_comments = data.coordinator_theme_comments
  team_theme_comments = data.theme_comments
  all_theme_comments = []
  comments = {}
  for comment in coordinator_theme_comments
    comments[comment.id] = comment
    all_theme_comments.push(comment)
  for comment in team_theme_comments
    comments[comment.id] = comment
    all_theme_comments.push(comment)
    comment.show_tag_widget = true


  tag_hash = {}
  themers = {}
  for comment in all_theme_comments
    tag_hash[comment.id] = comment.tag_name
    if comment.text.match(/\[quote/)
      comment.popover = comment.text.split('[quot')[0]
    else
      comment.popover = comment.text
    if themers[comment.name]
      themers[comment.name]['cnt'] += 1
    else
      themers[comment.name] = {cnt: 1}

  comments: comments
  table_comments: table_comments.sort((a,b)-> a.id - b.id)
  all_theme_comments: all_theme_comments.sort((a,b)-> a.id - b.id)
  coordinator_theme_comments: coordinator_theme_comments.sort((a,b)-> a.id - b.id)
  team_theme_comments: team_theme_comments.sort((a,b)-> a.id - b.id)
  theme_tag_hash: tag_hash
  themers: themers
  title: data.title
  code: data.code
  current_timestamp: data.current_timestamp
  privacy: data.privacy
  abilities: data.role.abilities
  can: (action) ->
    _.indexOf(this.abilities, action ) > -1



conversation_group_controller = [ "$scope", "small_group_deliberation_data", "FirebaseService", "$timeout", "$dialog",
  ($scope, small_group_deliberation_data, FirebaseService, $timeout, $dialog) ->
    console.log "In conversation state controller at bottom"

    if small_group_deliberation_data.data_set_state == 'sgd-theme'
      small_group_deliberation_data = process_small_group_deliberation_data(small_group_deliberation_data)


    $scope.conversation = small_group_deliberation_data
    $scope.conversations = small_group_deliberation_data.conversations_list
    $scope.$root.timestamp = small_group_deliberation_data.current_timestamp

    $scope.name = 'ceConversationGroup'

    $scope.preview_template = "<%= path_to_asset "live/group-vote-insert.html" %>"

    $timeout ->
      $scope.conversation.filter_mode = 'table'
      $scope.conversation.filter_id = Number($scope.$root.user.last_name)
      refilter_table_comments()
      #$scope.$root.$broadcast 'calculate-tag-counts'
    , 500

    refilter_table_comments = () ->
      mode = $scope.conversation.filter_mode
      id = $scope.conversation.filter_id
      console.log "refilter_table_comments mode: #{mode}, id: #{id}"
      switch
        when mode is 'table'
          $scope.conversation.filtered_comments = ( comment for comment in $scope.conversation.table_comments when Number(comment.table_number) is id)
        else
          console.log "XXXXXXXXXXX undefined filter mode: #{mode}"

    $scope.$on 'TableComment_update', (event, data) ->
      [original_rec, updated_rec] = FirebaseService.process_update($scope.conversation.table_comments, data)
      if updated_rec && original_rec
        updated_rec.editable_by_user = original_rec.editable_by_user || updated_rec.editable_by_user
      if data.action is 'save'
        refilter_table_comments()
]

live_select_controller = [ "$scope", "selection_data", "LiveSelectData", "$timeout", "$dialog",
  ($scope, selection_data, LiveSelectData, $timeout, $dialog) ->

    $scope.conversations_list = selection_data.conversations_list
    $scope.agenda_code = selection_data.agenda_code
    $scope.conversations_list = [ selection_data ]
    $scope.all_selection_themes = []
    for conversation in $scope.conversations_list
      for theme in conversation.final_themes
        $scope.all_selection_themes.push(theme)


    set_current_conversation = (arg) ->
      index = switch arg
        when 'first' then 0
        when 'next' then $scope.conversation_ptr + 1
        when 'back' then $scope.conversation_ptr - 1
      index = 0 if index < 0
      index = $scope.conversations_list.length -1 if index > $scope.conversations_list.length - 1

      $scope.conversation_ptr = index
      $scope.current_selection_themes = $scope.conversations_list[index].final_themes
      $scope.title = $scope.conversations_list[index].title
      $scope.code = $scope.conversations_list[index].code

      $scope.show_next = if $scope.conversations_list.length > $scope.conversation_ptr + 1 then true else false
      $scope.show_back = if $scope.conversation_ptr >  0 then true else false

    set_current_conversation('first')
    $scope.participant_votes = selection_data.votes
    $scope.number_of_voters = (k for own k of $scope.participant_votes).length
    $scope.voter_id = Number($scope.number_of_voters) + 1
    for at in $scope.all_selection_themes
      at.value = false
    $scope.combined_votes = {}
    $timeout ->
      update_combined_votes()

    $scope.out_of_range = false

    $scope.count_selected = ->
      cnt = 0
      for a in $scope.current_selection_themes
        if a.selected
          cnt += 1
      $scope.out_of_range = if 0 < cnt < 4 then false else true
      cnt

    $scope.next = ->
      set_current_conversation('next')

    $scope.back = ->
      set_current_conversation('back')

    $scope.save = (confirmed_edit=false) ->
      if !confirmed_edit && $scope.edit_vote_mode
        msg = "Are you sure you want to update this voter's selection?"
        btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
        $dialog.messageBox("Confirm", msg, btns).open().then (result) ->
          if result is "yes"
            $scope.edit_confirmed = true
            $scope.save(true)
        return false
      if $scope.count_selected() == 0 && !$scope.edit_vote_mode
        title = "Warning"
        msg = "You must enter points before submitting"
        btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
        $dialog.messageBox(title, msg, btns).open()
        return

      selected_ids = ( {theme_id: at.id} for at in $scope.all_selection_themes when at.selected)

      data =
        voter_id: $scope.voter_id
        selected_ids: selected_ids

      LiveSelectData.record_selection($scope.agenda_code, data).then(
        (response)->
          $scope.participant_votes[$scope.voter_id] = selected_ids
          for at in $scope.all_selection_themes
            at.selected = false
          update_combined_votes()
          $scope.voter_id = Number($scope.number_of_voters) + 1
          $scope.edit_vote_mode = false
          set_current_conversation('first')
      )

    $scope.edit_vote = (voter_id) ->
      $scope.voter_id = voter_id
      votes = {}
      for vote in $scope.participant_votes[voter_id]
        votes[vote.theme_id] = true
      for at in $scope.all_selection_themes
        at.selected = votes[at.id] || false
      $scope.edit_vote_mode = true

    $scope.start_new_vote = ->
      $scope.voter_id = Number((k for own k of $scope.participant_votes).length) + 1
      for at in $scope.all_selection_themes
        at.selected = false
      $scope.edit_vote_mode = false

    update_combined_votes = ->
      $scope.number_of_voters = (k for own k of $scope.participant_votes).length
      $scope.conversations_combined_votes = []
      for conversation in $scope.conversations_list
        combined_votes = {}
        total_votes = 0
        totals_array = []
        for theme in conversation.final_themes
          #combined_votes[theme.id] = [ 0, 0, 0, 0, 0, 0, 0, 0 ]
          combined_votes[theme.id] = new Array( $scope.number_of_voters + 1).join("x").split("x").map(-> return ' ' )
        for voter of $scope.participant_votes
          voter_total = 0
          votes = $scope.participant_votes[voter]
          #console.log "votes: #{votes}"
          for vote in votes  # theme_id in [theme_ids]
            if combined_votes[vote.theme_id]
              combined_votes[vote.theme_id][ voter ] = 1
              voter_total += Number(1)
              total_votes += Number(1)
          totals_array.push( [voter_total] )
        totals_array.push( [total_votes] )

        pcent_total = 0
        for theme_id of combined_votes
          #console.log "theme_id: #{theme_id}"
          rec = combined_votes[theme_id]
          #rec.splice(0,1)
          sum = _.reduce(rec, ( (memo, num) -> Number(memo) + num;), 0)
          rec.splice(0,1)
          rec.push(sum)
          pcent = Math.round(sum/total_votes*100)
          pcent_total += pcent
          rec.push(pcent)
          #combined_votes[theme_id] = ([val] for val in rec)
          combined_votes[theme_id] = ([val] for val in rec)
        totals_array.push( [pcent_total] )

        combined_votes['totals'] = totals_array
        #console.log "total_votes: #{total_votes}"
        $scope.conversations_combined_votes.push( { title: conversation.title, final_themes: conversation.final_themes, combined_votes: combined_votes} )



]



live_allocate_controller = [ "$scope", "allocation_data", "LiveAllocateData", "$dialog", "$timeout",
  ($scope, allocation_data, LiveAllocateData, $dialog, $timeout) ->
    $scope.allocation_themes = allocation_data.allocation_themes

    $scope.name = 'live_allocate_controller'
    $scope.code = allocation_data.code
    $scope.participant_votes = allocation_data.votes
    $scope.number_of_voters = (k for own k of $scope.participant_votes).length
    $scope.voter_id = Number($scope.number_of_voters) + 1
    for at in $scope.allocation_themes
      at.value = 0
    $scope.combined_votes = {}
    $timeout ->
      update_combined_votes()

    $scope.over100 = false

    $scope.total = ->
      tot = 0
      for a in $scope.allocation_themes
        num = a.value
        if !isNaN(num)
          num = Number(a.value)
          if num < 0
            num = 0
            a.value = 0
          if num > 40
            num = 40
            a.value = 40
          tot += num
      if tot > 100
        $scope.over100 = true
      else
        $scope.over100 = false

      tot

    $scope.save = (confirmed_edit=false) ->
      if !confirmed_edit && $scope.edit_vote_mode
        msg = "Are you sure you want to update this voter's allocation?"
        btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
        $dialog.messageBox("Confirm", msg, btns).open().then (result) ->
          if result is "yes"
            $scope.edit_confirmed = true
            $scope.save(true)
        return false
      if $scope.total() == 0 && !$scope.edit_vote_mode
        title = "Warning"
        msg = "You must enter points before submitting"
        btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
        $dialog.messageBox(title, msg, btns).open()
        return

      vote_points = ( {theme_id: at.id, points: at.value} for at in $scope.allocation_themes)
      data =
        voter_id: $scope.voter_id
        vote_points: vote_points

      LiveAllocateData.record_allocation($scope.code, data).then(
        (response)->
          $scope.participant_votes[$scope.voter_id] = vote_points
          for at in $scope.allocation_themes
            at.value = 0
          update_combined_votes()
          $scope.voter_id = Number($scope.number_of_voters) + 1
          $scope.edit_vote_mode = false
      )

    $scope.edit_vote = (voter_id) ->
      $scope.voter_id = voter_id
      votes = {}
      for vote in $scope.participant_votes[voter_id]
        votes[vote.theme_id] = vote.points
      for at in $scope.allocation_themes
        at.value = votes[at.id] || 0
      $scope.edit_vote_mode = true

    $scope.start_new_vote = ->
      $scope.voter_id = Number((k for own k of $scope.participant_votes).length) + 1
      for at in $scope.allocation_themes
        at.value = ""
      $scope.edit_vote_mode = false

    update_combined_votes = ->
      combined_votes = {}
      total_votes = 0
      totals_array = []
      for theme in $scope.allocation_themes
        combined_votes[theme.id] = [ 0 ]
      for voter of $scope.participant_votes
        voter_total = 0
        votes = $scope.participant_votes[voter]
        for vote in votes
          combined_votes[vote.theme_id][ voter ] = vote.points
          voter_total += vote.points
          total_votes += vote.points
        totals_array.push( [voter_total] )
      totals_array.push( [total_votes] )

      pcent_total = 0
      for theme_id of combined_votes
        console.log "theme_id: #{theme_id}"
        rec = combined_votes[theme_id]
        rec.splice(0,1)
        sum = _.reduce(rec, ( (memo, num) -> memo + num;), 0)
        rec.push(sum)
        pcent = Math.round(sum/total_votes*100)
        pcent_total += pcent
        rec.push(pcent)
        combined_votes[theme_id] = ([val] for val in rec)
      totals_array.push( [pcent_total] )

      combined_votes['totals'] = totals_array
      console.log "total_votes: #{total_votes}"
      $scope.combined_votes = combined_votes

      $scope.number_of_voters = (k for own k of $scope.participant_votes).length

    console.log "End of live_allocate_controller"
]


add_letters = (items)->
  letter_ctr = 0;
  for item in items
    item.letter = String.fromCharCode('A'.charCodeAt() + letter_ctr)
    letter_ctr += 1
  items


agenda_controller = [ "$scope", "agenda", "AgendaData", "$timeout", "$window", "$location",
  ($scope, agenda, AgendaData, $timeout, $window, $location) ->
    console.log "agenda controller agenda.template_name: #{agenda.template_name}"
    #$scope.agenda_template_url = "/assets/custom/#{agenda.template_name}.html";
    $scope.agenda_template_url = "/assets/custom/#{agenda.template_name}.html";
    $scope.agenda = agenda
    if $location.$$path.match(/\/agenda\/code:.*/)
      # set the url to the actual agenda url
      new_url = "/agenda/#{agenda.code}/#{agenda.munged_title}"
      #console.log "new_url: #{new_url}"
      $location.path( new_url)

    $scope.$root.initialize_markdown_system( {disable_editor: true} )

    $scope.agenda.roles = [
      #{value: 'agenda_admin', key: 'Agenda admin'},
      {value: 'coordinator', key: 'Coordinator'},
      {value: 'themer', key: 'Themer'},
      {value: 'group', key: 'Group scribe'},
      {value: 'reporter', key: 'Reporter'}
    ]

    $scope.agenda.active_role =
      name: "undefined"
      role: "undefined"
      identifier: ""

    $scope.update_role = () ->
      console.log " update_role to #{$scope.agenda.select_role}"

    $scope.accept_role = () ->
      console.log "accept_role #{$scope.agenda.active_role.role} with identifier: #{$scope.agenda.active_role.identifier} and code: #{agenda.active_role.access_code}"
      AgendaData.sign_in($scope.agenda.code, $scope.agenda.active_role).then(
        (response) ->
          console.log "AgendaData.sign_in success"
          if $scope.user.id
            $timeout ->
              $window.location.reload()

          $scope.$root.user = response.data.user
          $scope.agenda_template_url = "/assets/custom/#{response.data.template_name}.html";
          $scope.agenda[prop] = response.data[prop] for prop of response.data when not prop.match(/^\$/)
          $scope.$root.$broadcast 'update-user-data'
          $scope.agenda.active_role.name = "#{$scope.agenda.active_role.role} #{$scope.agenda.active_role.identifier}"
        , (reason) ->
          console.log "AgendaData.sign_in FAIL"
      )

    $scope.signout_role = () ->
      $scope.$root.$broadcast 'user-sign-out'
      #AgendaData.sign_out($scope.agenda.code).then (response) ->
        #console.log "AgendaData.sign_out success"
        #$scope.agenda.active_role =
        #  name: "undefined"
        #  role: "undefined"
        #  identifier: ""
        #$scope.$root.user = {}
        #$scope.$root.$broadcast 'update-user-data'
        #$window.location.reload()

    $scope.$on 'update-user-data', () ->
      if $scope.user.email
        pcs = $scope.user.email.match(/-\d+-(\w+)-(\d+)/)
        $scope.agenda.active_role.role = pcs[1]
        $scope.agenda.active_role.identifier = pcs[2]
        $scope.agenda.active_role.name = "#{$scope.agenda.active_role.role} #{$scope.agenda.active_role.identifier}"

    $scope.$on 'user-sign-out', () ->
      AgendaData.sign_out($scope.agenda.code).then (response) ->
        $timeout ->
          new_hash = "#/agenda/#{$scope.agenda.code}/#{$scope.agenda.munged_title}"
          if new_hash == $window.location.hash
            $window.location.reload()
          else
            $window.location.replace("/#{new_hash}")
        , 20


]

report_generator_controller = [ "$scope", "$timeout", "$state", "AgendaData", "conversations", "reports", "report_data_sets",
  ($scope, $timeout, $state, AgendaData, conversations, reports, report_data_sets) ->
    $scope.$root.initialize_markdown_system( {disable_editor: true} )

    $scope.report_specs = {}

    reporter = new window.Reporter()

    $scope.setup = {}
    $scope.setup.conversations = ( {value: conversation.code, key: conversation.title.substring(0,50)} for conversation in conversations.data )
    for data_set in report_data_sets.data
      $scope.setup.conversations.push( {value: data_set.key, key: data_set.title} )

    $scope.setup.saved_reports = reports.data

    $scope.report_specs.report_title = ''
    $scope.report_specs.canvas_width = 800
    $scope.report_specs.max_canvas_height_first_block = 1200
    $scope.report_specs.max_canvas_height_addtl_blocks = 1200
    $scope.report_specs.hide_examples = "true"
    $scope.report_specs.font_family = "Times New Roman"
    $scope.setup.font_families = [
      {value: 'Times New Roman', key: 'Times New Roman'},
      {value: 'Arial', key: 'Arial'}
    ]
    $scope.report_specs.font_size = "24"
    $scope.setup.font_sizes = [
      {value: '12', key: '12'},
      {value: '14', key: '14'},
      {value: '16', key: '16'},
      {value: '18', key: '18'},
      {value: '20', key: '20'},
      {value: '22', key: '22'},
      {value: '24', key: '24'},
      {value: '26', key: '26'},
      {value: '28', key: '28'},
      {value: '30', key: '30'},
      {value: '32', key: '32'}
      {value: '36', key: '36'}
      {value: '40', key: '40'}
      {value: '44', key: '44'}
      {value: '48', key: '48'}
    ]
    $scope.setup.layouts = [
      {value: 'key-themes', key: 'Key themes'},
      {value: 'select-worksheet', key: 'Select Worksheet'},
      {value: 'select-results', key: 'Prioritized Select results'},
      {value: 'allocation-worksheet', key: 'Allocation worksheet'},
      {value: 'allocation-results', key: 'Prioritized Allocation results'}
    ]

    $scope.update_data_set = ->
      if $scope.report_specs.conversation_code && $scope.report_specs.layout
        #console.log "update_data_set with conversation_code: #{$scope.report_specs.conversation_code} in layout: #{$scope.report_specs.layout}"
        AgendaData.participant_report_data($state.params.agenda_code,$scope.report_specs.conversation_code,$scope.report_specs.layout).then(
          (response)->
            $scope.report_specs.header_text = response.data.title
            $scope.report_specs.allocated_themes = response.data.allocated_themes
            $scope.report_specs.themes = response.data.themes
            $scope.report_specs.worksheet_themes = response.data.worksheet_themes
            $timeout ->
              $scope.update_setup()
            ,200
        )
      else
        console.log "no update yet"

    $scope.update_setup = ->
      $scope.report_specs.canvases = [{id: 1}]
      start_report($scope.report_specs)

    start_report = (report_specs) ->
      #console.log "start_report"
      status = reporter.create_report(report_specs)
      if status == "delay for canvas"
        $timeout ->
          start_report(report_specs)
        ,200

    $scope.save_report = (event) ->
      event = event || window.event;
      btn = angular.element(event.currentTarget)
      btn.addClass('busy')
      payload = new FormData()
      report_images = document.getElementById('report-images').getElementsByTagName('img')
      for image, index in report_images
        payload.append("report-image-#{index}", image.src)
      for report_field in ['report_title', 'conversation_code', 'layout', 'hide_examples', 'header_text', 'font_family', 'font_size', 'canvas_width', 'max_canvas_height_first_block', 'max_canvas_height_addtl_blocks']
        payload.append(report_field, $scope.report_specs[report_field])
      payload.append('agenda_code', $state.params.agenda_code)
      AgendaData.upload_reports(payload).then(
        (response)->
          btn.removeClass('busy')
          $scope.setup.saved_reports.push(response.data)
      )

    $scope.edit_report = (id) ->
      console.log "edit the report #{id}"
      # get the report data and populate the #scope
      AgendaData.read_report_setup(id).then(
        (response)->
          data = response.data
          $scope.report_specs.report_title = data.title
          $scope.report_specs.conversation_code = data.source_code
          $scope.report_specs.layout = data.layout
          $scope.report_specs.hide_examples = data.settings.hide_examples
          $scope.report_specs.header_text = data.header
          $scope.report_specs.font_family = data.settings.font_family
          $scope.report_specs.font_size = data.settings.font_size
          $scope.report_specs.canvas_width = data.settings.canvas_width
          $scope.report_specs.max_canvas_height_first_block = data.settings.max_canvas_height_first_block
          $scope.report_specs.max_canvas_height_addtl_blocks = data.settings.max_canvas_height_addtl_blocks
          $timeout ->
            $scope.update_data_set()
          ,200
      )

    $scope.delete_report = (id) ->
      AgendaData.delete_report(id).then(
        (response)->
          for report, index in $scope.setup.saved_reports
            if report.id == response.data.report_destroyed_id
              $scope.setup.saved_reports.splice(index,1)
              return
      )




]