# Add custom directives here

'use strict';

ce2_directives = angular.module('CE2.directives', ['ui.bootstrap'])

ce2_directives.directive('ceUserBar', ->
  restrict: 'A'
  templateUrl: '<%= path_to_asset "user-bar.html" %>'
  replace: true
  scope: false
  controller: [ "$scope", "User", "$dialog", "$http", "$timeout", "$state", "$window",
    ($scope, User, $dialog, $http, $timeout, $state, $window) ->
      #$scope.user = User.get()
      $scope.user = {}
      User.get().then(
        (response)->
          #console.log "ceUserBar.User.get() received response"
          $scope.user = response
      )
      $scope.sign_in = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "signin_form.html" %>'
          controller: ->
            # for testing
            $scope.user = {}
            #  email: 'alice@civicevolution.org'
            #  password: 'aaaaaaaa'
            #  remember_me: 1
            $scope.submit_sign_in = (user) ->
              console.log "Submit by calling User.sign_in with credentials: #{user.email}/#{user.password}"
              $scope.error_message = null
              User.sign_in(user).then(
                (response)->
                  #console.log "signin received response"
                  $scope.dialog.close()
                  $window.location.reload()
                ,
                (reason) ->
                  #console.log "signin received reason"
                  $scope.error_message = reason.data.error
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.sign_out = ->
        User.sign_out().then(
          (response)->
            #console.log "signout received response"
            $window.location.reload()
          ,
          (reason) ->
            console.log "signout received reason"
        )

      $scope.sign_up = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: false
          backdropClick: false
          templateUrl: '<%= path_to_asset "signup_form.html" %>'
          controller: ->
            # for testing
            $scope.user = {}
            #  first_name: 'Test'
            #  last_name: 'User'
            #  email: 'test@civicevolution.org'
            #  password: 'aaaaaaaa'
            #  password_confirmation: 'aaaaaaaa'
            $scope.submit_sign_up = (user) ->
              #console.log "Submit by calling User.sign_up with data: #{user.name}/#{user.email}/#{user.password}"
              $scope.error_messages = null
              User.sign_up(user).then(
                (response)->
                  #console.log 'signup received response'
                  $scope.dialog.close()
                  $window.location.reload()
                ,
                (reason) ->
                  #console.log 'signup received reason'
                  if reason.data.errors
                    $scope.error_messages = reason.data.errors
                  else
                    console.log "a bigger error in sign up"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.forgot_password = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "forgot_password_form.html" %>'
          controller: ->
            $scope.user = {}
            #  email: 'alice@civicevolution.org'
            $scope.submit_forgot_password = (user) ->
              #console.log "Submit by calling User.forgot_password with email: #{user.email}"
              $scope.reset_error_message = null
              User.forgot_password(user).then(
                (response)->
                  #console.log 'forgot_password received response'
                  $scope.dialog.close()
                  $scope.acknowledge_dialog("An email has been sent to #{user.email}")
                ,
                (reason) ->
                  #console.log 'signup received reason'
                  if reason.data.errors
                    $scope.reset_error_message =
                      ("#{field} #{reason.data.errors[field]}" for field of reason.data.errors).join("\n")
                  else
                    console.log "a bigger error in forgot_password"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.request_confirmation = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "request_confirmation_form.html" %>'
          controller: ->
            $scope.user = {}
            #  email: 'brian@civicevolution.org'
            $scope.submit_request_confirmation = (user) ->
              #console.log "Submit by calling User.request_confirmation with email: #{user.email}"
              $scope.conf_error_message = null
              User.request_confirmation(user).then(
                (response)->
                  #console.log 'request_confirmation received response'
                  $scope.dialog.close()
                  $scope.acknowledge_dialog("An email has been sent to #{user.email}")
                ,
                (reason) ->
                  #console.log 'request_confirmation received reason'
                  if reason.data.errors
                    $scope.conf_error_message =
                      ("#{field} #{reason.data.errors[field]}" for field of reason.data.errors).join("\n")
                  else
                    console.log "a bigger error in request_confirmation"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.change_password = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "change-password-form.html" %>'
          controller: ->
            $scope.update_pw = {}
            $scope.submit_change_password = (update_pw) ->
              $scope.change_password_error_message = null
              User.change_password(update_pw).then(
                (response)->
                  console.log 'submit_change_password received response'
                  $scope.dialog.close()
                  $scope.acknowledge_dialog("Your password has been updated")
              ,
              (reason) ->
                #console.log 'request_confirmation received reason'
                if reason.data.errors
                  $scope.change_password_error_message =
                    ("#{field} #{reason.data.errors[field]}" for field of reason.data.errors).join("</br>")
                else
                  console.log "a bigger error in change_password"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()


      $scope.edit_profile = ->
        $state.transitionTo('edit-profile')
      $scope.test = ->
        console.log "CeUserBar test"
        User.test()

      $scope.acknowledge_dialog = (message) ->
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "acknowledge-dialog.html" %>'
          controller: ->
            $scope.message = message
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()
  ]
)

ce2_directives.directive('ceFocus', [ "$timeout", ($timeout) ->
  link: ( scope, element, attrs, controller) ->
    $timeout ->
      element[0].focus()
    , 100

])

ce2_directives.directive('ceComment',[ "$compile", "$timeout", ($compile, $timeout) ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    #console.log "function to select correct comment template"
    switch tAttrs.type
      when "conversation" then "<%= path_to_asset "comment-conversation.html" %>"
      when "summary" then "<%= path_to_asset "comment-summary.html" %>"
      when "call-to-action" then "<%= path_to_asset "comment-call-to-action.html" %>"
  replace: true
  scope: true
  priority: 100
  link: (scope, element, attrs) ->
    switch attrs.type
      when "call-to-action" then scope.comment =
        scope.conversation.call_to_action_comment

  compile: ->
    post: (scope, iElement, iAttrs, controller) ->
      #console.log "ceComment postLink function"
      if scope.comment?.text.match(/\[quote/)
        #console.log "XXX compile this node"
        $timeout ->
          $compile(iElement.find('quote'))(scope)

  controller: [ "$scope", "CommentData", "$compile",
    ($scope, CommentData, $compile) ->
      $scope.name = 'ceComment'

      $scope.edit = (comment_type, comment_id) ->
        $scope.$emit('request-edit', $scope.comment)

      $scope.view_history = (comment_id) ->
        $scope.history = CommentData.history(comment_id)
        $scope.history_url = "<%= path_to_asset "comment-history.html" %>"

      $scope.hide_history = ->
        $scope.history_url = null
        delete $scope.history

      $scope.share = ->
        console.log "Clicked Comment share link"

      $scope.reply = ->
        console.log "Clicked Comment reply link"

      $scope.flag = ->
        console.log "Clicked Comment flag link"

      $scope.test = ->
        console.log "Clicked Comment test link"
        debugger

      $scope.show_reply_target = (id) ->
        #console.log "show_reply_target for id: #{id}"
        $scope.comment.reply_target_expanded = ! $scope.comment.reply_target_expanded
        #console.log "toggle_in_comment_quote $scope.comment.reply_target_expanded: #{$scope.comment.reply_target_expanded}"
        if $scope.comment.reply_target_expanded && not $scope.comment.reply_full_text
          $scope.comment.reply_full_text = "Loading..."
          CommentData.get_comment(id).then (response) ->
            $scope.comment.reply_full_text = $scope.$root.converter.makeHtml(response.data.text)


      $scope.show_replies = (ids) ->
        #console.log "show_replies for ids: #{ids}"
        $scope.comment.replies_expanded = ! $scope.comment.replies_expanded
        #console.log "toggle_in_comment_quote $scope.comment.replies_expanded: #{$scope.comment.replies_expanded}"
        #converter.makeHtml(comment.text)
        if $scope.comment.replies_expanded && not $scope.comment.replies
          $scope.comment.replies_full_text = "Loading..."
          CommentData.get_comments(ids).then (response) ->
            $scope.comment.replies = response.data
            for reply in $scope.comment.replies
              reply.text = $scope.$root.converter.makeHtml(reply.text)
  ]
])

ce2_directives.directive('ceQuotedComment', ->
  restrict: 'A'
  templateUrl: "<%= path_to_asset "quote-in-comment.html" %>"
  replace: true
  scope: true
  transclude: true
  link: (scope, element, attrs) ->
    #console.log "assign quote attributes to the scope"
    scope.quote.id = attrs.id
    scope.quote.photoCode = attrs.photoCode
    scope.quote.type = attrs.type
    scope.quote.userName = attrs.userName

  controller: [ "$scope", "$compile", "$timeout", "$element", "$transclude", "CommentData", ($scope, $compile, $timeout, $element, $transclude, CommentData) ->
    #console.log "in the controller for ceQuotedComment"
    $scope.quote = {expanded: false}
    #console.log "quote.text = #{$transclude().text()}"
    #$timeout ->
    $scope.quote.text = $transclude().text()

    $scope.toggle_in_comment_quote = (id) ->
      $scope.quote.expanded = ! $scope.quote.expanded
      console.log "toggle_in_comment_quote $scope.quote.expanded: #{$scope.quote.expanded}"
      #converter.makeHtml(comment.text)
      if $scope.quote.expanded && not $scope.quote.full_text
        $scope.quote.full_text = "Loading..."
        CommentData.get_comment(id).then (response) ->
          $scope.quote.full_text = $scope.$root.converter.makeHtml(response.data.text)

    $scope.comment_quote_expand = ->
      event.stopPropagation()
      console.log "comment_quote_expand"

    $scope.comment_quote_up = (id) ->
      event.stopPropagation()
      console.log "comment_quote_up to ##{id}"

  ]
)

ce2_directives.directive('ceCommentForm', [ "$timeout", ($timeout) ->
  restrict: 'A'
  templateUrl: "<%= path_to_asset "reply-control.html" %>"
  replace: true
  scope: true
  link: (scope, element, attrs) ->
    #console.log "link function for ceCommentForm with scope: #{scope.$id}"
    #scope.newComment.conversation_id = scope.conversation.id
    #scope.newComment.type = attrs.type
    $timeout ->
      #scope.autoGrow(element.find('textarea')[0])
      scope.comment_length = scope[attrs.max]
      #angular.element( document.getElementById('reply-control')).addClass('open show-preview')
    , 100

  controller: [ "$scope", "CommentData",
    ($scope, CommentData) ->
      $scope.name = 'ceCommentForm'

      debug = false

      $scope.toggle_compose_window = ->
        $scope.$emit('toggle-compose-window')

      $scope.addComment = ->
        CommentData.create_in_ror 'save', $scope.newComment,
          angular.bind $scope, ->
            $scope.$root.$broadcast "user-event-notification", { action: "save comment #{$scope.newComment.type}"}
            this.newComment.id = null
            this.newComment.text = null
            $scope.$emit('clear-edit')

      $scope.clear_form = ->
        console.log "ceCommentForm:clear"
        $scope.newComment = { }

      $scope.cancel_edit = ->
        #console.log "cancel the comment edit"
        $scope.$emit('cancel-edit')

      $scope.$on 'update-new-comment-text', ->
        console.log "do update-new-comment-text"
        $scope.newComment.text = document.getElementById('wmd-input').value

      $scope.test = ->
        console.log "ceCommentForm: test"
  ]
])

ce2_directives.directive('ceCsrf', ->
  restrict: 'A'
  replace: false
  transclude: true
  templateUrl: "<%= path_to_asset "csrf-form-inputs.html" %>"
)


ce2_directives.directive('ceRatingSlider', [ "$document", ($document) ->
  restrict: 'A'
  replace: true
  scope: false
  templateUrl: "<%= path_to_asset "rating-slider.html" %>"
  controller: [ "$scope", "CommentData", ($scope, CommentData) ->
    $scope.persist_rating = ->
      #console.log "scope.persist_rating call on CommentData id: #{$scope.comment.id} with rating: #{$scope.rating}"
      CommentData.persist_rating_to_ror($scope.comment.id, $scope.comment.my_rating).then (response) ->
        $scope.comment.ratings_cache = response.data
  ]

  link: (scope, element, attrs) ->
    #console.log "link function to draw rating slider with scope: #{scope.$id} and comment.id: #{scope.comment.id}"

    scope.$watch('comment.ratings_cache', (oldValue, newValue) ->
      canvas = element.find('canvas')[0]
      G_vmlCanvasManager.initElement(canvas) if G_vmlCanvasManager?
      ctx = canvas.getContext('2d');
      grapher = new window.Graph();
      grapher.draw_rating_results(ctx, scope.comment.ratings_cache, scope.comment.my_rating);
    , true)

    canvas = element.find('canvas')
    mouse_binding_box = canvas.parent()
    handle = mouse_binding_box.find('div')
    debug = false
    canvas_width = 300
    if scope.comment.my_rating
      handle.css( 'left', "#{scope.comment.my_rating/100*canvas_width-9}px" )
    else
      handle.css( 'left', "#{50/100*canvas_width-9}px" )
    width = offset = null

    mouse_binding_box.bind "mousedown", ($event) ->
      angular.element(document.body).addClass('drag_in_process')
      if not width
        padding = 20
        width = _.width(mouse_binding_box[0]) - padding
        console.log "width: #{width}" if debug
      if not offset
        offset = _.offset(mouse_binding_box[0]).left
        console.log "offset: #{offset}" if debug
      calculate_position($event)
      $document.bind('mousemove', calculate_position)
      $document.bind('mouseup', mouseup)

    # TODO throttle the calls made by mouse move
    #element.bind('mousemove', _.throttle(_pd( (evt) ->
    #  return if not mouseDown
    #  calculate_position(evt)
    #),
    #25))

    mouseup = () ->
      $document.unbind('mousemove', calculate_position)
      $document.unbind('mouseup', mouseup)
      angular.element(document.body).removeClass('drag_in_process')
      persist_rating_now()

    calculate_position = ($event) ->
      pageX = if $event.pageX
        $event.pageX
      else if $event.clientX
        $event.clientX
      else
        $event.originalEvent.touches[0].pageX

      diff = pageX - offset

      scope.comment.my_rating = if diff < 0
        diff = 0 if diff < 0
        1
      else if diff > width
        diff = width + 12 if diff > width + 12
        100
      else
        Math.round( diff / width * 100 )

      handle.css( 'left', "#{diff-5}px" )
      console.log "pageX: #{pageX}, diff: #{diff}, scope.rating: #{scope.comment.my_rating}%" if debug
      scope.$apply()

    persist_rating_now = ->
      #console.log "persist rating now with scope: #{scope.$id}"
      scope.$apply( ->
        scope.persist_rating()
      )
])

ce2_directives.directive('ceProfilePhotoForm', ->
  restrict: 'A'
  templateUrl: "<%= path_to_asset "profile-photo-form.html" %>"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->

      debug = false

      $scope.file_selected = (element) ->
        if element.files.length > 0
          file_name = element.files[0].name
          console.log "ceProfilePhotoForm loading file: #{file_name}" if debug
          $scope.progress_bar_message = "<i class='icon-spinner icon-spin'></i><span>Loading #{file_name}</span>"

          console.log "ceProfilePhotoForm: a file is selected, add iframe" if debug
          $scope.$root.attachment_frame_id = 1 if not $scope.$root.attachment_frame_id
          $scope.$root.attachment_frame_id += 1
          target = "attachment_upload_iframe_#{$scope.$root.attachment_frame_id}"
          form = angular.element(element.form)
          form.attr('target', target)
          form.next().replaceWith(
            "<iframe id='#{target}' name='#{target}' onload='angular.element(this).scope().iframe_loaded(this)'></iframe>" )

          $scope.$apply()

      $scope.iframe_loaded = (el) ->
        # have access to $scope here
        console.log "ceProfilePhotoForm: window.iframe_loaded, get the contents" if debug

        if not $scope.form_disabled
          console.log "ceProfilePhotoForm: iframe is ready, submit the form" if debug
          $scope.form_disabled = true
          profile_photo_form.submit()

        content = el.contentDocument.body.innerText
        if content
          console.log "ceProfilePhotoForm: add this data to scope: #{content}" if debug
          $scope.user.sm1 = angular.fromJson(content).sm1
          # find and clear the file input
          inputs = angular.element(profile_photo_form).find('input')
          input for input in inputs when input.type == 'file'
          input.value = null
          angular.element(el).replaceWith('<div></div>')
          $scope.progress_bar_message = null
          $scope.form_disabled = false
          $scope.$apply()
  ]
)


ce2_directives.directive('ceSortable', [ "$document", "$timeout", "ConversationData",
  ($document, $timeout, ConversationData) ->
    restrict: 'A'
    priority: 500
    scope: true
    link: (scope, elm, attrs) ->
      return unless scope.comment.editable_by_user
      startX = startY = initialMouseX = initialMouseY = mouseY = 0
      placeholder = dragged = placeholder_upper = placeholder_lower = {}
      item_name = collection_name = collection_subname = ''

      # construct the html structure that will allow the sorting to work
      # in order to be draggable, item must be positioned absolute
      # to format the drag handle I want position absolute on handle and position relative on comment
      # so I wrap the comment with a div that will be position absolute so comm can be relative to allow handle placement
      # I also need a placeholder at the same level as the comment wrapper
      # the code below adds these pieces
      # it starts with the sortable element which is div.comment.SummaryComment
      # adding a bound class, class="{{comment.type}}", causes the 'ce-sortable-item' class to be lost
      elm.addClass('ce-sortable-item')
      elm.wrap('<div class="ce-sortable-item-carrier"></div>')
      item_carrier = elm.parent();

      if typeof item_carrier.parent().attr('ng-repeat')
        #console.log "Build up item using the ng-repeat parent element"
        item_pair = item_carrier.parent()
        item_pair.addClass("ce-sortable-item-pair")
      else
        #console.log "Build up original item"
        item_carrier.wrap('<div class="ce-sortable-item-pair"></div>')
        item_pair = item_carrier.parent()

      handle = angular.element('<div class="ce-sortable-handle"><i class="icon-sort icon-2x"></i></div>')
      elm.append(handle)

      item_carrier.after(angular.element('<div class="ce-sortable-placeholder ce-sortable-item"></div>'))

      elm = item_carrier

      #elm.html("y: #{ elm.parent().prop('offsetTop') }")

      debug = false

      handle.bind('mousedown', ($event) ->
        angular.element(document.body).addClass('drag_in_process')
        startX = elm.parent().prop('offsetLeft')
        startY = elm.parent().prop('offsetTop')  + 24
        width = elm.prop('offsetWidth')
        elm.css
          position: 'absolute'
          top:  "#{startX}px"
          width: "#{width}px"
          #left: "#{startY}px"

        console.log "startX: #{startX}, startY: #{startY}" if debug
        initialMouseX = $event.clientX
        initialMouseY = $event.clientY
        $document.bind('mousemove', mousemove)
        $document.bind('mouseup', mouseup)
        record_current_place_holders()

        elm.next().css
          display: 'block'
          height: "#{placeholder.h}px"
          width: "#{placeholder.w}px"

        adjust_dragged($event)

        false

      )

      mousemove = ($event) ->
        #console.log "mousemove initialMouseX: #{initialMouseX}, initialMouseY: #{initialMouseY}" if debug
        adjust_dragged($event)
        calculate_offset()
        false

      mouseup = () ->
        clear_sort_mode()
        [model_collection, dom_scope_collection] = get_scope_collection_for_dom_items_and_model()
        # now compare model in scope collection with the scope in DOM children

        if not collections_are_equal(model_collection, dom_scope_collection)
          # update the scope model
          #console.log "update the scope_model"
          #model_collection = dom_scope_collection
          elm.scope().$parent[collection_name][collection_subname] = dom_scope_collection
          $rootScope = elm.scope().$root
          $rootScope.$$phase || $rootScope.$apply()

          # persist the new collection ordered ids
          #console.log "persist the new collection order"
          conversation_code = elm.scope().$parent.conversation?.code
          comments_order = (item.id for item in dom_scope_collection )
          ConversationData.persist_summary_comment_order_to_ror(conversation_code, comments_order)
          $timeout ->
            angular.element(document.body).removeClass('drag_in_process')
          , 1000

      collections_are_equal = (collection_a, collection_b) ->
        for item, i in collection_a
          #console.log "compare item at #{i}"
          if item isnt collection_b[i]
            return false
        true

      clear_sort_mode = ->
        elm.css({position: 'static', left: "#{startX}px", top: "#{startY}px", width: ""})
        $document.unbind('mousemove', mousemove)
        $document.unbind('mouseup', mouseup)
        elm.next().css({display: 'none'})


      get_scope_collection_for_dom_items_and_model = ->
        [x, item_name, collection_name, collection_subname ] = elm.parent().attr('ng-repeat').match(/(\w+)\s+in\s+(\w+)\.(\w+)/)
        #console.log "item_name: #{item_name}, collection_name: #{collection_name},  collection_subname: #{collection_subname}"

        # get the DOM items for the collection
        dom_items = elm.parent().parent().children()
        # get the scope items for each dom_item
        scope_collection = (angular.element(dom_item).scope()[item_name] for dom_item in dom_items)

        model_collection = elm.scope().$parent[collection_name][collection_subname]
        [model_collection, scope_collection]




      record_current_place_holders = ->
        old_startX = startX
        startX = elm.parent().prop('offsetLeft')
        initialMouseX += (startX - old_startX)

        old_startY = startY
        startY = elm.parent().prop('offsetTop')
        initialMouseY += (startY - old_startY)

        placeholder =
          x: startX
          y: startY
          w: elm.prop('offsetWidth')
          h: elm.prop('offsetHeight')

        nextElm = elm.parent().next()
        if nextElm.length > 0
          placeholder_lower = angular.copy(placeholder)
          placeholder_lower.y = placeholder.y + nextElm.prop('offsetHeight')
        else
          placeholder_lower = null

        prevElm = angular.element( elm.parent()[0].previousElementSibling )
        if prevElm.length > 0
          placeholder_upper = angular.copy(placeholder)
          placeholder_upper.y = placeholder.y - prevElm.prop('offsetHeight')
        else
          placeholder_upper = null

        console.log "placeholder_upper: " + ("#{key}: #{placeholder_upper[key]}" for key of placeholder_upper).join(', ') if debug
        console.log "placeholder: " + ("#{key}: #{placeholder[key]}" for key of placeholder).join(', ') if debug
        console.log "placeholder_lower: " + ("#{key}: #{placeholder_lower[key]}" for key of placeholder_lower).join(', ') if debug


      adjust_dragged = ($event) ->
        dragged =
          x: startX + $event.clientX - initialMouseX
          y: startY + $event.clientY - initialMouseY
        #elm.css { left: "#{dragged.x}px" }
        elm.css { top: "#{dragged.y}px" }

      calculate_offset = ->
        #console.log "calculate_offset"
        #console.log "PH: " + ("#{key}: #{placeholder[key]}" for key of placeholder).join(', ') + ", DR: " + ("#{key}: #{dragged[key]}" for key of dragged).join(', ') if debug
        console.log "sY: #{startY}, iY: #{initialMouseY}, mY: #{mouseY}, DR.Y: #{dragged.y}, phU.y: #{placeholder_upper?.y}, ph.y: #{placeholder?.y}, phL.y: #{placeholder_lower?.y}" if debug

        offset =
          x: (dragged.x - placeholder.x)/placeholder.w * 100
          y: (dragged.y - placeholder.y)/placeholder.h * 100
        #console.log ("#{key}: #{offset[key]}" for key of offset).join(', ')

        if offset.y > 50 && placeholder_lower
          lower_y_offset = (dragged.y - placeholder_lower.y)/placeholder.h * 100
          #console.log "check offset with placeholder_lower, offset.y: #{offset.y}, lower offset y: #{lower_y_offset}"
          if Math.abs(offset.y) > Math.abs(lower_y_offset)
            console.log "SWAP THE ELEMENT WITH THE LOWER ELEMENT" if debug
            next_elm = elm.parent().next()
            next_elm.after(elm.parent())
            placeholder.y = elm.parent().prop('offsetTop')
            record_current_place_holders()

        else if offset.y < -50 && placeholder_upper
          upper_y_offset = (dragged.y - placeholder_upper.y)/placeholder.h * 100
          #console.log "check offset with placeholder_upper, offset.y: #{offset.y}, lower offset y: #{upper_y_offset}"
          if Math.abs(offset.y) > Math.abs(upper_y_offset)
            console.log "SWAP THE ELEMENT WITH THE UPPER ELEMENT" if debug
            prev_elm = angular.element( elm.parent()[0].previousElementSibling )
            elm.parent().after(prev_elm)
            placeholder.y = elm.parent().prop('offsetTop')
            record_current_place_holders()
])


ce2_directives.directive 'stopEvent', ->
  restrict: 'A',
  link: (scope, element, attr) ->
    element.bind attr.stopEvent, (e) ->
      e.stopPropagation()

ce2_directives.directive('ceConversationCard', ->
  restrict: 'A'
  templateUrl: "<%= path_to_asset "conversation-card.html" %>"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
                $scope.name = 'ceConversationCard'
  ]
)

ce2_directives.directive('ceConversationRightBar', [ "$compile",
  ($compile) ->
    restrict: 'A'
    templateUrl: '<%= path_to_asset "conversation-right-bar.html" %>'
    replace: true
    scope: false
    link: (scope, element, attrs) ->
      scope.$watch 'right_bar_panel_directive', (oldValue, newValue) ->
        if scope.right_bar_panel_directive
          #console.log "time to compile scope.right_bar_panel_directive: #{scope.right_bar_panel_directive}"
          directive = angular.element(document.getElementById('right-panel-directive'))
          $compile(directive)(scope);

    controller: [ "$scope", "$templateCache",
      ($scope, $templateCache) ->
        $scope.name = "ceConversationRightBar"
        $scope.open_panel = (link) ->
          if $scope.active_link == link
            return $scope.close_panel()

          if $scope.$root.dev_mode
            $templateCache.removeAll()
            dev = true
          else
            dev = false
          #console.log "open_panel for #{link}"
          $scope.right_bar_panel_directive = "<div id='right-panel-directive' ce-#{link}-panel dev='#{dev}'>Compile directive ce-#{link}-panel</div>"
          $scope.active_link = link
          $scope.$root.$broadcast "user-event-notification", { action: "open panel #{link}"}
        $scope.close_panel = ->
          #console.log "close the panel"
          $scope.active_link = null
        $scope.format_schedule_announcement = ->
          #console.log "scope.format_schedule_announcement starts_at: #{$scope.conversation.starts_at}, ends_at: #{$scope.conversation.ends_at}"
          now = new Date()
          convert_time_difference_to_dhm = (t1, t2) ->
            remaining_days = (t2-t1)/ (1000*60*60*24)
            days = Math.floor(remaining_days)
            remaining_hours = (remaining_days - days) * 24
            hours = Math.floor(remaining_hours)
            minutes = Math.floor((remaining_hours - hours) * 60)
            #[days, hours, minutes]
            if days > 1
              "#{days} days"
            else if days == 1 or hours > 1
              "#{days*24 + hours} hours"
            else
              "#{hours*60 + minutes} minutes"

          if $scope.conversation.starts_at > now
            # conversation has not started yet
            time_text = convert_time_difference_to_dhm( now, $scope.conversation.starts_at )
            "Conversation starts in <span>#{time_text}</span>"
          else if $scope.conversation.ends_at < now
            # conversation ended already
            time_text = convert_time_difference_to_dhm( $scope.conversation.ends_at, now )
            "Conversation ended <span>#{time_text}</span>ago"
          else
            # conversation in progress
            time_text = convert_time_difference_to_dhm( now, $scope.conversation.ends_at )
            "Conversation ends in <span>#{time_text}</span>"
        $scope.conversation.schedule_announcement = $scope.format_schedule_announcement()
    ]
])

# Directives for the panels

ce2_directives.directive('ceStatsPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/stats.html" %>#{prefix}"
  replace: false
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceStatsPanel'
  ]
)

ce2_directives.directive('ceNotificationPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/notification.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "NotificationRequest", "$timeout",
    ($scope, NotificationRequest, $timeout) ->
      $scope.name = 'ceNotificationPanel'
      $scope.form_submit_status = if $scope.conversation.notification_request.default then 'Confirm settings' else "Update settings"
      $scope.updateNotifications = ->
        #console.log "Update the privacy settings to RoR"
        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        NotificationRequest.save_settings($scope.conversation.code, $scope.conversation.notification_request).then (response)->
          console.log "NotificationRequest.save_settings received response"
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update settings'
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel notification'}
          ,800
  ]
)

ce2_directives.directive('ceInvitePanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/invite.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceInvitePanel'
  ]
)

ce2_directives.directive('ceSharePanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/share.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceSharePanel'
  ]
)

ce2_directives.directive('cePrintPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/print.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'cePrintPanel'
  ]
)

ce2_directives.directive('cePdfPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/pdf.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'cePdfPanel'
      console.log "In cePdfPanel controller"
  ]
)

ce2_directives.directive('ceDownloadPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/download.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceDownloadPanel'
      console.log "In ceDownloadPanel controller"
  ]
)

ce2_directives.directive('cePrivacyPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/privacy.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "ConversationData", "$timeout",
    ($scope, ConversationData, $timeout) ->
      $scope.name = 'cePrivacyPanel'
      $scope.form_submit_status = if $scope.conversation.privacy?.confirmed_privacy then 'Update settings' else "Confirm settings"
      #console.log "In cePrivacyPanel controller"
      $scope.privacy = $scope.conversation.privacy
      $scope.updatePrivacy = ->
        #console.log "Update the privacy settings to RoR"
        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        ConversationData.persist_privacy_to_ror($scope.conversation.code, $scope.privacy).then (response)->
          #console.log "ConversationData.persist_privacy_to_ror received response"
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update settings'
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel privacy'}
          ,800
  ]
)

ce2_directives.directive('ceSchedulePanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/schedule.html" %>#{prefix}"
  replace: true
  scope: true
  link: (scope, element, attrs) ->
    scope.$watch 'start_date', (oldValue, newValue) ->
      scope.show_start_calendar = false
      scope.show_end_calendar = false
    scope.$watch 'end_date', (oldValue, newValue) ->
      scope.show_start_calendar = false
      scope.show_end_calendar = false
    temp.right_bar_scope = scope

  controller: [ "$scope", "ConversationData", "$timeout", "$document",
    ($scope, ConversationData, $timeout, $document) ->
      $scope.name = 'ceSchedulePanel'
      $scope.form_submit_status = if $scope.conversation.privacy?.confirmed_schedule then 'Update schedule' else "Confirm schedule"

      $scope.show_start_calendar = false
      $scope.show_end_calendar = false
      $scope.toggle_start_calendar = ->
        $scope.show_start_calendar = !$scope.show_start_calendar
        if $scope.show_start_calendar
          $scope.show_end_calendar = false

      $scope.toggle_end_calendar = ->
        $scope.show_end_calendar = !$scope.show_end_calendar
        if $scope.show_end_calendar
          $scope.show_start_calendar = false

      # conversation start time
      if $scope.conversation.starts_at
        date = new Date($scope.conversation.starts_at)
        $scope.start_date = date
        $scope.start_time = date
      else
        $scope.today_start = ->
          $scope.start_date = new Date()
        $scope.today_start()

        $scope.start_time = new Date()
        # round down to the last hour
        $scope.start_time.setMinutes(0)


      # conversation end time
      if $scope.conversation.ends_at
        date = new Date($scope.conversation.ends_at)
        $scope.end_date = date
        $scope.end_time = date
      else
        $scope.today_end = ->
          $scope.end_date = new Date()
        $scope.today_end()

        $scope.end_time = new Date()
        # round down to the last hour
        $scope.end_time.setMinutes(0)


      close_calendars= ->
        $document.unbind('mouseup', close_calendars)
        $scope.show_start_calendar = false
        $scope.show_end_calendar = false

      $scope.hstep = 1
      $scope.mstep = 15

      $scope.ismeridian = true
      $scope.toggleMode = ->
        $scope.ismeridian = ! $scope.ismeridian


      $scope.showWeeks = false

      $scope.toggleMin = ->
        $scope.minDate = ( $scope.minDate ) ? null : new Date()

      $scope.toggleMin()

      $scope.updateSchedule = ->
        #console.log "Update the schedule to RoR"
        $scope.show_start_calendar = false
        $scope.show_end_calendar = false
        starts_at = $scope.start_date
        starts_at.setHours( $scope.start_time.getHours() )
        starts_at.setMinutes( $scope.start_time.getMinutes() )
        starts_at.setSeconds( 0 )

        ends_at = $scope.end_date
        ends_at.setHours( $scope.end_time.getHours() )
        ends_at.setMinutes( $scope.end_time.getMinutes() )
        ends_at.setSeconds( 0 )

        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        ConversationData.persist_schedule_to_ror($scope.conversation.code, starts_at, ends_at).then (response)->
          #console.log "ConversationData.persist_schedule_to_ror received response"
          $scope.conversation.starts_at = starts_at
          $scope.conversation.ends_at = ends_at
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update schedule'
            $scope.conversation.schedule_announcement = $scope.format_schedule_announcement()
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel schedule'}
          ,800


  ]
)

ce2_directives.directive('ceTagsPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/tags.html" %>#{prefix}"
  replace: true
  scope: true
  link: (scope, element, attrs) ->
    element.find('input').bind 'blur', ->
      scope.create_new_tag( event.target )
      scope.$root.$$phase || scope.$root.$apply()

  controller: [ "$scope", "ConversationData", "$timeout",
    ($scope, ConversationData, $timeout) ->
      $scope.name = 'ceTagsPanel'
      $scope.form_submit_status = 'Update tags'
      #console.log "In ceTagsPanel controller"
      $scope.delete_tag = ->
        event.stopPropagation()
        remove_tag = angular.element(event.target).parent().find('div').text()
        #console.log "delete_tag: #{tag}"
        for tag, index in $scope.conversation.tags
          if tag is remove_tag
            $scope.conversation.tags.splice(index,1)
            break
      $scope.focus_to_input = (el) ->
        #console.log "set focus to input"
        input = angular.element(event.target).find('input')[0]?.focus()
      $scope.keydown = (el) ->
        #console.log "keydown event.keyCode: #{event.keyCode}"
        if event.keyCode == 13
          $scope.create_new_tag( event.target )
        if event.keyCode == 8 && event.currentTarget.value == ""
          #console.log "edit the previous tag"
          # get the last tag
          event.currentTarget.value = $scope.conversation.tags.pop() + ' '
      $scope.create_new_tag = (el) ->
        if el.value != ""
          $scope.conversation.tags.push el.value
          el.value = ""

      $scope.updateTags = ->
        #console.log "Update the tags to RoR"
        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        ConversationData.persist_tags_to_ror($scope.conversation.code, $scope.conversation.tags).then (response)->
          #console.log "ConversationData.persist_tags_to_ror received response"
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update tags'
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel tags'}
          ,800
  ]
)

ce2_directives.directive('ceParticipantsPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/participants.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceParticipantsPanel'
  ]
)

ce2_directives.directive('ceReviewPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/review.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceReviewPanel'
  ]
)

ce2_directives.directive('ceCreateConversationWizard', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/create-conversation-wizard.html" %>#{prefix}"
  replace: true
  scope: true
  compile: (tElement, tAttrs) ->
    #console.log "compile for wizard"
    # read the wizard template to generate a map of step targets
    wizard_map = {}
    num_steps = 0
    code = 1
    for div in tElement.find('div')
      div = angular.element(div)
      if div.hasClass('page')
        #console.log "div id: #{div.attr('ng-switch-when')}"
        wizard_map["page_#{code}"] =
          code: "page_#{code}"
          prev_code: if code > 1 then "page_#{code - 1}" else null
          next_code: "page_#{code + 1}"
          pos: div.attr('wiz-pos')
          trigger:  div.attr('trigger')
          action:  div.attr('action')
          test:  div.attr('test')

        # set the template switch code to match the map code
        div.attr('ng-switch-when', "page_#{code}")
        code += 1
        num_steps += 1

    #for step of wizard_map
    #  current_step = wizard_map[step]
    #  console.log ("#{key}: #{current_step[key]}" for key of current_step).join(', ')

    # Create a postlink function to share this map with scope & start wizard
    (scope, iElement, iAttrs) ->
      #console.log "this is the postlink function"
      scope.$root.wizard_map = wizard_map
      scope.wizard_step = 'page_1'
      scope.wizard_num_steps = num_steps
      scope.wizard_navigation(1)
      #for page of scope.$root.wizard_map
      #  console.log "#{page}: #{scope.$root.wizard_map[page]}"
  controller: [ "$scope", "$timeout", "ConversationData",
    ($scope, $timeout, ConversationData) ->
      $scope.name = 'ceCreateConversationWizard'
      $scope.wizard_complete = false
      $scope.form_submit_status = "Publish conversation"
      debug_wizard = false


      $scope.wizard_navigation = (direction) ->
        current_step = $scope.$root.wizard_map[$scope.wizard_step]
        if direction == 'previous' and current_step['prev_code']
          #console.log "wizard_navigation to prev"
          current_step = $scope.$root.wizard_map[ current_step['prev_code'] ]
        else if direction == 'next' and current_step['next_code']
          #console.log "wizard_navigation to next"
          current_step = $scope.$root.wizard_map[ current_step['next_code'] ]
        else if !isNaN(direction)
          current_step = $scope.$root.wizard_map[ "page_#{direction}" ]

        # else reloads the current page

        if not current_step
          console.log "No more wizard pages to display, clear/remove wizard" if debug_wizard
          $timeout ->
            $scope.$root.conversation_wizard_mode = false
          return

        $scope.wizard_step = current_step['code']
        $scope.wizard_current_step = current_step
        console.log "current_step: " + ("#{key}: #{current_step[key]}" for key of current_step).join(', ') if debug_wizard

        # is the test valid for this wizaard page
        console.log "test: #{current_step.test}" if debug_wizard

        if current_step.test && !$scope.$eval(current_step.test)
          $scope.wizard_navigation('next')
          return

        $timeout ->
          adjust_popup()

        adjust_popup = ->
          debug_position = false
          console.log "$scope.wizard_step: #{ current_step['code'] }" if debug_position
          step = $scope.conversation_wizard_step
          wizard = angular.element( document.getElementById('create-conversation-wizard'))
          wizard.attr('class','popover')
          wizard_width = wizard.prop('offsetWidth')
          wizard_height = wizard.prop('offsetHeight')
          console.log "wizard_height: #{wizard_height}, wizard_width: #{wizard_width}" if debug_position

          position = current_step['pos'].split(':')
          console.log "position: #{position}" if debug_position
          switch position[0]
            when 'el'
              console.log "Position #{position[2]} of #{position[1]}" if debug_position
              el = document.getElementById(position[1])
              if not el
                $timeout ->
                  adjust_popup()
                ,400
                return
              offset = _.offset(el)
              el = angular.element(el)
              width = el.prop('offsetWidth')
              height = el.prop('offsetHeight')
              console.log "offset.top: #{offset.top}, offset.left: #{offset.left}, height: #{height}, width: #{width}" if debug_position
              switch position[2]
                when 'below'
                  console.log "relative position below" if debug_position
                  top = offset.top + height
                  left = offset.left - wizard_width/2 + width/2
                  wizard.addClass('bottom')
                when 'above'
                  console.log "relative position above" if debug_position
                  top = offset.top - wizard_height
                  left = offset.left
                  wizard.addClass('top')
                when 'left'
                  console.log "relative position left" if debug_position
                  top = offset.top - wizard_height/2 + height/2
                  left = offset.left - wizard_width
                  wizard.addClass('left')
                when 'right'
                  console.log "relative position right" if debug_position
                  top = offset.top - wizard_height/2 + height/2
                  left = offset.left + width
                  wizard.addClass('right')
                else console.log "Don't understand relative position: #{position[2]}"

            when 'box'
                # box:panel-privacy:right:top
                if position[1] == 'window'
                  box =  angular.element( window )
                  offset = {top: 0, left: 0}
                  width = window.innerWidth
                  height = window.innerHeight
                else
                  box = angular.element( document.getElementById(position[1]))
                  if box.length == 0
                    $timeout ->
                      adjust_popup()
                    ,400
                    return
                  offset = _.offset(box)
                  width = box.prop('offsetWidth')
                  height = box.prop('offsetHeight')
                console.log "Position in box: #{position[1]}, at #{position[2]}, #{position[3]}" if debug_position
                left = switch position[2]
                  when 'left' then 0 + offset.left
                  when 'center' then (width)/2 - wizard_width/2 + offset.left
                  when 'right' then width - wizard_width + offset.left
                  else console.log "Don't understand window left position: #{position[1]}"
                top = switch position[3]
                  when 'top' then 0 + offset.top
                  when 'center' then (height)/2 - wizard_height/2 + offset.top
                  when 'bottom' then (height) - wizard_height + offset.top
                  else console.log "Don't understand window top position: #{position[1]}"

              else
                console.log "Don't know how to position type: #{position[0]}"

          console.log "Old position top: #{wizard.css('top')}, left: #{wizard.css('left')}" if debug_position
          console.log "New position top: #{top}, left: #{left}" if debug_position

          wizard.css
            position: 'absolute'
            top:  "#{top}px"
            left: "#{left}px"


      $scope.$on "user-event-notification", (event, data) ->
        #console.log "user-event-notification for data.action: #{data.action}"
        # is this a trigger for the current state?
        if data.action is $scope.wizard_current_step['trigger']
          #console.log "The current step has been triggered by #{data.action} to do action: #{$scope.wizard_current_step['action']}"
          switch $scope.wizard_current_step['action']
            when 'next' then $scope.wizard_navigation('next')
            else  console.log "Don't know what to do with wizard notification action #{$scope.wizard_current_step['action']}"
        else
          #console.log "The current step has NOT been triggered by #{data.action}"
  ]
)