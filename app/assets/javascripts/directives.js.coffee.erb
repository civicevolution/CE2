# Add custom directives here

'use strict';

ce2_directives = angular.module('CE2.directives', ['ui.bootstrap'])

ce2_directives.directive('ceUserBar', ->
  restrict: 'A'
  templateUrl: '<%= path_to_asset "user/user-bar.html" %>'
  replace: true
  scope: false
  controller: [ "$scope", "User", "$dialog", "$http", "$timeout", "$state", "$window", "$location", "FayeService",
    ($scope, User, $dialog, $http, $timeout, $state, $window, $location, FayeService) ->
      #$scope.user = User.get()
      $scope.user = {}
      User.get().then(
        (response)->
          #console.log "ceUserBar.User.get() received response"
          $scope.user = response
          $scope.$root.ror_session_id = response.session_id
          $scope.$root.$broadcast 'update-user-data'
          FayeService.subscribe( "/monitor", (message)->
            console.log "Received realtime notification on monitor: #{JSON.stringify(message, null, 4)}"
          )
          FayeService.send_status()

      )
      $scope.sign_in = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "user/signin_form.html" %>'
          controller: ->
            $scope.user = {}
            # for testing
            $scope.user =
              email: 'brian@civicevolution.org'
              password: 'evolution'
            $scope.submit_sign_in = (user) ->
              console.log "Submit by calling User.sign_in with credentials: #{user.email}/#{user.password}"
              $scope.error_message = null
              User.sign_in(user).then(
                (response)->
                  #console.log "signin received response"
                  $scope.dialog.close()
                  $window.location.reload()
                ,
                (reason) ->
                  #console.log "signin received reason"
                  $scope.error_message = reason.data.error
                  $scope.show_confirm = true
              )
            $scope.cancel = ->
              $scope.error_message = null
              $scope.show_confirm = false
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.sign_out = ->
        $scope.$root.$broadcast 'user-sign-out'
        User.sign_out().then(
          (response)->
            #console.log "signout received response"
            #$window.location.reload()
            $location.path('/')
            $timeout ->
              $window.location.reload()
            , 200
          ,
          (reason) ->
            console.log "signout received reason"
        )

      $scope.sign_up = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: false
          backdropClick: false
          templateUrl: '<%= path_to_asset "user/signup_form.html" %>'
          controller: ->
            # for testing
            $scope.user = {}
            #  first_name: 'Test'
            #  last_name: 'User'
            #  email: 'test@civicevolution.org'
            #  password: 'aaaaaaaa'
            #  password_confirmation: 'aaaaaaaa'
            $scope.submit_sign_up = (user) ->
              #console.log "Submit by calling User.sign_up with data: #{user.name}/#{user.email}/#{user.password}"
              $scope.error_messages = null
              User.sign_up(user).then(
                (response)->
                  #console.log 'signup received response'
                  $scope.dialog.close()
                  $window.location.reload()
                ,
                (reason) ->
                  #console.log 'signup received reason'
                  if reason.data.errors
                    $scope.error_messages = reason.data.errors
                  else
                    console.log "a bigger error in sign up"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.forgot_password = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "user/forgot_password_form.html" %>'
          controller: ->
            $scope.user = {}
            #  email: 'alice@civicevolution.org'
            $scope.submit_forgot_password = (user) ->
              #console.log "Submit by calling User.forgot_password with email: #{user.email}"
              $scope.reset_error_message = null
              User.forgot_password(user).then(
                (response)->
                  #console.log 'forgot_password received response'
                  $scope.dialog.close()
                  $scope.acknowledge_dialog("Thank you", "An email has been sent to #{user.email}")
                ,
                (reason) ->
                  #console.log 'signup received reason'
                  if reason.data.errors
                    $scope.reset_error_message =
                      ("#{field} #{reason.data.errors[field]}" for field of reason.data.errors).join("\n")
                  else
                    console.log "a bigger error in forgot_password"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.request_confirmation = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "user/request_confirmation_form.html" %>'
          controller: ->
            $scope.submit_request_confirmation = (user) ->
              #console.log "Submit by calling User.request_confirmation with email: #{user.email}"
              $scope.conf_error_message = null
              User.request_confirmation(user).then(
                (response)->
                  #console.log 'request_confirmation received response'
                  $scope.dialog.close()
                  message = "An email has been sent to #{user.email}\n\n" +
                  "If you do not receive a confirmation email from CivicEvolution, please check your spam folder.\n\n" +
                  "If you do not find the email or the email address above is incorrect, email us: support@civicevolution.org"
                  $scope.acknowledge_dialog("Confirmation email sent", message)
                ,
                (reason) ->
                  #console.log 'request_confirmation received reason'
                  if reason.data.errors
                    $scope.conf_error_message =
                      ("#{field} #{reason.data.errors[field]}" for field of reason.data.errors).join("\n")
                  else
                    console.log "a bigger error in request_confirmation"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.change_password = ->
        $scope.dialog?.close()
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "user/change-password-form.html" %>'
          controller: ->
            $scope.update_pw = {}
            $scope.submit_change_password = (update_pw) ->
              $scope.change_password_error_message = null
              User.change_password(update_pw).then(
                (response)->
                  console.log 'submit_change_password received response'
                  $scope.dialog.close()
                  $scope.acknowledge_dialog("Your password has been updated")
              ,
              (reason) ->
                #console.log 'request_confirmation received reason'
                if reason.data.errors
                  $scope.change_password_error_message =
                    ("#{field} #{reason.data.errors[field]}" for field of reason.data.errors).join("</br>")
                else
                  console.log "a bigger error in change_password"
              )
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()


      $scope.edit_profile = ->
        $state.transitionTo('edit-profile')
      $scope.test = ->
        console.log "CeUserBar test"
        User.test()

      $scope.acknowledge_dialog = (title,message) ->
        $scope.dialog = $dialog.dialog(
          backdrop: true
          keyboard: true
          backdropClick: true
          templateUrl: '<%= path_to_asset "acknowledge-dialog.html" %>'
          controller: ->
            $scope.title = title
            $scope.message = message
            $scope.cancel = ->
              $scope.dialog.close()
        )
        $scope.dialog.open()

      $scope.go_home = ->
        switch
          when $location.$$path.match(/\/cmp\/.*/)
            component_code = $location.$$path.match(/\/cmp\/(\w+).*/)[1]
            new_url = "/agenda/code:#{component_code}/agenda-home"
            $location.path( new_url)
          when $location.$$path.match(/\/agenda\/\w+-\w+/)
            agenda_code = $location.$$path.match(/\/agenda\/(\w+)-.*/)[1]
            new_url = "/agenda/#{agenda_code}/agenda-home"
            $location.path( new_url)
          when $location.$$path.match(/\/agenda\/.*/)
            $location.path( "/events" )
          when $location.$$path.match(/\/events.*/)
            $location.path( "/home" )
          when $location.$$path.match(/\/home.*/)
            $location.path( "/home" )
          else
            console.error "I don't know where to go for $location.$$path: #{$location.$$path}"
  ]
)

ce2_directives.directive('ceFocus', [ "$timeout", ($timeout) ->
  link: ( scope, element, attrs, controller) ->
    $timeout ->
      element[0].focus()
    , 100

])

ce2_directives.directive('ceComment',[ "$compile", "$timeout", ($compile, $timeout) ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    #console.log "function to select correct comment template"
    switch tAttrs.type
      when "conversation" then "<%= path_to_asset "comment/conversation.html" %>"
      when "summary" then "<%= path_to_asset "comment/summary.html" %>"
      when "call-to-action" then "<%= path_to_asset "comment/call-to-action.html" %>"
      when "table" then "<%= path_to_asset "comment/table.html" %>"
      when "theme" then "<%= path_to_asset "comment/theme.html" %>"
      when "live-theme" then "<%= path_to_asset "comment/live-theme.html" %>"
  replace: true
  scope: true
  priority: 100
  compile: ->
    post: (scope, iElement, iAttrs, controller) ->
      #console.log "ceComment postLink function"
      if scope.comment?.text.match(/\[quote/)
        #console.log "XXX compile this node"
        $timeout ->
          $compile(iElement.find('blockquote'))(scope)
      scope.comment.quote_expanded = false
      if scope.comment.reply_to_targets
        scope.comment.in_reply_tag = reply for reply in scope.comment.reply_to_targets when reply.quote is false

      scope.$watch 'comment.text', (oldValue, newValue) ->
        if scope.comment.text.match(/\[quote/)
          #console.log "recompile the comment with a quote in it"
          $timeout ->
            $compile(iElement.find('blockquote'))(scope)

  controller: [ "$scope", "CommentData", "$compile", "$location", "$anchorScroll", "$timeout", "$dialog",
    ($scope, CommentData, $compile, $location, $anchorScroll, $timeout, $dialog) ->
      $scope.name = 'ceComment'

      if $scope.comment
        $scope.comment.body_template_url = CommentData.set_comment_body_template_url($scope.comment.published, $scope.comment.status)

      $scope.toggle_comment = ->
        $scope.show_comment = !$scope.show_comment

      $scope.short_disable_dbl_click = false
      $scope.edit = (action) ->
        if !$scope.short_disable_dbl_click
          $scope.$root.$broadcast 'open-comment-form', {action: action, comment: $scope.comment}
          $scope.short_disable_dbl_click = true
          $timeout ->
            $scope.short_disable_dbl_click = false
          ,700

      $scope.broadcast_action = (cmd) ->
        $scope.$root.$broadcast cmd, {comment: $scope.comment}

      $scope.view_history = (comment_id) ->
        $scope.history = CommentData.history(comment_id)
        $scope.history_url = "<%= path_to_asset "comment/history.html" %>"

      $scope.hide_history = ->
        $scope.history_url = null
        delete $scope.history

      $scope.bookmark = ->
        #console.log "bookmark comment: #{$scope.comment.id}"
        action = if $scope.comment.bookmark then 'delete' else 'post'
        CommentData.adjust_comment_bookmark(action, $scope.comment.id, $scope.comment.version).then(
          (response) ->
            $scope.comment.bookmark = if action is 'delete' then false else true
        )

      $scope.reply = (action) ->
        $scope.$root.$broadcast 'open-comment-form', {action: action, comment: $scope.comment}

      $scope.share = (id) ->
        $scope.$root.$broadcast 'user-clicked-dead-link', { action: 'Share', conversation_code: $scope.conversation.code, details: {type: $scope.comment.type, id: $scope.comment.id}}

      $scope.flag = ->
        CommentData.flag_comment($scope.comment.id, $scope.comment.version).then(
          (response) ->
            title = 'Thank you'
            msg = "Thank you for reporting this content to us."
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
        )

      $scope.show_reply_target = (id) ->
        #console.log "show_reply_target for id: #{id}"
        $scope.comment.reply_target_expanded = ! $scope.comment.reply_target_expanded
        #console.log "toggle_in_comment_quote $scope.comment.reply_target_expanded: #{$scope.comment.reply_target_expanded}"
        if $scope.comment.reply_target_expanded && not $scope.comment.reply_full_text
          $scope.comment.target_comment = {text: "Loading..."}
          CommentData.get_comment(id).then (response) ->
            $scope.comment.target_comment = response.data

      $scope.show_replies = ->
        ids = (reply.id for reply in $scope.comment.replies)
        #console.log "show_replies for ids: #{ids}"
        $scope.comment.replies_expanded = ! $scope.comment.replies_expanded
        #console.log "toggle_in_comment_quote $scope.comment.replies_expanded: #{$scope.comment.replies_expanded}"
        if $scope.comment.replies_expanded && not $scope.comment.reply_comments
          $scope.comment.reply_comments = [{text: "Loading..."}]
          CommentData.get_comments(ids).then (response) ->
            $scope.comment.reply_comments = response.data
            for reply in $scope.comment.reply_comments
              reply.text = $scope.$root.converter.makeHtml(reply.text)

      $scope.goto_comment = (id) ->
        event.stopPropagation()
        $location.hash("com-#{id}")
        $anchorScroll()
        console.log "goto_comment to ##{id}"

      $scope.text_select_by_mouse = ->
        $scope.$root.$broadcast('text-select-by-mouse')
        
      $scope.toggle_details = ->
        $scope.show_details = if $scope.show_details then false else true

  ]
])

ce2_directives.directive('ceQuotedComment', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    switch angular.fromJson(tAttrs.ceQuote).quote_type
      when "example" then "<%= path_to_asset "comment/example-in-comment.html" %>"
      when "reply" then "<%= path_to_asset "comment/quote-in-comment.html" %>"
      else "<%= path_to_asset "comment/quote-in-comment.html" %>"
  replace: true
  scope: true
  transclude: true
  link: (scope, element, attrs) ->
    scope.quote.data = angular.fromJson(attrs.ceQuote)

  controller: [ "$scope", "$compile", "$timeout", "$element", "$transclude", "CommentData", "$location", "$anchorScroll",
    ($scope, $compile, $timeout, $element, $transclude, CommentData, $location, $anchorScroll) ->
      #console.log "in the controller for ceQuotedComment"
      $scope.quote = {expanded: false}
      #console.log "quote.text = #{$transclude().text()}"
      #$timeout ->
      $scope.quote.text = $transclude().text()

      $scope.toggle_in_comment_quote = (id) ->
        $scope.quote.expanded = ! $scope.quote.expanded
        console.log "toggle_in_comment_quote $scope.quote.expanded: #{$scope.quote.expanded}"
        #converter.makeHtml(comment.text)
        if $scope.quote.expanded && not $scope.quote.full_text
          $scope.quote.full_text = "Loading..."
          CommentData.get_comment(id).then (response) ->
            $scope.quote.full_text = $scope.$root.converter.makeHtml(response.data.text)

      $scope.comment_quote_expand = ->
        event.stopPropagation()
        console.log "comment_quote_expand"

      $scope.goto_comment = (id) ->
        event.stopPropagation()
        $location.hash("com-#{id}")
        $anchorScroll()
        console.log "goto_comment to ##{id}"
  ]
)

ce2_directives.directive('ceCommentForm', [ "$timeout", ($timeout) ->
  restrict: 'A'
  templateUrl: "<%= path_to_asset "comment/reply-control.html" %>"
  replace: true
  scope: true
  link: (scope, element, attrs) ->
    #console.log "link function for ceCommentForm with scope: #{scope.$id}"
    #scope.newComment.conversation_id = scope.conversation.id
    #scope.newComment.type = attrs.type
    scope.disable_monitor = true if typeof attrs.noMonitor isnt 'undefined'

    if typeof attrs.noFormat isnt 'undefined'
      scope.disable_formatting = true
      scope.$root.initialize_markdown_system( {disable_editor: true} )
    else
      scope.$root.initialize_markdown_system()

    scope.$watch 'newComment.text', (oldValue, newValue) ->
      #console.log "#{Math.round(new Date().getTime()/1000)}: [#{scope.newComment.text}] comment form watch comment.text is triggered, scope.do_auto_save: #{scope.do_auto_save}"
      scope.newComment.status_message = ''
      if scope.do_auto_save && scope.newComment.text?.length > 19
        #console.log "#{Math.round(new Date().getTime()/1000)}: [#{scope.newComment.text}] set timeout for autosave"
        scope.do_auto_save = false
        $timeout ->
          scope.call_auto_save()
        ,5000
      #else
        #console.log "#{Math.round(new Date().getTime()/1000)}: [#{scope.newComment.text}] ignore newComment.text change"

  controller: [ "$scope", "CommentData", "$dialog", "$timeout",
    ($scope, CommentData, $dialog, $timeout) ->
      $scope.name = 'ceCommentForm'
      debug = false

      $scope.newComment = {}

      $scope.do_auto_save = false
      $scope.call_auto_save = ->
        #console.log "#{Math.round(new Date().getTime()/1000)}: [#{$scope.newComment.text}] Do autosave"
        $scope.do_auto_save = true
        $scope.newComment.status_message = 'Saving...'
        CommentData.autosave($scope.newComment).then(
          (response)->
            #console.log "#{Math.round(new Date().getTime()/1000)}: [#{$scope.newComment.text}] CommentData.autosave success"
            $scope.newComment.status_message = 'Saved'
        ,
        (reason) ->
          console.log "XXXX CommentData.autosave fail"
        )

      CommentData.load_autosaved().then(
        (response)->
          #console.log "CommentData.load_autosaved success"
          $scope.use_autosaved_record(response.data)
      ,
        (reason) ->
          console.log "ceCommentForm.load autosaved fail"
          $scope.do_auto_save = true
        )

      clear_newComment_fields = ->
        for key of $scope.newComment
          delete $scope.newComment[key] unless key=='email' || key =='first_name' || key =='last_name'

      clear_auto_saved_draft = ->
        CommentData.clear_autosaved().then(
          (response)->
            # this will return the older autosave record if there were two of them
            $scope.use_autosaved_record(response.data.data) if response.data
        ,
        (reason) ->
          console.log "ceCommentForm.clear autosaved failed"
          $scope.do_auto_save = true
        )

      $scope.use_autosaved_record = (data) ->
        for key of data
          if key != 'status_message'
            $scope.newComment[key] = data[key]
        set_special_classes()
        adjust_conversation_to_form()
        $scope.$root.$$phase || $scope.$root.$apply()
        # if there is a comment in progress, show draft bar
        if $scope.newComment.type && $scope.newComment.text?.match(/\w{2,}/)
          angular.element( document.getElementById('reply-control')).addClass('draft')
        $timeout ->
          $scope.do_auto_save = true
        , 3000

      $scope.conversation.comment_purposes = [
        {value: 'experience', key: 'My experience', labels: "Unhelpful~Helpful"},
        {value: 'opinion', key: 'My opinion', labels: "Disagree~Agree"},
        {value: 'fact', key: 'Factual information', labels: "Unhelpful~Helpful"},
        {value: 'suggestion', key: 'My suggestion', labels: "Unhelpful~Helpful"},
        {value: 'question', key: 'My question', labels: "Unimportant~Important"}
      ]

      $scope.$on 'initialize-markdown-editor', (event, obj) ->
        editor = obj.editor
        editor_id = obj.editor_id || 'wmd-input'
        init_ctr = obj.init_ctr || 5
        #console.log "initialize_markdown_editor with editor_id: #{editor_id} and init_ctr: #{init_ctr}"
        edit_input = document.getElementById(editor_id)
        if edit_input && editor && editor.run
          #console.log "init_editor now"
          editor.run()
        else if (init_ctr -= 1 ) > 0
          #console.log "try to init editor in 1 sec"
          $timeout ->
            $scope.$root.$broadcast 'initialize-markdown-editor', {editor: editor, editor_id: editor_id, init_ctr: init_ctr }
          , 1000

      last_monitored_key_code_non_printable = true
      $scope.monitor_keydown = ->
        #console.log "monitor_keydown #{event.keyCode}, last_monitored_key_code_non_printable: #{last_monitored_key_code_non_printable}, $scope.mention_mode: #{$scope.mention_mode}"
        return if event.keyCode is 16 # ignore shift key
        $mentions = angular.element(document.getElementById('mentions'))
        if $scope.mention_mode && ( 38 <= event.keyCode <= 40 || event.keyCode == 13 )
          #console.log "use the cursor (arrow) keys to navigate and select in mentions list"
          # find the currently selected name, then move, if possible, or select
          #selected_name = name1 for name2 in $mentions.find('li') when name.hasClass('selected')

          selected_index = null
          li_elements = $mentions.find('li')
          for li, index in li_elements
            li = angular.element(li)
            if li.hasClass('active')
              selected_index = index
              break;
          li_elements.removeClass('active')
          switch event.keyCode
            when 38
            #console.log "move up"
              selected_index = if selected_index > 0 then selected_index -= 1 else selected_index
              li_elements.eq(selected_index).addClass('active')
            when 39, 13
              name = li_elements.eq(selected_index).find('span').text()
              #console.log "selected #{name}"
              console.log "ceCommentForm select_mention name: #{name}"
              insertTextAtCursor(document.getElementById('reply-control').getElementsByTagName('textarea')[0],name )
              $scope.mention_mode = false
              $mentions.addClass('hide')
              event.preventDefault();

            when 40
            #console.log "move down"
              selected_index = if selected_index < li_elements.length-1 then selected_index += 1 else selected_index
              li_elements.eq(selected_index).addClass('active')

          #console.log "currently selected is #{selected_name.find('span').contents() }"
        else if event.keyCode is 50 && last_monitored_key_code_non_printable
          # the @ key has been pressed, show the autocomplete populated with conversation participants
          #console.log "display autocomplete with #{$scope.conversation.participants.length}"
          $scope.mention_mode = true
          $mentions.removeClass('hide')
          $mentions.find('li').removeClass('active').eq(0).addClass('active')
          $textarea_wrapper = $mentions.parent()
          $mentions.css({top: "-#{$mentions.prop('offsetHeight')}px", left: "#{$textarea_wrapper.prop('offsetWidth')/2 - $mentions.prop('offsetWidth')/2}px" })
        else if $scope.mention_mode
          #console.log "Dismiss the autocomplete popup"
          $scope.mention_mode = false
          $mentions.addClass('hide')
        match_char = char for char in [9,13,16,17,18,27,32] when char is event.keyCode
        last_monitored_key_code_non_printable = if match_char then true else false

      # http://stackoverflow.com/questions/3308292/inserting-text-at-cursor-in-a-textarea-with-javascript/3308539#3308539
      insertTextAtCursor = (el, text) ->
        val = el.value
        if (typeof el.selectionStart != "undefined" && typeof el.selectionEnd != "undefined")
          endIndex = el.selectionEnd
          el.value = val.slice(0, endIndex) + text + val.slice(endIndex)
          el.selectionStart = el.selectionEnd = endIndex + text.length
        else if (typeof document.selection != "undefined" && typeof document.selection.createRange != "undefined")
          el.focus()
          range = document.selection.createRange()
          range.collapse(false)
          range.text = text
          range.select()

      $scope.select_mention = ->
        name = event.currentTarget.getElementsByTagName('span')[0].innerText
        console.log "ceCommentForm select_mention name: #{name}"
        insertTextAtCursor(document.getElementById('reply-control').getElementsByTagName('textarea')[0],name )
        $mentions = angular.element(document.getElementById('mentions')).addClass('hide')

      $scope.$on 'update-new-comment-text', ->
        console.log "do update-new-comment-text"
        $scope.newComment.text = document.getElementById('wmd-input').value

      $scope.addComment = (event) ->
        event = event || window.event;
        btn = angular.element(event.currentTarget)
        return if btn.hasClass('busy')
        btn.addClass('busy')

        $scope.newComment.form_errors = null
        action = if $scope.newComment.id then 'update' else 'save'
        CommentData.create_in_ror(action, $scope.newComment).then(
          (response)->
            btn.removeClass('busy')
            #console.log "CommentData.create_in_ror success"
            $scope.$root.$broadcast "user-event-notification", { action: "save comment #{$scope.newComment.type}"}
            clear_edit_now()
            if response.data.type
              $scope.$root.$broadcast "#{response.data.type}_update", {
                action: action
                class: response.data.type
                data: response.data
                updated_at: response.data.updated_at
                source: "#{action}Comment"
              }
            else
              $timeout ->
                response.data.user_confirmed = if $scope.user?.confirmed then "true" else "false"
                $scope.acknowledge_guest_comment(response.data)
        ,
        (reason) ->
          console.log "CommentData.create_in_ror fail"
          btn.removeClass('busy')
          $scope.newComment.form_errors = []

          for field of reason.data.errors
            for message in reason.data.errors[field]
              $scope.newComment.form_errors.push {field: field, message: message}
          #for error in $scope.newComment.form_errors
          #  console.log error.message
        )

      $scope.acknowledge_guest_comment = (data) ->
        data.dialog = $dialog.dialog(
          templateUrl: '<%= path_to_asset "comment/guest-post-acknowledge.html" %>'
          resolve: {guest_post: -> data }
          controller: ($scope, guest_post) ->
            $scope.guest_post = guest_post
            $scope.close = ->
              $scope.guest_post.dialog.close()
        )
        data.dialog.open()

      $scope.$on 'open-comment-form', (event, data) ->
        #console.log "$scope.$on 'open-comment-form' event: #{event}, action: #{data.action}"
        open_comment_form(data)

      open_comment_form = (data) ->
        #console.log "open_comment_form for action #{data.action}"
        return if not can_user_post()
        return if not ok_to_modify_editor_content(data)
        set_form_properties(data)
        set_special_classes()
        show_form(data)
        adjust_conversation_to_form()
        $scope.$root.$broadcast "user-event-notification", { action: "open comment-form #{data.action}"}

      can_user_post = ->
        if $scope.conversation.privacy.unknown_users=='false' && !$scope.conversation.can('post_prescreen')
          title = 'Sorry'
          msg = "Only invited conversation participants are allowed to post comments"
          btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
          $dialog.messageBox(title, msg, btns).open()
          return false
        else
          return true

      ok_to_modify_editor_content = (data) ->
        # check if the editor is already in use and new open would lose data
        # confirm if data at risk and return true to continue or false to abort
        if data.append_to_existing
          return true
        else if !data.ok_to_modify
          if $scope.newComment.type && $scope.newComment.text?.match(/\w{2,}/)
            show_form(data)
            title = 'Warning'
            msg = "Are you sure you want to discard your current post?"
            btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
            $dialog.messageBox(title, msg, btns).open().then (result) ->
              console.log "messageBox callback with result: #{result}"
              if result is "yes"
                data.ok_to_modify = true
                open_comment_form(data)
            return false

        clear_newComment_fields()
        return true

      set_form_properties = (data) ->
        console.log "set_form_properties action: #{data.action}"
        $scope.newComment.conversation_code = $scope.conversation.code
        switch data.action
          when 'new-conversation-comment'
            $scope.newComment.type = 'ConversationComment'
            $scope.newComment.reply_control_title = "Add conversation comment"

          when 'new-summary-comment'
            $scope.newComment.type = 'SummaryComment'
            $scope.newComment.reply_control_title = "Add summary comment"

          when 'new-table-comment'
            $scope.newComment.type = 'TableComment'
            $scope.newComment.reply_control_title =
              $scope.conversation.details?.TableComment?.reply_control_title ||
              "Enter a new comment"
            $scope.newComment.purpose_options =
              $scope.conversation.details?.TableComment?.purpose_options ||
              null
            $scope.newComment.purpose =
              if $scope.newComment.purpose_options
                ""
              else
                "table"

          when 'call-to-action-comment-edit'
            if data.comment.id is 0
              $scope.newComment.id = null
              $scope.newComment.text = ''
              $scope.newComment.reply_control_title = "Add your first call-to-action"
              $scope.newComment.type = "CallToActionComment"
            else
              $scope.newComment.reply_control_title = "Edit call-to-action"

          when 'summary-comment-edit'
            comment = data.comment
            $scope.newComment = {id: comment.id, text: comment.text, type: comment.type, purpose: comment.purpose}
            $scope.newComment.reply_control_title = "Edit summary comment"

          when 'conversation-comment-edit'
            comment = data.comment
            $scope.newComment = {id: comment.id, text: comment.text, type: comment.type, purpose: comment.purpose}
            $scope.newComment.reply_control_title = "Edit"

          when 'new-theme-comment'
            $scope.newComment.type = 'ThemeComment'
            $scope.newComment.reply_control_title = "Add new theme comment"

          when 'theme-comment-edit'
            comment = data.comment
            $scope.newComment = {id: comment.id, text: comment.text, type: comment.type, purpose: comment.purpose, tag_name: comment.tag_name}
            if comment.version == 0 then $scope.newComment.text = ''
            $scope.newComment.text = $scope.newComment.text.replace(/<span.*\/span>/,'')
            $scope.newComment.reply_control_title = "Edit theme"

          when 'table-comment-edit'
            comment = data.comment
            $scope.newComment = {id: comment.id, text: comment.text, type: comment.type, purpose: comment.purpose, tag_name: comment.tag_name, pro_votes: comment.pro_votes, con_votes: comment.con_votes}
            $scope.newComment.reply_control_title =
              $scope.conversation.details?.TableComment?.edit_reply_control_title ||
              "Edit Comment"
            $scope.newComment.purpose_options =
              $scope.conversation.details?.TableComment?.purpose_options ||
              null

          when 'call-to-action-comment-reply'
            $scope.newComment.type = 'ConversationComment'
            $scope.newComment.reply_control_title = "Reply to call-to-action with"
            $scope.newComment.in_reply_to_id = data.comment.id
            $scope.newComment.in_reply_to_version = data.comment.version

          when 'summary-comment-reply'
            $scope.newComment.type = 'ConversationComment'
            $scope.newComment.reply_control_title = "Reply to summary comment with"
            $scope.newComment.in_reply_to_id = data.comment.id
            $scope.newComment.in_reply_to_version = data.comment.version

          when 'conversation-comment-reply'
            $scope.newComment.type = 'ConversationComment'
            $scope.newComment.reply_control_title = "Reply to comment with"
            $scope.newComment.in_reply_to_id = data.comment.id
            $scope.newComment.in_reply_to_version = data.comment.version

          when 'quote-selected-text'
            if !angular.element( document.getElementById('reply-control')).hasClass('open')
              $scope.newComment.type = 'ConversationComment'
              $scope.newComment.reply_control_title = "Reply to comment with"

          when 'add-example-from-selected-text'   
            #console.log "add-example-from-selected-text"
            comment = data.comment
            # check if newComment is already the currentTheme and if so, do not reset the text field
            if $scope.newComment.id isnt comment.id
              $scope.newComment = {id: comment.id, text: comment.text, type: comment.type, purpose: comment.purpose, tag_name: comment.tag_name}
            #console.log "$scope.newComment.text: #{$scope.newComment.text}"
            $scope.newComment.reply_control_title = "Edit theme"
            $scope.ce_text_select_style =
              display: "none"
            $scope.newComment.text = $scope.newComment.text.replace(/<span.*\/span>/,'')
            $timeout ->
              textarea = document.getElementById('reply-control').getElementsByTagName('textarea')[0]
              #console.log "textarea.value: #{textarea.value}"
              #console.log "data.quote_insert: #{data.quote_insert}"
              textarea.value += "\n\n" + data.quote_insert
              $scope.$root.$$phase || $scope.$root.$apply()
              # force newComment.text to recognize the change to the textarea after inserting new text
              newComment = angular.element(textarea).scope().newComment
              newComment.text = textarea.value
              textarea.focus


      set_special_classes = ->
        # determine if special class for non-participant, not signed in, not confirmed
        special_class = switch
          when $scope.$root.user == "null"
            $scope.newComment.join = true
            'unknown-user'
          when $scope.conversation.role == "none"
            $scope.newComment.join = true
            'non-participant-user'
          when $scope.$root.user.confirmed != true
            'non-confirmed-user'
        angular.element( document.getElementById('reply-control')).addClass(special_class) if special_class

      show_form = (data) ->
        if not $scope.disable_formatting
          $timeout -> $scope.$root.editor.refreshPreview()
        angular.element( document.getElementById('reply-control')).addClass('open show-preview').removeClass('draft').find('textarea')[0].focus()

      adjust_conversation_to_form = ->
        console.log "adjust_conversation_to_form()"
        # Adjust conversation section margin
        # conv bottom margin = height of reply form
        reply_height = angular.element( document.getElementById('reply-control')).prop('offsetHeight')
        $scope.conversation.style = {'margin-bottom': "#{reply_height}px"}

      $scope.$on 'text-select-button-clicked', (event, sel) ->
        #quote_insert = "[quote=#{sel.name}~#{sel.purpose}~#{sel.id}~#{sel.photo}~#{sel.version}]#{sel.text}[/quote]"
        quote_data =
          quote_type: "reply"
          id: sel.comment.id
          name: "#{sel.comment.first_name} #{sel.comment.last_name}"
          purpose: sel.comment.purpose
          photo: sel.comment.photo_code
          version: sel.comment.version
        quote_insert = "[quote=#{ angular.toJson(quote_data)}]#{sel.text}[/quote]"
        #console.log "Add this quote to textarea: #{quote_insert}"
        open_comment_form({action: 'quote-selected-text', append_to_existing: true})
        textarea = document.getElementById('reply-control').getElementsByTagName('textarea')[0]
        textarea.value += "\n" + quote_insert
        $scope.ce_text_select_style =
          display: "none"
        $scope.$root.$$phase || $scope.$root.$apply()
        # force newComment.text to recognize the change to the textarea after inserting new text
        newComment = angular.element(textarea).scope().newComment
        newComment.text = textarea.value

      $scope.clear_edit = (event) ->
        if not $scope.newComment.text || $scope.newComment.text.length < 6
          clear_edit_now()
        else
          title = 'Warning'
          msg = "Are you sure you want to discard your current post?"
          btns = [{result:'yes', label: 'Yes', cssClass: 'btn-primary'},{result:'no', label: 'No', cssClass: 'btn'} ]
          $dialog.messageBox(title, msg, btns).open().then (result) ->
            if result is "yes"
              clear_edit_now()
        return false

      clear_edit_now = ->
        clear_newComment_fields()
        clear_auto_saved_draft()
        if not $scope.disable_formatting
          $timeout -> $scope.$root.editor.refreshPreview()
        angular.element( document.getElementById('reply-control')).removeClass('open')
        $scope.conversation.style = {'margin-bottom': "0px"}

      $scope.toggle_compose_window = ->
        #console.log "toggle_compose_window"
        composer = angular.element( document.getElementById('reply-control') )
        if composer.hasClass('open')
          composer.removeClass('open show-preview')
          if $scope.newComment.type && $scope.newComment.text?.match(/\w{2,}/)
            composer.addClass('draft')
            $scope.conversation.style = {'margin-bottom': "40px"}
          else
            $scope.conversation.style = {'margin-bottom': "0px"}
          if not $scope.disable_formatting
            $scope.$root.editor.refreshPreview()

        else
          composer.addClass('open show-preview')
          composer.removeClass('draft')

      $scope.select_comment_purpose = ->
        console.log "selected comment purpose: #{$scope.newComment.purpose}"
        console.log "Change the guidance!!!"


  ]
])

ce2_directives.directive('ceTextSelect', ->
  restrict: 'A'
  replace: true
  template: '<div class="ce-text-select" ng-style="ce_text_select_style"><input class="btn-primary btn btn-mini" ng-click="button_click()" type="button" value="{{ button_text}}"></div>'
  link: (scope, element, attrs) ->
    scope.button_text = attrs.label
    scope.event_name_str = attrs.eventNameStr
  controller: [ "$scope", "$timeout", ($scope, $timeout) ->
    selection = {}

    $scope.button_click = ->
      $scope.$root.$broadcast $scope.event_name_str, selection

    $scope.$on 'text-select-by-mouse', ->
      debug_mode = false
      console.log "text_select_by_mouse" if debug_mode
      try
        [text, comment, coords, quote_data] = capture_selection()
        if text
          #console.log "use this string in form:\n#{text}" if debug_mode
          selection =
            text: text
            comment: comment
            quote_data: quote_data

          body = document.documentElement || document.body
          scrollX = window.pageXOffset || body.scrollLeft
          scrollY = window.pageYOffset || body.scrollTop
          $scope.ce_text_select_style =
            display: 'block'
            position: 'absolute'
            top: "#{coords.top + scrollY - 20}px"
            left: "#{coords.left + scrollX}px"

          $timeout ->
            angular.element(document).bind('mouseup', clear_capture_selection_button)
          ,100

        else
          $scope.ce_text_select_style =
            display: "none"

        $scope.$root.$$phase || $scope.$root.$apply()

      catch error
        console.log "text_select_by_mouse had an error: #{error}" if debug_mode

    capture_selection = ->
      debug_mode = false
      console.log "capture_selection" if debug_mode
      if document.all
        # get the selection for IE
        sel = document.selection
        range = sel.createRange()
        # IE's selection gives the text with linefeeds automatically
        str = range.text
        console.log "use this string in form:\n#{str}"  if debug_mode
        # get a node in the selection so I can find the parent comment
        node = range.parentElement()

        range.collapse(true);
        coords =
          left: range.boundingLeft
          top:  range.boundingTop;

      else
        # get the selection for other browsers
        sel = document.getSelection()
        # the text from the selection doesn't respect linefeeds, so I must manually respect linefeeds
        console.log "conversation_select text: #{sel.toString() }" if debug_mode
        # turn the selection into a range
        range = sel.getRangeAt(0)
        # now get the string while respecting the linefeeds
        frag = range.cloneContents()
        child_nodes = frag.childNodes
        # get the text for each of the nodes, without formatting
        #strs = ( (if node.innerHTML then node.innerHTML else node.textContent).replace(/^\s*/,'').replace(/\s*$/,'') for node in child_nodes)
        strs = ( (node.textContent).replace(/^\s*/,'').replace(/\s*$/,'') for node in child_nodes)

        str = strs.join('\n\n').replace(/<br[^>]*>/ig, '\n')

        # get a node of the range in the selection so I can find the parent comment
        node = range.startContainer

        # get the selection coordinates
        range = range.cloneRange()
        range.collapse(true);
        coords = range.getClientRects()[0];
        console.log "coords top: #{coords.top}, left: #{coords.left}" if debug_mode

      if str
        str = str.replace(/^ */gm, '').replace(/\r\n/g, '\n').replace(/\n{2,}/g,'\n\n')
        [str, angular.element(node).scope().comment, coords, angular.element(node).scope().quote?.data]
      else
        [null,null,null,null]

    clear_capture_selection_button = ->
      #console.log "clear_capture_selection_button mouseup, then clear"
      $scope.ce_text_select_style =
        display: "none"
      $scope.$root.$$phase || $scope.$root.$apply()
      angular.element(document).unbind('mouseup', clear_capture_selection_button)
  ]
)

ce2_directives.directive('ceCsrf', ->
  restrict: 'A'
  replace: false
  transclude: true
  templateUrl: "<%= path_to_asset "csrf-form-inputs.html" %>"
)


ce2_directives.directive('ceRatingSlider', [ "$document", ($document) ->
  restrict: 'A'
  replace: true
  scope: false
  templateUrl: "<%= path_to_asset "comment/rating-slider.html" %>"
  controller: [ "$scope", "CommentData", "$dialog", ($scope, CommentData, $dialog) ->
    $scope.persist_rating = ->
      #console.log "scope.persist_rating call on CommentData id: #{$scope.comment.id} with rating: #{$scope.rating}"
      CommentData.persist_rating_to_ror($scope.comment.id, $scope.comment.my_rating).then (response) ->
        $scope.comment.ratings_cache = response.data

    $scope.redraw_rating_graph = (element) ->
      for purpose in $scope.conversation.comment_purposes
        if purpose.value is $scope.comment.purpose
          labels = purpose.labels
      labels ?= "Disagree~Agree"
      canvas = element.find('canvas')[0]
      G_vmlCanvasManager.initElement(canvas) if G_vmlCanvasManager?
      ctx = canvas.getContext('2d');
      grapher = new window.Graph();
      grapher.draw_rating_results(ctx, $scope.comment.ratings_cache, $scope.comment.my_rating, labels);

    $scope.warn_no_rating = ->
      title = 'Sorry'
      msg = "Only invited conversation participants are allowed to rate comments"
      btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
      $dialog.messageBox(title, msg, btns).open()
      $scope.$root.$$phase || $scope.$root.$apply()

  ]

  link: (scope, element, attrs) ->
    #console.log "link function to draw rating slider with scope: #{scope.$id} and comment.id: #{scope.comment.id}"

    scope.$watch('comment.ratings_cache', (oldValue, newValue) ->
      scope.redraw_rating_graph(element)
    , true)

    canvas = element.find('canvas')
    mouse_binding_box = canvas.parent()
    handle = mouse_binding_box.find('div')
    debug = false
    canvas_width = 300
    if scope.comment.my_rating
      handle.css( 'left', "#{scope.comment.my_rating/100*canvas_width-9}px" )
    else
      handle.css( 'left', "#{50/100*canvas_width-9}px" )
    width = offset = null

    mouse_binding_box.bind "mousedown", ($event) ->
      unless scope.conversation.can('rate_comment')
        scope.warn_no_rating()
        return

      angular.element(document.body).addClass('drag_in_process')
      if not width
        padding = 20
        width = _.width(mouse_binding_box[0]) - padding
        console.log "width: #{width}" if debug
      if not offset
        offset = _.offset(mouse_binding_box[0]).left
        console.log "offset: #{offset}" if debug
      calculate_position($event)
      $document.bind('mousemove', calculate_position)
      $document.bind('mouseup', mouseup)

    # TODO throttle the calls made by mouse move
    #element.bind('mousemove', _.throttle(_pd( (evt) ->
    #  return if not mouseDown
    #  calculate_position(evt)
    #),
    #25))

    mouseup = () ->
      $document.unbind('mousemove', calculate_position)
      $document.unbind('mouseup', mouseup)
      angular.element(document.body).removeClass('drag_in_process')
      persist_rating_now()

    calculate_position = ($event) ->
      pageX = if $event.pageX
        $event.pageX
      else if $event.clientX
        $event.clientX
      else
        $event.originalEvent.touches[0].pageX

      diff = pageX - offset

      scope.comment.my_rating = if diff < 0
        diff = 0 if diff < 0
        1
      else if diff > width
        diff = width + 12 if diff > width + 12
        100
      else
        Math.round( diff / width * 100 )

      handle.css( 'left', "#{diff-5}px" )
      console.log "pageX: #{pageX}, diff: #{diff}, scope.rating: #{scope.comment.my_rating}%" if debug
      scope.$apply()

    persist_rating_now = ->
      #console.log "persist rating now with scope: #{scope.$id}"
      scope.$apply( ->
        scope.persist_rating()
      )

])

ce2_directives.directive('ceProfilePhotoForm', ->
  restrict: 'A'
  templateUrl: "<%= path_to_asset "user/profile-photo-form.html" %>"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->

      debug = false

      $scope.file_selected = (element) ->
        if element.files.length > 0
          file_name = element.files[0].name
          console.log "ceProfilePhotoForm loading file: #{file_name}" if debug
          $scope.progress_bar_message = "<i class='icon-spinner icon-spin'></i><span>Loading #{file_name}</span>"

          console.log "ceProfilePhotoForm: a file is selected, add iframe" if debug
          $scope.$root.attachment_frame_id = 1 if not $scope.$root.attachment_frame_id
          $scope.$root.attachment_frame_id += 1
          target = "attachment_upload_iframe_#{$scope.$root.attachment_frame_id}"
          form = angular.element(element.form)
          form.attr('target', target)
          form.next().replaceWith(
            "<iframe id='#{target}' name='#{target}' onload='angular.element(this).scope().iframe_loaded(this)'></iframe>" )

          $scope.$apply()

      $scope.iframe_loaded = (el) ->
        # have access to $scope here
        console.log "ceProfilePhotoForm: window.iframe_loaded, get the contents" if debug

        if not $scope.form_disabled
          console.log "ceProfilePhotoForm: iframe is ready, submit the form" if debug
          $scope.form_disabled = true
          profile_photo_form.submit()

        content = el.contentDocument.body.innerText
        if content
          console.log "ceProfilePhotoForm: add this data to scope: #{content}" if debug
          $scope.user.photo_code = $scope.user.code
          $scope.user.photo_code_updated = Math.random()
          # find and clear the file input
          inputs = angular.element(profile_photo_form).find('input')
          input for input in inputs when input.type == 'file'
          input.value = null
          angular.element(el).replaceWith('<div></div>')
          $scope.progress_bar_message = null
          $scope.form_disabled = false
          $scope.$apply()
  ]
)

#
# The sortable elements must share a parent div that only contains the sortable elements
#
ce2_directives.directive('ceSortable', [ "$document", "$timeout", "ConversationData", "CommentData",
  ($document, $timeout, ConversationData, CommentData) ->
    restrict: 'A'
    priority: 500
    scope: true
    link: (scope, elm, attrs) ->
      return unless scope.conversation.can('update_comment_order')
      startX = startY = initialMouseX = initialMouseY = mouseY = 0
      placeholder = dragged = placeholder_upper = placeholder_lower = {}
      item_name = collection_name = collection_subname = ''

      # construct the html structure that will allow the sorting to work
      # in order to be draggable, item must be positioned absolute
      # to format the drag handle I want position absolute on handle and position relative on comment
      # so I wrap the comment with a div that will be position absolute so comm can be relative to allow handle placement
      # I also need a placeholder at the same level as the comment wrapper
      # the code below adds these pieces
      # it starts with the sortable element which is div.comment.SummaryComment
      # adding a bound class, class="{{comment.type}}", causes the 'ce-sortable-item' class to be lost
      elm.addClass('ce-sortable-item')
      elm.wrap('<div class="ce-sortable-item-carrier"></div>')
      item_carrier = elm.parent();

      if typeof item_carrier.parent().attr('ng-repeat')
        #console.log "Build up item using the ng-repeat parent element"
        item_pair = item_carrier.parent()
        item_pair.addClass("ce-sortable-item-pair")
      else
        #console.log "Build up original item"
        item_carrier.wrap('<div class="ce-sortable-item-pair"></div>')
        item_pair = item_carrier.parent()

      handle = angular.element('<div class="ce-sortable-handle"><i class="icon-sort icon-2x"></i></div>')
      elm.append(handle)

      item_carrier.after(angular.element('<div class="ce-sortable-placeholder ce-sortable-item"></div>'))

      elm = item_carrier

      #elm.html("y: #{ elm.parent().prop('offsetTop') }")

      debug = false

      handle.bind('mousedown', ($event) ->
        angular.element(document.body).addClass('drag_in_process')
        startX = elm.parent().prop('offsetLeft')
        startY = elm.parent().prop('offsetTop')  + 24
        width = elm.prop('offsetWidth')
        elm.css
          position: 'absolute'
          top:  "#{startX}px"
          width: "#{width}px"
          #left: "#{startY}px"

        console.log "startX: #{startX}, startY: #{startY}" if debug
        initialMouseX = $event.clientX
        initialMouseY = $event.clientY
        $document.bind('mousemove', mousemove)
        $document.bind('mouseup', mouseup)
        record_current_place_holders()

        elm.next().css
          display: 'block'
          height: "#{placeholder.h}px"
          width: "#{placeholder.w}px"

        adjust_dragged($event)

        false

      )

      mousemove = ($event) ->
        #console.log "mousemove initialMouseX: #{initialMouseX}, initialMouseY: #{initialMouseY}" if debug
        adjust_dragged($event)
        calculate_offset()
        false

      mouseup = () ->
        clear_sort_mode()
        [model_collection, dom_scope_collection] = get_scope_collection_for_dom_items_and_model()
        # now compare model in scope collection with the scope in DOM children

        if not collections_are_equal(model_collection, dom_scope_collection)
          # update the scope model
          #console.log "update the scope_model"
          #model_collection = dom_scope_collection
          elm.scope().$parent[collection_name][collection_subname] = dom_scope_collection
          $rootScope = elm.scope().$root
          $rootScope.$$phase || $rootScope.$apply()

          comments_order = (item.id for item in dom_scope_collection )
          comment_id = elm.parent().parent().attr('comment_id')
          if comment_id
            CommentData.update_comment_order(comment_id, comments_order).then (response) ->
              ConversationData.add_letters(dom_scope_collection)
          else
            conversation_code = elm.scope().$parent.conversation?.code
            ConversationData.update_comment_order(conversation_code, comments_order).then (response) ->
              ConversationData.add_letters(dom_scope_collection)
          $timeout ->
            angular.element(document.body).removeClass('drag_in_process')
          , 1000

      collections_are_equal = (collection_a, collection_b) ->
        for item, i in collection_a
          #console.log "compare item at #{i}"
          if item isnt collection_b[i]
            return false
        true

      clear_sort_mode = ->
        elm.css({position: 'static', left: "#{startX}px", top: "#{startY}px", width: ""})
        $document.unbind('mousemove', mousemove)
        $document.unbind('mouseup', mouseup)
        elm.next().css({display: 'none'})


      get_scope_collection_for_dom_items_and_model = ->
        [x, item_name, collection_name, collection_subname ] = elm.parent().attr('ng-repeat').match(/(\w+)\s+in\s+(\w+)\.(\w+)/)
        #console.log "item_name: #{item_name}, collection_name: #{collection_name},  collection_subname: #{collection_subname}"

        # get the DOM items for the collection
        dom_items = elm.parent().parent().children()
        # get the scope items for each dom_item
        scope_collection = (angular.element(dom_item).scope()[item_name] for dom_item in dom_items)

        model_collection = elm.scope().$parent[collection_name][collection_subname]
        [model_collection, scope_collection]




      record_current_place_holders = ->
        old_startX = startX
        startX = elm.parent().prop('offsetLeft')
        initialMouseX += (startX - old_startX)

        old_startY = startY
        startY = elm.parent().prop('offsetTop')
        initialMouseY += (startY - old_startY)

        placeholder =
          x: startX
          y: startY
          w: elm.prop('offsetWidth')
          h: elm.prop('offsetHeight')

        nextElm = elm.parent().next()
        if nextElm.length > 0
          placeholder_lower = angular.copy(placeholder)
          placeholder_lower.y = placeholder.y + nextElm.prop('offsetHeight')
        else
          placeholder_lower = null

        prevElm = angular.element( elm.parent()[0].previousElementSibling )
        if prevElm.length > 0
          placeholder_upper = angular.copy(placeholder)
          placeholder_upper.y = placeholder.y - prevElm.prop('offsetHeight')
        else
          placeholder_upper = null

        console.log "placeholder_upper: " + ("#{key}: #{placeholder_upper[key]}" for key of placeholder_upper).join(', ') if debug
        console.log "placeholder: " + ("#{key}: #{placeholder[key]}" for key of placeholder).join(', ') if debug
        console.log "placeholder_lower: " + ("#{key}: #{placeholder_lower[key]}" for key of placeholder_lower).join(', ') if debug


      adjust_dragged = ($event) ->
        dragged =
          x: startX + $event.clientX - initialMouseX
          y: startY + $event.clientY - initialMouseY
        #elm.css { left: "#{dragged.x}px" }
        elm.css { top: "#{dragged.y}px" }

      calculate_offset = ->
        #console.log "calculate_offset"
        #console.log "PH: " + ("#{key}: #{placeholder[key]}" for key of placeholder).join(', ') + ", DR: " + ("#{key}: #{dragged[key]}" for key of dragged).join(', ') if debug
        console.log "sY: #{startY}, iY: #{initialMouseY}, mY: #{mouseY}, DR.Y: #{dragged.y}, phU.y: #{placeholder_upper?.y}, ph.y: #{placeholder?.y}, phL.y: #{placeholder_lower?.y}" if debug

        offset =
          x: (dragged.x - placeholder.x)/placeholder.w * 100
          y: (dragged.y - placeholder.y)/placeholder.h * 100
        #console.log ("#{key}: #{offset[key]}" for key of offset).join(', ')

        if offset.y > 50 && placeholder_lower
          lower_y_offset = (dragged.y - placeholder_lower.y)/placeholder.h * 100
          #console.log "check offset with placeholder_lower, offset.y: #{offset.y}, lower offset y: #{lower_y_offset}"
          if Math.abs(offset.y) > Math.abs(lower_y_offset)
            console.log "SWAP THE ELEMENT WITH THE LOWER ELEMENT" if debug
            next_elm = elm.parent().next()
            next_elm.after(elm.parent())
            placeholder.y = elm.parent().prop('offsetTop')
            record_current_place_holders()

        else if offset.y < -50 && placeholder_upper
          upper_y_offset = (dragged.y - placeholder_upper.y)/placeholder.h * 100
          #console.log "check offset with placeholder_upper, offset.y: #{offset.y}, lower offset y: #{upper_y_offset}"
          if Math.abs(offset.y) > Math.abs(upper_y_offset)
            console.log "SWAP THE ELEMENT WITH THE UPPER ELEMENT" if debug
            prev_elm = angular.element( elm.parent()[0].previousElementSibling )
            elm.parent().after(prev_elm)
            placeholder.y = elm.parent().prop('offsetTop')
            record_current_place_holders()
])


ce2_directives.directive 'stopEvent', ->
  restrict: 'A',
  link: (scope, element, attr) ->
    element.bind attr.stopEvent, (e) ->
      e.stopPropagation()

ce2_directives.directive('ceConversationCard', ->
  restrict: 'A'
  templateUrl: "<%= path_to_asset "conversation-card.html" %>"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
                $scope.name = 'ceConversationCard'
  ]
)

ce2_directives.directive('ceConversationRightBar', [ "$compile",
  ($compile) ->
    restrict: 'A'
    templateUrl: '<%= path_to_asset "conversation-right-bar.html" %>'
    replace: true
    scope: false
    link: (scope, element, attrs) ->
      scope.$watch 'right_bar_panel_directive', (oldValue, newValue) ->
        if scope.right_bar_panel_directive
          #console.log "time to compile scope.right_bar_panel_directive: #{scope.right_bar_panel_directive}"
          directive = angular.element(document.getElementById('right-panel-directive'))
          $compile(directive)(scope);

    controller: [ "$scope", "$templateCache",
      ($scope, $templateCache) ->
        $scope.name = "ceConversationRightBar"
        $scope.open_panel = (link) ->
          if $scope.active_link == link
            return $scope.close_panel()


          for name in [ 'stats', 'share', 'print' ]
            if name is link
              $scope.$root.$broadcast 'user-clicked-dead-link', { action: link, conversation_code: $scope.conversation.code}
              return

          if $scope.$root.dev_mode
            $templateCache.removeAll()
            dev = true
          else
            dev = false

          # get the position and width of the menu so I can set the panel's fixed position
          menu = angular.element(document.getElementById('right-menu'))
          left = menu.prop('offsetLeft')
          top = menu.prop('offsetTop')
          width =  menu.prop('offsetWidth')
          #console.log "top: #{top}, left: #{left}, width: #{width}"

          width = angular.element(document.getElementById('conversation')).prop('offsetWidth') - width - 10
          right = window.innerWidth - left + 4
          max_height = window.innerHeight - top - 40
          #console.log "window.innerHeight: #{window.innerHeight}, top: #{top}, max-height: #{max_height}"

          panel = angular.element(document.getElementById('right-bar-panel'))
          panel.css( {top: "#{top}px", right: "#{right}px", width: "#{width}px", 'max-height': "#{max_height}px" })

          #console.log "open_panel for #{link}"
          $scope.right_bar_panel_directive = "<div id='right-panel-directive' ce-#{link}-panel dev='#{dev}'>Compile directive ce-#{link}-panel</div>"
          $scope.active_link = link
          $scope.$root.$broadcast "user-event-notification", { action: "open panel #{link}"}
        $scope.close_panel = ->
          #console.log "close the panel"
          $scope.active_link = null
        $scope.format_schedule_announcement = ->
          #console.log "scope.format_schedule_announcement starts_at: #{$scope.conversation.starts_at}, ends_at: #{$scope.conversation.ends_at}"
          now = new Date()
          convert_time_difference_to_dhm = (t1, t2) ->
            remaining_days = (t2-t1)/ (1000*60*60*24)
            days = Math.floor(remaining_days)
            remaining_hours = (remaining_days - days) * 24
            hours = Math.floor(remaining_hours)
            minutes = Math.floor((remaining_hours - hours) * 60)
            #[days, hours, minutes]
            if days > 1
              "#{days} days"
            else if days == 1 or hours > 1
              "#{days*24 + hours} hours"
            else
              "#{hours*60 + minutes} minutes"

          if $scope.conversation.starts_at > now
            # conversation has not started yet
            time_text = convert_time_difference_to_dhm( now, $scope.conversation.starts_at )
            "Conversation starts in <span>#{time_text}</span>"
          else if $scope.conversation.ends_at < now
            # conversation ended already
            time_text = convert_time_difference_to_dhm( $scope.conversation.ends_at, now )
            "Conversation ended <span>#{time_text} ago</span>"
          else
            # conversation in progress
            time_text = convert_time_difference_to_dhm( now, $scope.conversation.ends_at )
            "Conversation ends in <span>#{time_text}</span>"
        $scope.conversation.schedule_announcement = $scope.format_schedule_announcement()
    ]
])

# Directives for the panels

ce2_directives.directive('ceContactPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/contact_us.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "User", "$dialog",
    ($scope, User, $dialog) ->
      $scope.name = 'ceContactPanel'
      $scope.message =
        email: $scope.$root.user.email
        first_name: $scope.$root.user.first_name
        last_name: $scope.$root.user.last_name
        #text: new Date()

      $scope.send_message = ->
        #console.log "send this message to admin"
        if $scope.conversation.code
          $scope.message.reference_type = 'Conversation'
          $scope.message.reference_id = $scope.conversation.code
        User.send_contact_us_message($scope.message).then(
          (response)->
            #console.log "send_contact_us_message was successful"
            title = 'Thank you for contacting us'
            msg = "We will review your message to us soon."
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
            $scope.close_panel()
          ,
          (reason) ->
            console.log "send_contact_us_message failed"
            if reason.status is 404
              title = 'Invite was not sent'
              msg = reason.data.error
              btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
              $dialog.messageBox(title, msg, btns).open()
            else
              for key of reason.data.errors
                errors = (msg for msg in reason.data.errors[key])
              title = 'Invite was not sent'
              msg = errors.join(' & ')
              btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
              $dialog.messageBox(title, msg, btns).open()

              $scope.error_message = reason.data.error
          )

  ]
)

ce2_directives.directive('ceStatsPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/stats.html" %>#{prefix}"
  replace: false
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceStatsPanel'
  ]
)

ce2_directives.directive('ceNotificationPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/notification.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "NotificationRequest", "$timeout",
    ($scope, NotificationRequest, $timeout) ->
      $scope.name = 'ceNotificationPanel'
      $scope.form_submit_status = if $scope.conversation.notification_request.default then 'Confirm settings' else "Update settings"
      $scope.updateNotifications = ->
        #console.log "Update the privacy settings to RoR"
        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        NotificationRequest.save_settings($scope.conversation.code, $scope.conversation.notification_request).then (response)->
          console.log "NotificationRequest.save_settings received response"
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update settings'
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel notification'}
          ,800
  ]
)

ce2_directives.directive('ceInvitePanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/invite.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "ConversationData", "$dialog",
    ($scope, ConversationData, $dialog) ->
      $scope.name = 'ceInvitePanel'
      $scope.invite =
        href: location.href.replace(/#\/conversation\/[^\/]*/, 'invites/secret-code')
        my_email: $scope.$root.user.email
        my_first_name: $scope.$root.user.first_name
        my_last_name: $scope.$root.user.last_name

      ConversationData.invited_guests($scope.conversation.code).then (response) ->
        $scope.invited_guests = response.data

      ConversationData.participants_roles($scope.conversation.code).then (response) ->
        $scope.participants_roles = response.data

      $scope.participants_roles = []

      $scope.send_invite = ->
        $scope.show_new_invites = 'color-activated'
        console.log "send this invite to #{$scope.invite.email}"
        ConversationData.send_invite($scope.invite, $scope.conversation.code).then(
          (response)->
            console.log "invite to #{$scope.invite.email} was successful"
            $scope.invited_guests.unshift(
              invited_at: response.data.invited_at
              invitee: response.data.invitee
              inviter: response.data.inviter
            )
            $scope.invite.first_name = ''
            $scope.invite.last_name = ''
            $scope.invite.email = ''
        ,
        (reason) ->
          console.log "invite to #{$scope.invite.email} failed"
          if reason.status is 404
            title = 'Invite was not sent'
            msg = reason.data.error
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
          else
            for key of reason.data.errors
              errors = (msg for msg in reason.data.errors[key])
            title = 'Invite was not sent'
            msg = errors.join(' & ')
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()

            $scope.error_message = reason.data.error
        )
  ]
)

ce2_directives.directive('ceSharePanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/share.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceSharePanel'
  ]
)

ce2_directives.directive('cePrintPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/print.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'cePrintPanel'
  ]
)

ce2_directives.directive('cePdfPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/pdf.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'cePdfPanel'
      console.log "In cePdfPanel controller"
  ]
)

ce2_directives.directive('ceDownloadPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/download.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope",
    ($scope) ->
      $scope.name = 'ceDownloadPanel'
      console.log "In ceDownloadPanel controller"
  ]
)

ce2_directives.directive('cePrivacyPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/privacy.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "ConversationData", "$timeout",
    ($scope, ConversationData, $timeout) ->
      $scope.name = 'cePrivacyPanel'
      $scope.form_submit_status = if $scope.conversation.privacy?.confirmed_privacy then 'Update settings' else "Confirm settings"
      #console.log "In cePrivacyPanel controller"
      $scope.privacy = $scope.conversation.privacy
      $scope.updatePrivacy = ->
        #console.log "Update the privacy settings to RoR"
        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        ConversationData.persist_privacy_to_ror($scope.conversation.code, $scope.privacy).then (response)->
          #console.log "ConversationData.persist_privacy_to_ror received response"
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update settings'
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel privacy'}
          ,800
  ]
)

ce2_directives.directive('ceSchedulePanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/schedule.html" %>#{prefix}"
  replace: true
  scope: true
  link: (scope, element, attrs) ->
    scope.$watch 'start_date', (oldValue, newValue) ->
      scope.show_start_calendar = false
      scope.show_end_calendar = false
    scope.$watch 'end_date', (oldValue, newValue) ->
      scope.show_start_calendar = false
      scope.show_end_calendar = false
    temp.right_bar_scope = scope

  controller: [ "$scope", "ConversationData", "$timeout", "$document",
    ($scope, ConversationData, $timeout, $document) ->
      $scope.name = 'ceSchedulePanel'
      $scope.form_submit_status = if $scope.conversation.privacy?.confirmed_schedule then 'Update schedule' else "Confirm schedule"

      $scope.show_start_calendar = false
      $scope.show_end_calendar = false
      $scope.toggle_start_calendar = ->
        $scope.show_start_calendar = !$scope.show_start_calendar
        if $scope.show_start_calendar
          $scope.show_end_calendar = false

      $scope.toggle_end_calendar = ->
        $scope.show_end_calendar = !$scope.show_end_calendar
        if $scope.show_end_calendar
          $scope.show_start_calendar = false

      # conversation start time
      if $scope.conversation.starts_at
        date = new Date($scope.conversation.starts_at)
        $scope.start_date = date
        $scope.start_time = date
      else
        $scope.today_start = ->
          $scope.start_date = new Date()
        $scope.today_start()

        $scope.start_time = new Date()
        # round down to the last hour
        $scope.start_time.setMinutes(0)


      # conversation end time
      if $scope.conversation.ends_at
        date = new Date($scope.conversation.ends_at)
        $scope.end_date = date
        $scope.end_time = date
      else
        $scope.today_end = ->
          $scope.end_date = new Date()
        $scope.today_end()

        $scope.end_time = new Date()
        # round down to the last hour
        $scope.end_time.setMinutes(0)


      close_calendars= ->
        $document.unbind('mouseup', close_calendars)
        $scope.show_start_calendar = false
        $scope.show_end_calendar = false

      $scope.hstep = 1
      $scope.mstep = 15

      $scope.ismeridian = true
      $scope.toggleMode = ->
        $scope.ismeridian = ! $scope.ismeridian


      $scope.showWeeks = false

      $scope.toggleMin = ->
        $scope.minDate = ( $scope.minDate ) ? null : new Date()

      $scope.toggleMin()

      $scope.updateSchedule = ->
        #console.log "Update the schedule to RoR"
        $scope.show_start_calendar = false
        $scope.show_end_calendar = false
        starts_at = $scope.start_date
        starts_at.setHours( $scope.start_time.getHours() )
        starts_at.setMinutes( $scope.start_time.getMinutes() )
        starts_at.setSeconds( 0 )

        ends_at = $scope.end_date
        ends_at.setHours( $scope.end_time.getHours() )
        ends_at.setMinutes( $scope.end_time.getMinutes() )
        ends_at.setSeconds( 0 )

        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        ConversationData.persist_schedule_to_ror($scope.conversation.code, starts_at, ends_at).then (response)->
          #console.log "ConversationData.persist_schedule_to_ror received response"
          $scope.conversation.starts_at = starts_at
          $scope.conversation.ends_at = ends_at
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update schedule'
            $scope.conversation.schedule_announcement = $scope.format_schedule_announcement()
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel schedule'}
          ,800


  ]
)

ce2_directives.directive('ceTagsPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/tags.html" %>#{prefix}"
  replace: true
  scope: true
  link: (scope, element, attrs) ->
    element.find('input').bind 'blur', ->
      scope.create_new_tag( event.target )
      scope.$root.$$phase || scope.$root.$apply()

  controller: [ "$scope", "ConversationData", "$timeout",
    ($scope, ConversationData, $timeout) ->
      $scope.name = 'ceTagsPanel'
      $scope.form_submit_status = 'Update tags'
      #console.log "In ceTagsPanel controller"
      $scope.delete_tag = ->
        event.stopPropagation()
        remove_tag = angular.element(event.target).parent().find('div').text()
        #console.log "delete_tag: #{tag}"
        for tag, index in $scope.conversation.tags
          if tag is remove_tag
            $scope.conversation.tags.splice(index,1)
            break
      $scope.focus_to_input = (el) ->
        #console.log "set focus to input"
        input = angular.element(event.target).find('input')[0]?.focus()
      $scope.keydown = (el) ->
        #console.log "keydown event.keyCode: #{event.keyCode}"
        if event.keyCode == 13
          $scope.create_new_tag( event.target )
        if event.keyCode == 8 && event.currentTarget.value == ""
          #console.log "edit the previous tag"
          # get the last tag
          event.currentTarget.value = $scope.conversation.tags.pop() + ' '
      $scope.create_new_tag = (el) ->
        if el.value != ""
          $scope.conversation.tags.push el.value
          el.value = ""

      $scope.updateTags = ->
        #console.log "Update the tags to RoR"
        $scope.form_submit_status = '<i class="icon-spinner.icon-spin">Updating</i>'
        ConversationData.persist_tags_to_ror($scope.conversation.code, $scope.conversation.tags).then (response)->
          #console.log "ConversationData.persist_tags_to_ror received response"
          $scope.form_submit_status = 'Updated'
          $timeout ->
            $scope.close_panel()
            $scope.form_submit_status = 'Update tags'
            $scope.$root.$broadcast "user-event-notification", { action: 'update panel tags'}
          ,800
  ]
)

ce2_directives.directive('ceParticipantsPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/participants.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "ConversationData", "$dialog",
    ($scope, ConversationData, $dialog) ->
      $scope.name = 'ceParticipantsPanel'

      $scope.conversation.roles = [
        {value: 'conversation_admin', key: 'Conversation admin'},
        {value: 'curator', key: 'Conversation curator'},
        {value: 'trusted_participant', key: 'Trusted participant'},
        {value: 'participant', key: 'Participant'},
        {value: 'probationary_participant', key: 'Probationary participant'}
      ]

      ConversationData.participants_roles($scope.conversation.code).then (response) ->
        $scope.participants_roles = response.data

      $scope.update_role = ->
        scope = angular.element(event.srcElement).scope()
        console.log "Update the role for #{scope.participant.name} with code: #{scope.participant.code} to #{scope.participant.role}"
        ConversationData.update_role(scope.conversation.code, scope.participant.code, scope.participant.role).then(
          (response)->
            console.log "update_role to #{scope.participant.role} was successful"
        ,
          (reason) ->
            console.log "update_role to #{scope.participant.role} failed"
            title = 'Server error'
            msg = reason.data.error
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
        )
  ]
)

ce2_directives.directive('ceReviewPanel', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/review.html" %>#{prefix}"
  replace: true
  scope: true
  controller: [ "$scope", "ConversationData",
    ($scope, ConversationData) ->
      $scope.name = 'ceReviewPanel'
      $scope.$parent.specific_panel_style = {'background-color': '#eeeeee'}
      #console.log " get guest_posts on scope #{$scope.$id}"

      ConversationData.guest_posts($scope.conversation.code).then (response) ->
        $scope.guest_posts = response.data

      ConversationData.pending_comments($scope.conversation.code).then (response) ->
        $scope.pending_comments = response.data

      ConversationData.flagged_comments($scope.conversation.code).then (response) ->
        $scope.flagged_comments = response.data

      $scope.$on 'delete-pending-comment', (event, post) ->
        #console.log "delete pending comment with id: #{post.id}"
        escope = event.currentScope
        for comment, index in escope.pending_comments
          if comment.id == post.id
            escope.pending_comments.splice(index, 1)
            return escope.update_review_items_count()

      $scope.$on 'delete-guest-post', (event, post) ->
        #console.log "delete guest post with id: #{post.id}"
        escope = event.currentScope
        for guest_post, index in escope.guest_posts
          if guest_post.id == post.id
            escope.guest_posts.splice(index, 1)
            escope.update_review_items_count()
            break

        # hide the join accept/decline for this email in any other open guest posts
        for guest_post in escope.guest_posts
          if guest_post.email == post.email
            guest_post.invited_at = true

      $scope.$on 'delete-comment-flag', (event, post) ->
        #console.log "delete comment flag with id: #{post.flag_id}"
        escope = event.currentScope
        for flag, index in escope.flagged_comments
          if flag.flag_id == post.flag_id
            escope.flagged_comments.splice(index, 1)
            return escope.update_review_items_count()

      $scope.update_review_items_count = ->
        $scope.conversation.review_items_count =
          $scope.pending_comments.length +
          $scope.guest_posts.length +
          $scope.flagged_comments.length
  ]
)

ce2_directives.directive('ceCreateConversationWizard', ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/create-conversation-wizard.html" %>#{prefix}"
  replace: true
  scope: true
  compile: (tElement, tAttrs) ->
    #console.log "compile for wizard"
    # read the wizard template to generate a map of step targets
    wizard_map = {}
    num_steps = 0
    code = 1
    for div in tElement.find('div')
      div = angular.element(div)
      if div.hasClass('page')
        #console.log "div id: #{div.attr('ng-switch-when')}"
        wizard_map["page_#{code}"] =
          code: "page_#{code}"
          prev_code: if code > 1 then "page_#{code - 1}" else null
          next_code: "page_#{code + 1}"
          pos: div.attr('wiz-pos')
          trigger:  div.attr('trigger')
          action:  div.attr('action')
          test:  div.attr('test')

        # set the template switch code to match the map code
        div.attr('ng-switch-when', "page_#{code}")
        code += 1
        num_steps += 1

    #for step of wizard_map
    #  current_step = wizard_map[step]
    #  console.log ("#{key}: #{current_step[key]}" for key of current_step).join(', ')

    # Create a postlink function to share this map with scope & start wizard
    (scope, iElement, iAttrs) ->
      #console.log "this is the postlink function"
      scope.$root.wizard_map = wizard_map
      scope.wizard_step = 'page_1'
      scope.wizard_num_steps = num_steps
      scope.wizard_navigation(1)
      #for page of scope.$root.wizard_map
      #  console.log "#{page}: #{scope.$root.wizard_map[page]}"
  controller: [ "$scope", "$timeout", "ConversationData",
    ($scope, $timeout, ConversationData) ->
      $scope.name = 'ceCreateConversationWizard'
      $scope.wizard_complete = false
      $scope.form_submit_status = "Publish conversation"
      debug_wizard = false


      $scope.wizard_navigation = (direction) ->
        current_step = $scope.$root.wizard_map[$scope.wizard_step]
        if direction == 'previous' and current_step['prev_code']
          #console.log "wizard_navigation to prev"
          current_step = $scope.$root.wizard_map[ current_step['prev_code'] ]
        else if direction == 'next' and current_step['next_code']
          #console.log "wizard_navigation to next"
          current_step = $scope.$root.wizard_map[ current_step['next_code'] ]
        else if !isNaN(direction)
          current_step = $scope.$root.wizard_map[ "page_#{direction}" ]

        # else reloads the current page

        if not current_step
          console.log "No more wizard pages to display, clear/remove wizard" if debug_wizard
          $timeout ->
            $scope.conversation.wizard_mode = false
          return

        $scope.wizard_step = current_step['code']
        $scope.wizard_current_step = current_step
        console.log "current_step: " + ("#{key}: #{current_step[key]}" for key of current_step).join(', ') if debug_wizard

        # is the test valid for this wizaard page
        console.log "test: #{current_step.test}" if debug_wizard

        if current_step.test && !$scope.$eval(current_step.test)
          $scope.wizard_navigation('next')
          return

        $timeout ->
          adjust_popup()

        adjust_popup = ->
          debug_position = false
          console.log "$scope.wizard_step: #{ current_step['code'] }" if debug_position
          step = $scope.conversation_wizard_step
          wizard = angular.element( document.getElementById('create-conversation-wizard'))
          wizard.attr('class','popover')
          wizard_width = wizard.prop('offsetWidth')
          wizard_height = wizard.prop('offsetHeight')
          console.log "wizard_height: #{wizard_height}, wizard_width: #{wizard_width}" if debug_position

          position = current_step['pos'].split(':')
          console.log "position: #{position}" if debug_position
          switch position[0]
            when 'el'
              console.log "Position #{position[2]} of #{position[1]}" if debug_position
              el = document.getElementById(position[1])
              if not el
                $timeout ->
                  adjust_popup()
                ,400
                return
              offset = _.offset(el)
              el = angular.element(el)
              width = el.prop('offsetWidth')
              height = el.prop('offsetHeight')
              console.log "offset.top: #{offset.top}, offset.left: #{offset.left}, height: #{height}, width: #{width}" if debug_position
              switch position[2]
                when 'below'
                  console.log "relative position below" if debug_position
                  top = offset.top + height
                  left = offset.left - wizard_width/2 + width/2
                  wizard.addClass('bottom')
                when 'above'
                  console.log "relative position above" if debug_position
                  top = offset.top - wizard_height
                  left = offset.left
                  wizard.addClass('top')
                when 'left'
                  console.log "relative position left" if debug_position
                  top = offset.top - wizard_height/2 + height/2
                  left = offset.left - wizard_width
                  wizard.addClass('left')
                when 'right'
                  console.log "relative position right" if debug_position
                  top = offset.top - wizard_height/2 + height/2
                  left = offset.left + width
                  wizard.addClass('right')
                else console.log "Don't understand relative position: #{position[2]}"

            when 'box'
                # box:panel-privacy:right:top
                if position[1] == 'window'
                  box =  angular.element( window )
                  offset = {top: 0, left: 0}
                  width = window.innerWidth
                  height = window.innerHeight
                else
                  box = angular.element( document.getElementById(position[1]))
                  if box.length == 0
                    $timeout ->
                      adjust_popup()
                    ,400
                    return
                  offset = _.offset(box)
                  width = box.prop('offsetWidth')
                  height = box.prop('offsetHeight')
                console.log "Position in box: #{position[1]}, at #{position[2]}, #{position[3]}" if debug_position
                left = switch position[2]
                  when 'left' then 0 + offset.left
                  when 'center' then (width)/2 - wizard_width/2 + offset.left
                  when 'right' then width - wizard_width + offset.left
                  else console.log "Don't understand window left position: #{position[1]}"
                top = switch position[3]
                  when 'top' then 0 + offset.top
                  when 'center' then (height)/2 - wizard_height/2 + offset.top
                  when 'bottom' then (height) - wizard_height + offset.top
                  else console.log "Don't understand window top position: #{position[1]}"

              else
                console.log "Don't know how to position type: #{position[0]}"

          console.log "Old position top: #{wizard.css('top')}, left: #{wizard.css('left')}" if debug_position
          console.log "New position top: #{top}, left: #{left}" if debug_position

          wizard.css
            position: 'absolute'
            top:  "#{top}px"
            left: "#{left}px"
          $timeout ->
            console.log "starting wizard_width: #{wizard_width}, ending wizard.prop('offsetWidth'): #{wizard.prop('offsetWidth')}" if debug_position
            if wizard_width != wizard.prop('offsetWidth')
              $timeout ->
                adjust_popup()
          ,100

      $scope.$on "user-event-notification", (event, data) ->
        #console.log "user-event-notification for data.action: #{data.action}"
        # is this a trigger for the current state?
        if data.action is $scope.wizard_current_step['trigger']
          #console.log "The current step has been triggered by #{data.action} to do action: #{$scope.wizard_current_step['action']}"
          switch $scope.wizard_current_step['action']
            when 'next' then $scope.wizard_navigation('next')
            else  console.log "Don't know what to do with wizard notification action #{$scope.wizard_current_step['action']}"
        else
          #console.log "The current step has NOT been triggered by #{data.action}"
  ]
)

ce2_directives.directive('ceReviewComment',[ "$compile", "$timeout", ($compile, $timeout) ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/comment-review.html" %>#{prefix}"
  replace: true
  scope: true
  priority: 100
  controller: [ "$scope", "ConversationData", "$dialog",
    ($scope, ConversationData, $dialog) ->
      $scope.name = 'ceReviewComment'

      $scope.approve_guest_post = ->
        console.log "approve_guest_post for id: #{$scope.post.id}"
        if $scope.post.request_to_join && !$scope.post.invited_at
          #console.log "check that accept/decline is selected"
          if not $scope.post.accept_join
            $scope.must_select_join_radio = "You must Accept or Decline the request to join"
            return
        #console.log "Approve this post"
        ConversationData.accept_guest_post($scope.post).then(
          (response)->
            #console.log "accept_guest_post successful"
            $scope.$emit('delete-guest-post', $scope.post)
        ,
          (reason) ->
            #console.log "accept_guest_post failed"
            if reason.status is 404
              $scope.$emit('delete-guest-post', $scope.post)
              title = 'No action taken'
              msg = "This guest post has already been processed"
              btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
              $dialog.messageBox(title, msg, btns).open()
            else
              $scope.error_message = reason.data.error
        )

      $scope.decline_guest_post = ->
        console.log "decline_guest_post for id: #{$scope.post.id}"
        if $scope.post.request_to_join
          #console.log "check that accept/decline is selected"
          if not $scope.post.accept_join
            $scope.must_select_join_radio = "You must Accept or Decline the request to join"
            return
        #console.log "Decline this post"
        ConversationData.decline_guest_post($scope.post).then(
          (response)->
          #console.log "decline_guest_post successful"
          $scope.$emit('delete-guest-post', $scope.post)
        ,
        (reason) ->
          #console.log "decline_guest_post failed"
          if reason.status is "404"
            $scope.$emit('delete-guest-post', $scope.post)
            title = 'No action taken'
            msg = "This guest post has already been processed"
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
          else
            $scope.error_message = reason.data.error
        )


      $scope.approve_comment = ->
        console.log "approve_comment for id: #{$scope.post.id}"
        ConversationData.accept_comment($scope.post).then(
          (response)->
            #console.log "accept_comment successful"
            $scope.$emit('delete-guest-post', $scope.post)
        ,
        (reason) ->
          #console.log "approve_comment failed"
          if reason.status is 404
            $scope.$emit('delete-pending-comment', $scope.post)
            title = 'No action taken'
            msg = "This comment has already been processed"
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
          else
            $scope.error_message = reason.data.error
        )

      $scope.decline_comment = ->
        #console.log "decline_comment for id: #{$scope.post.id}"
        ConversationData.decline_comment($scope.post).then(
          (response)->
            #console.log "decline_comment successful"
            $scope.$emit('delete-pending-comment', $scope.post)
        ,
        (reason) ->
          #console.log "decline_comment failed"
          if reason.status is 404
            $scope.$emit('delete-guest-post', $scope.post)
            title = 'No action taken'
            msg = "This comment has already been processed"
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
          else
            $scope.error_message = reason.data.error
        )

      $scope.optional_message = ->
        console.log "optional_message for id: #{$scope.post.id}"

      $scope.update_privileges = ->
        console.log "update_privileges for id: #{$scope.post.id}"

  ]
])


ce2_directives.directive('ceReviewFlaggedComment',[ "$compile", "$timeout", ($compile, $timeout) ->
  restrict: 'A'
  templateUrl: (tElement, tAttrs) ->
    prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
    "<%= path_to_asset "panel/flagged-comment-review.html" %>#{prefix}"
  replace: true
  scope: true
  priority: 100
  controller: [ "$scope", "ConversationData", "$dialog",
    ($scope, ConversationData, $dialog) ->
      $scope.name = 'ceReviewFlaggedComment'

      $scope.mark_as = (action) ->
        console.log "mark_as #{action} for id: #{$scope.post.flag_id}"
        ConversationData.mark_flagged_as($scope.post, action).then(
          (response)->
            console.log "mark_as #{action} was successful"
            $scope.$emit('delete-comment-flag', $scope.post)
        ,
        (reason) ->
          console.log "mark_as #{action} failed"
          if reason.status is 404
            $scope.$emit('delete-comment-flag', $scope.post)
            title = 'No action taken'
            msg = "This guest post has already been processed"
            btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
            $dialog.messageBox(title, msg, btns).open()
          else
            $scope.error_message = reason.data.error
        )

      $scope.optional_message = ->
        console.log "optional_message for id: #{$scope.post.id}"

      $scope.update_privileges = ->
        console.log "update_privileges for id: #{$scope.post.id}"

  ]
])


ce2_directives.directive('ceTagComment',[ "$compile", "$timeout", "ThemeData",
  ($compile, $timeout, ThemeData) ->
    restrict: 'A'
    templateUrl: (tElement, tAttrs) ->
      prefix = if tAttrs['dev'] == "true" then "?r=#{Math.random()}" else ""
      "<%= path_to_asset "tag-comment.html" %>#{prefix}"
    replace: true
    scope: true
    controller: [ "$scope", "$timeout", "$dialog",
      ($scope, $timeout, $dialog) ->
        $scope.name = 'ceTagComment'

        $scope.menu_click = ->
          #console.log "menu_click"
          if event.toElement.type == 'text'
            #console.log "text"
            event.stopPropagation()
          else if event.toElement.nodeName == 'INPUT' || event.toElement.nodeName == 'LABEL'
            #console.log "tag_click"
            event.stopPropagation()
            el = event.toElement
            el = angular.element( if el.nodeName == 'INPUT' then el.parentNode else el )
            theme_id = Number(el.find('input').val())
            theme = _.findWhere($scope.conversation.theme_comments, {id: theme_id})
            if _.include($scope.comment.parent_theme_ids, theme_id) || (theme_id == -1 && $scope.comment.parked)
              if theme_id == -1
                $scope.comment.parked = false
              else
                $scope.comment.parent_theme_ids = _.without($scope.comment.parent_theme_ids, theme_id)
                $scope.comment.current_theme_ids = _.without($scope.comment.current_theme_ids, theme_id)
                theme.ordered_child_ids = _.without(theme.ordered_child_ids, $scope.comment.id)
              $scope.save_theme_assignment(theme_id, 'remove', $scope.comment.id )
            else
              if theme_id == -1
                $scope.comment.parked = true
              else
                $scope.comment.parent_theme_ids.push theme_id
                $scope.comment.current_theme_ids.push theme_id
                theme.ordered_child_ids.push $scope.comment.id
              $scope.save_theme_assignment(theme_id, 'add', $scope.comment.id )
            $timeout ->
              $scope.$root.$broadcast 'update-comment-tags', $scope.comment

        $scope.save_theme_assignment = (theme_id, act, comment_id) ->
          data =
            comment_id: comment_id
            theme_id: theme_id
            act: act
          ThemeData.save_theme_assignment(data).then(
            (response)->
              #console.log "save_theme_assignment was #{data.theme_id} successful"
              $scope.$root.$broadcast 'calculate-tag-counts'
              #$scope.comment.parent_theme_ids.push response.data.id
            ,
            (reason) ->
              console.log "save_theme_assignment #{data.theme_id} failed"
              #$scope.error_message = reason.data.error
            )

        $scope.input_submitted = ->
          el = tag_input = angular.element(event.currentTarget).parent().find('input')
          new_tag = tag_input.val()
          if new_tag
            console.log "input_submitted: #{new_tag}"
            # is new tag a unique new tag?
            for theme in $scope.conversation.theme_comments
              if theme.tag_name is new_tag
                console.log "the new tag must be unique"
                return
            console.log "Create a new tag and add it to this comment"
            # send this to the server and add the returning value to the conversation.theme_comments
            new_theme =
              type: "ThemeComment"
              conversation_code: $scope.conversation.code
              tag_name: new_tag
            ThemeData.create_new_theme(new_theme).then(
              (response)->
                console.log "create_new_theme was #{new_tag} successful"
                theme_id = response.data.id
                response.data.ordered_child_ids = [$scope.comment.id]
                $scope.comment.parent_theme_ids.push theme_id
                $scope.comment.current_theme_ids.push theme_id
                tag_input.val('')
                $timeout ->
                  $scope.$root.$broadcast 'update-comment-tags', $scope.comment
                  $scope.save_theme_assignment(response.data.id, 'add', $scope.comment.id )
                if response.data.type
                  $scope.$root.$broadcast "#{response.data.type}_update", {
                    action: 'create'
                    class: response.data.type
                    data: response.data
                    updated_at: response.data.updated_at
                    source: "#create_theme_comment"
                  }
              ,
              (reason) ->
                console.log "create_new_theme #{new_tag} failed"
                $scope.error_message = reason.data.error
                if reason.data.errors['tag_name']
                  title = "Sorry, your tag was too long"
                  msg = "#{reason.data.errors['tag_name']} - The tag is just shorthand to help you track your themes. Click the theme tags on the left to view and edit the themes."
                  btns = [{result:'ok', label: 'OK', cssClass: 'btn-primary'}]
                  $dialog.messageBox(title, msg, btns).open()

            )

          # close the popup (remove .open from div.tags)
          while(el && el.prop('nodeName')!= 'DIV')
            el = el.parent()
          el?.removeClass('open')


    ]
])

ce2_directives.directive('ceSizeAdjuster', ->
  restrict: 'A'
  replace: true
  template: '<div class="ce-size-adjust" ng-click="font_adjust()"><span class="dec">A-</span><span class="inc">A+</span></div>'
  controller: [ "$scope", "$timeout", ($scope, $timeout) ->

    $scope.font_adjust = ->
      target = angular.element(event.target)
      body = angular.element(document.body)
      body_class = body.attr('class')
      #console.log "body_class: #{body_class}"
      size = body_class.match(/size-\w\d/)
      #console.log "size: #{size}"
      if size
        size = size[0]
        body.removeClass(size)
        size = size.match(/(\w)(\d)/)
        size = if size[1] == 'p' then Number(size[2]) else -1 * Number(size[2])
      else
        size = 0

      if target.hasClass('inc')
        #console.log "increase font from #{size}"
        if size < 5 then size += 1
        #console.log "to size: #{size}"
      else
        #console.log "decrease font from #{size}"
        if size > -9   then size -= 1
        #console.log "to size: #{size}"
      size = if size >= 0 then "size-p#{size}" else size = "size-m#{ -1 * size}"
      #console.log "new size class: #{size}"
      body.addClass(size)
  ]
)

ce2_directives.directive('ceLoading', ->
  restrict: 'A'
  replace: true
  template: '<div class="ce-loading"><div class="backdrop"></div><div class="message">Please wait a moment...</div></div>'
  controller: [ "$rootScope", ($rootScope) ->

    $rootScope.$on '$stateChangeStart', (event, toState, toParams, fromState, fromParams) ->
      body = angular.element(document.body)
      body.addClass('loading')
      #console.log "ceLoading $stateChangeStart"

    $rootScope.$on '$stateChangeSuccess', (event, toState, toParams, fromState, fromParams) ->
      body = angular.element(document.body)
      body.removeClass('loading')
      #console.log "ceLoading $stateChangeSuccess"

    $rootScope.$on '$stateChangeError', (event, toState, toParams, fromState, fromParams) ->
      body = angular.element(document.body)
      body.removeClass('loading')

  ]
)

ce2_directives.directive('ngBlur', ->
  ( scope, elem, attrs ) ->
    elem.bind('blur', ->
      scope.$$phase || scope.$apply(attrs.ngBlur)
    )
)
ce2_directives.directive('ngFocus', ->
  ( scope, elem, attrs ) ->
    elem.bind('focus', ->
      scope.$apply(attrs.ngFocus)
    )
)